Index: clean_VIAF_classifier.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"id\": \"29df79eb-96b9-4285-b78b-597f71afb188\",\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-08-28T20:48:15.055705Z\",\r\n     \"start_time\": \"2024-08-28T20:48:14.993781Z\"\r\n    }\r\n   },\r\n   \"source\": [\r\n    \"#imports\\n\",\r\n    \"\\n\",\r\n    \"import requests\\n\",\r\n    \"import time\\n\",\r\n    \"import string\\n\",\r\n    \"import unicodedata\\n\",\r\n    \"import pprint\\n\",\r\n    \"\\n\",\r\n    \"import pandas as pd\"\r\n   ],\r\n   \"outputs\": [\r\n    {\r\n     \"ename\": \"ImportError\",\r\n     \"evalue\": \"DLL load failed while importing _multiarray_umath: The specified module could not be found.\",\r\n     \"output_type\": \"error\",\r\n     \"traceback\": [\r\n      \"\\u001B[1;31m---------------------------------------------------------------------------\\u001B[0m\",\r\n      \"\\u001B[1;31mImportError\\u001B[0m                               Traceback (most recent call last)\",\r\n      \"\\u001B[1;31mImportError\\u001B[0m: DLL load failed while importing _multiarray_umath: The specified module could not be found.\"\r\n     ]\r\n    },\r\n    {\r\n     \"ename\": \"ImportError\",\r\n     \"evalue\": \"numpy._core.multiarray failed to import\",\r\n     \"output_type\": \"error\",\r\n     \"traceback\": [\r\n      \"\\u001B[1;31m---------------------------------------------------------------------------\\u001B[0m\",\r\n      \"\\u001B[1;31mImportError\\u001B[0m                               Traceback (most recent call last)\",\r\n      \"Cell \\u001B[1;32mIn[4], line 9\\u001B[0m\\n\\u001B[0;32m      6\\u001B[0m \\u001B[38;5;28;01mimport\\u001B[39;00m \\u001B[38;5;21;01municodedata\\u001B[39;00m\\n\\u001B[0;32m      7\\u001B[0m \\u001B[38;5;28;01mimport\\u001B[39;00m \\u001B[38;5;21;01mpprint\\u001B[39;00m\\n\\u001B[1;32m----> 9\\u001B[0m \\u001B[38;5;28;01mimport\\u001B[39;00m \\u001B[38;5;21;01mpandas\\u001B[39;00m \\u001B[38;5;28;01mas\\u001B[39;00m \\u001B[38;5;21;01mpd\\u001B[39;00m\\n\",\r\n      \"File \\u001B[1;32m~\\\\miniconda3\\\\Lib\\\\site-packages\\\\pandas\\\\__init__.py:62\\u001B[0m\\n\\u001B[0;32m     59\\u001B[0m \\u001B[38;5;66;03m# let init-time option registration happen\\u001B[39;00m\\n\\u001B[0;32m     60\\u001B[0m \\u001B[38;5;28;01mimport\\u001B[39;00m \\u001B[38;5;21;01mpandas\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01mcore\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01mconfig_init\\u001B[39;00m  \\u001B[38;5;66;03m# pyright: ignore[reportUnusedImport] # noqa: F401\\u001B[39;00m\\n\\u001B[1;32m---> 62\\u001B[0m \\u001B[38;5;28;01mfrom\\u001B[39;00m \\u001B[38;5;21;01mpandas\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01mcore\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01mapi\\u001B[39;00m \\u001B[38;5;28;01mimport\\u001B[39;00m (\\n\\u001B[0;32m     63\\u001B[0m     \\u001B[38;5;66;03m# dtype\\u001B[39;00m\\n\\u001B[0;32m     64\\u001B[0m     ArrowDtype,\\n\\u001B[0;32m     65\\u001B[0m     Int8Dtype,\\n\\u001B[0;32m     66\\u001B[0m     Int16Dtype,\\n\\u001B[0;32m     67\\u001B[0m     Int32Dtype,\\n\\u001B[0;32m     68\\u001B[0m     Int64Dtype,\\n\\u001B[0;32m     69\\u001B[0m     UInt8Dtype,\\n\\u001B[0;32m     70\\u001B[0m     UInt16Dtype,\\n\\u001B[0;32m     71\\u001B[0m     UInt32Dtype,\\n\\u001B[0;32m     72\\u001B[0m     UInt64Dtype,\\n\\u001B[0;32m     73\\u001B[0m     Float32Dtype,\\n\\u001B[0;32m     74\\u001B[0m     Float64Dtype,\\n\\u001B[0;32m     75\\u001B[0m     CategoricalDtype,\\n\\u001B[0;32m     76\\u001B[0m     PeriodDtype,\\n\\u001B[0;32m     77\\u001B[0m     IntervalDtype,\\n\\u001B[0;32m     78\\u001B[0m     DatetimeTZDtype,\\n\\u001B[0;32m     79\\u001B[0m     StringDtype,\\n\\u001B[0;32m     80\\u001B[0m     BooleanDtype,\\n\\u001B[0;32m     81\\u001B[0m     \\u001B[38;5;66;03m# missing\\u001B[39;00m\\n\\u001B[0;32m     82\\u001B[0m     NA,\\n\\u001B[0;32m     83\\u001B[0m     isna,\\n\\u001B[0;32m     84\\u001B[0m     isnull,\\n\\u001B[0;32m     85\\u001B[0m     notna,\\n\\u001B[0;32m     86\\u001B[0m     notnull,\\n\\u001B[0;32m     87\\u001B[0m     \\u001B[38;5;66;03m# indexes\\u001B[39;00m\\n\\u001B[0;32m     88\\u001B[0m     Index,\\n\\u001B[0;32m     89\\u001B[0m     CategoricalIndex,\\n\\u001B[0;32m     90\\u001B[0m     RangeIndex,\\n\\u001B[0;32m     91\\u001B[0m     MultiIndex,\\n\\u001B[0;32m     92\\u001B[0m     IntervalIndex,\\n\\u001B[0;32m     93\\u001B[0m     TimedeltaIndex,\\n\\u001B[0;32m     94\\u001B[0m     DatetimeIndex,\\n\\u001B[0;32m     95\\u001B[0m     PeriodIndex,\\n\\u001B[0;32m     96\\u001B[0m     IndexSlice,\\n\\u001B[0;32m     97\\u001B[0m     \\u001B[38;5;66;03m# tseries\\u001B[39;00m\\n\\u001B[0;32m     98\\u001B[0m     NaT,\\n\\u001B[0;32m     99\\u001B[0m     Period,\\n\\u001B[0;32m    100\\u001B[0m     period_range,\\n\\u001B[0;32m    101\\u001B[0m     Timedelta,\\n\\u001B[0;32m    102\\u001B[0m     timedelta_range,\\n\\u001B[0;32m    103\\u001B[0m     Timestamp,\\n\\u001B[0;32m    104\\u001B[0m     date_range,\\n\\u001B[0;32m    105\\u001B[0m     bdate_range,\\n\\u001B[0;32m    106\\u001B[0m     Interval,\\n\\u001B[0;32m    107\\u001B[0m     interval_range,\\n\\u001B[0;32m    108\\u001B[0m     DateOffset,\\n\\u001B[0;32m    109\\u001B[0m     \\u001B[38;5;66;03m# conversion\\u001B[39;00m\\n\\u001B[0;32m    110\\u001B[0m     to_numeric,\\n\\u001B[0;32m    111\\u001B[0m     to_datetime,\\n\\u001B[0;32m    112\\u001B[0m     to_timedelta,\\n\\u001B[0;32m    113\\u001B[0m     \\u001B[38;5;66;03m# misc\\u001B[39;00m\\n\\u001B[0;32m    114\\u001B[0m     Flags,\\n\\u001B[0;32m    115\\u001B[0m     Grouper,\\n\\u001B[0;32m    116\\u001B[0m     factorize,\\n\\u001B[0;32m    117\\u001B[0m     unique,\\n\\u001B[0;32m    118\\u001B[0m     value_counts,\\n\\u001B[0;32m    119\\u001B[0m     NamedAgg,\\n\\u001B[0;32m    120\\u001B[0m     array,\\n\\u001B[0;32m    121\\u001B[0m     Categorical,\\n\\u001B[0;32m    122\\u001B[0m     set_eng_float_format,\\n\\u001B[0;32m    123\\u001B[0m     Series,\\n\\u001B[0;32m    124\\u001B[0m     DataFrame,\\n\\u001B[0;32m    125\\u001B[0m )\\n\\u001B[0;32m    127\\u001B[0m \\u001B[38;5;28;01mfrom\\u001B[39;00m \\u001B[38;5;21;01mpandas\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01mcore\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01mdtypes\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01mdtypes\\u001B[39;00m \\u001B[38;5;28;01mimport\\u001B[39;00m SparseDtype\\n\\u001B[0;32m    129\\u001B[0m \\u001B[38;5;28;01mfrom\\u001B[39;00m \\u001B[38;5;21;01mpandas\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01mtseries\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01mapi\\u001B[39;00m \\u001B[38;5;28;01mimport\\u001B[39;00m infer_freq\\n\",\r\n      \"File \\u001B[1;32m~\\\\miniconda3\\\\Lib\\\\site-packages\\\\pandas\\\\core\\\\api.py:1\\u001B[0m\\n\\u001B[1;32m----> 1\\u001B[0m \\u001B[38;5;28;01mfrom\\u001B[39;00m \\u001B[38;5;21;01mpandas\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01m_libs\\u001B[39;00m \\u001B[38;5;28;01mimport\\u001B[39;00m (\\n\\u001B[0;32m      2\\u001B[0m     NaT,\\n\\u001B[0;32m      3\\u001B[0m     Period,\\n\\u001B[0;32m      4\\u001B[0m     Timedelta,\\n\\u001B[0;32m      5\\u001B[0m     Timestamp,\\n\\u001B[0;32m      6\\u001B[0m )\\n\\u001B[0;32m      7\\u001B[0m \\u001B[38;5;28;01mfrom\\u001B[39;00m \\u001B[38;5;21;01mpandas\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01m_libs\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01mmissing\\u001B[39;00m \\u001B[38;5;28;01mimport\\u001B[39;00m NA\\n\\u001B[0;32m      9\\u001B[0m \\u001B[38;5;28;01mfrom\\u001B[39;00m \\u001B[38;5;21;01mpandas\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01mcore\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01mdtypes\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01mdtypes\\u001B[39;00m \\u001B[38;5;28;01mimport\\u001B[39;00m (\\n\\u001B[0;32m     10\\u001B[0m     ArrowDtype,\\n\\u001B[0;32m     11\\u001B[0m     CategoricalDtype,\\n\\u001B[1;32m   (...)\\u001B[0m\\n\\u001B[0;32m     14\\u001B[0m     PeriodDtype,\\n\\u001B[0;32m     15\\u001B[0m )\\n\",\r\n      \"File \\u001B[1;32m~\\\\miniconda3\\\\Lib\\\\site-packages\\\\pandas\\\\_libs\\\\__init__.py:17\\u001B[0m\\n\\u001B[0;32m     13\\u001B[0m \\u001B[38;5;66;03m# Below imports needs to happen first to ensure pandas top level\\u001B[39;00m\\n\\u001B[0;32m     14\\u001B[0m \\u001B[38;5;66;03m# module gets monkeypatched with the pandas_datetime_CAPI\\u001B[39;00m\\n\\u001B[0;32m     15\\u001B[0m \\u001B[38;5;66;03m# see pandas_datetime_exec in pd_datetime.c\\u001B[39;00m\\n\\u001B[0;32m     16\\u001B[0m \\u001B[38;5;28;01mimport\\u001B[39;00m \\u001B[38;5;21;01mpandas\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01m_libs\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01mpandas_parser\\u001B[39;00m  \\u001B[38;5;66;03m# isort: skip # type: ignore[reportUnusedImport]\\u001B[39;00m\\n\\u001B[1;32m---> 17\\u001B[0m \\u001B[38;5;28;01mimport\\u001B[39;00m \\u001B[38;5;21;01mpandas\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01m_libs\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01mpandas_datetime\\u001B[39;00m  \\u001B[38;5;66;03m# noqa: F401 # isort: skip # type: ignore[reportUnusedImport]\\u001B[39;00m\\n\\u001B[0;32m     18\\u001B[0m \\u001B[38;5;28;01mfrom\\u001B[39;00m \\u001B[38;5;21;01mpandas\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01m_libs\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01minterval\\u001B[39;00m \\u001B[38;5;28;01mimport\\u001B[39;00m Interval\\n\\u001B[0;32m     19\\u001B[0m \\u001B[38;5;28;01mfrom\\u001B[39;00m \\u001B[38;5;21;01mpandas\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01m_libs\\u001B[39;00m\\u001B[38;5;21;01m.\\u001B[39;00m\\u001B[38;5;21;01mtslibs\\u001B[39;00m \\u001B[38;5;28;01mimport\\u001B[39;00m (\\n\\u001B[0;32m     20\\u001B[0m     NaT,\\n\\u001B[0;32m     21\\u001B[0m     NaTType,\\n\\u001B[1;32m   (...)\\u001B[0m\\n\\u001B[0;32m     26\\u001B[0m     iNaT,\\n\\u001B[0;32m     27\\u001B[0m )\\n\",\r\n      \"\\u001B[1;31mImportError\\u001B[0m: numpy._core.multiarray failed to import\"\r\n     ]\r\n    }\r\n   ],\r\n   \"execution_count\": 4\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"id\": \"e16d7f46-98d6-4b01-9598-d7552106a31c\",\r\n   \"metadata\": {\r\n    \"ExecuteTime\": {\r\n     \"end_time\": \"2024-08-28T20:45:03.769915Z\",\r\n     \"start_time\": \"2024-08-28T20:45:03.760306Z\"\r\n    }\r\n   },\r\n   \"source\": [\r\n    \"#read in our data\\n\",\r\n    \"df = pd.read_csv('result_df_july18_1136am.csv')\"\r\n   ],\r\n   \"outputs\": [\r\n    {\r\n     \"ename\": \"NameError\",\r\n     \"evalue\": \"name 'pd' is not defined\",\r\n     \"output_type\": \"error\",\r\n     \"traceback\": [\r\n      \"\\u001B[1;31m---------------------------------------------------------------------------\\u001B[0m\",\r\n      \"\\u001B[1;31mNameError\\u001B[0m                                 Traceback (most recent call last)\",\r\n      \"Cell \\u001B[1;32mIn[3], line 2\\u001B[0m\\n\\u001B[0;32m      1\\u001B[0m \\u001B[38;5;66;03m#read in our data\\u001B[39;00m\\n\\u001B[1;32m----> 2\\u001B[0m df \\u001B[38;5;241m=\\u001B[39m pd\\u001B[38;5;241m.\\u001B[39mread_csv(\\u001B[38;5;124m'\\u001B[39m\\u001B[38;5;124mresult_df_july18_1136am.csv\\u001B[39m\\u001B[38;5;124m'\\u001B[39m)\\n\",\r\n      \"\\u001B[1;31mNameError\\u001B[0m: name 'pd' is not defined\"\r\n     ]\r\n    }\r\n   ],\r\n   \"execution_count\": 3\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"id\": \"fc6c6fdf-4d87-41b5-9bd6-86391ce94920\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"For this specific subsample example, we need to add back S2 metadata like S2 titles and pubdates (there were left out/removed somehow when this VIAF subsample was created\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 480,\r\n   \"id\": \"8f4be7a2-a3ca-42ee-9a72-ff43f2d5b6fa\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"#for this specific subsample example, we need to add back S2 info like S2 titles and pub dates\\n\",\r\n    \"\\n\",\r\n    \"#add in the S2 titles\\n\",\r\n    \"\\n\",\r\n    \"#get publication date to do avergae pub date work\\n\",\r\n    \"# Load the metadata TSV file into a DataFrame\\n\",\r\n    \"file_path = 'LitMetadataWithS2 (3).tsv'\\n\",\r\n    \"\\n\",\r\n    \"import pandas as pd\\n\",\r\n    \"meta = pd.read_csv(file_path, sep='\\\\t')\\n\",\r\n    \"\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 481,\r\n   \"id\": \"58d1c533-2670-4bbd-beb9-099559a2b46f\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"# Ensure the authors column is of type list\\n\",\r\n    \"meta['author'] = meta['authors'].apply(lambda x: eval(x) if isinstance(x, str) else x)\\n\",\r\n    \"\\n\",\r\n    \"# Use the explode method to expand the authors column\\n\",\r\n    \"meta_exploded = meta.explode('authors')\\n\",\r\n    \"\\n\",\r\n    \"meta = meta_exploded\\n\",\r\n    \"\\n\",\r\n    \"# Display the exploded DataFrame\\n\",\r\n    \"# print(meta_exploded)\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 482,\r\n   \"id\": \"00b9ad82-40e5-43a5-beb1-56852afb796d\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"for idx, row in meta.iterrows():\\n\",\r\n    \"    author = str(row['author'])\\n\",\r\n    \"    author_clean = normalize_text(author)\\n\",\r\n    \"    meta.at[idx, 'author'] = author_clean\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"id\": \"0ddd7229-43a2-4ebf-9f90-5cbdc15a8292\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"Add back the S2 titles\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 483,\r\n   \"id\": \"ba4c9a62-3931-4fd9-9d3e-ac620515262e\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"# Initialize an empty dictionary to store the author-title mapping\\n\",\r\n    \"author_titles = {}\\n\",\r\n    \"\\n\",\r\n    \"# Iterate over the DataFrame rows\\n\",\r\n    \"for index, row in meta.iterrows():\\n\",\r\n    \"    author = str(row['author'])\\n\",\r\n    \"    title = row['S2titles']\\n\",\r\n    \"    \\n\",\r\n    \"    # Use setdefault to initialize the list if the author is not already in the dictionary\\n\",\r\n    \"    author_titles.setdefault(author, []).append(title)\\n\",\r\n    \"\\n\",\r\n    \"# # Display the dictionary to verify\\n\",\r\n    \"# print(author_titles)\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 484,\r\n   \"id\": \"1dc8989d-34f7-4328-9471-009d66c60510\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"import re\\n\",\r\n    \"\\n\",\r\n    \"def normalize_text(text):\\n\",\r\n    \"    \\\"\\\"\\\"\\n\",\r\n    \"    Normalize the text by converting to lowercase, preserving commas and spaces,\\n\",\r\n    \"    and removing unnecessary special characters.\\n\",\r\n    \"    \\\"\\\"\\\"\\n\",\r\n    \"    if pd.isna(text):\\n\",\r\n    \"        return ''\\n\",\r\n    \"    text = text.lower()  # Convert to lowercase\\n\",\r\n    \"    text = re.sub(r'\\\\s+', ' ', text)  # Replace multiple spaces with a single space\\n\",\r\n    \"    text = re.sub(r'[^\\\\w\\\\s,]', '', text)  # Remove all characters except alphanumeric, spaces, and commas\\n\",\r\n    \"    return text.strip()  # Trim leading and trailing spaces\\n\",\r\n    \"\\n\",\r\n    \"title_author_dict = author_titles\\n\",\r\n    \"# Normalize the dictionary\\n\",\r\n    \"#normalized_dict = {normalize_text(title): normalize_text(author) for title, author in title_author_dict.items()}\\n\",\r\n    \"#normalized_dict = {normalize_text(title): normalize_text(author) for title, author in title_author_dict.items()}\\n\",\r\n    \"\\n\",\r\n    \"# Normalize the DataFrame\\n\",\r\n    \"# df['normalized_S2_titlelist'] = df['S2_Titlelist'].apply(normalize_text)\\n\",\r\n    \"df['normalized_author'] = df['author'].apply(normalize_text)\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 485,\r\n   \"id\": \"953218a0-7f4f-43a4-938b-cb1359ef3ee6\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"normalized_dict = {normalize_text(str(author)): normalize_text(str(title)) for title, author in author_titles.items()}\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 486,\r\n   \"id\": \"90310035-d396-4fc5-a1db-ddda810a97ad\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"swapped_dict = {v: k for k, v in normalized_dict.items()}\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 487,\r\n   \"id\": \"d4433fe8-a535-469d-aaf0-2a91f090e4f1\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"# swapped_dict\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 488,\r\n   \"id\": \"afda86c5-b536-4e2f-974a-bea30da02b5e\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"df['S2_Titlelist'] = df['normalized_author'].map(swapped_dict)\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 489,\r\n   \"id\": \"849b21f2-8cdb-43a4-9871-de99ed232c1a\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"# df\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"id\": \"c4eb7f7c-44f1-41fe-9530-9d6ea119178e\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"Now add back the S2 pubyears\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 490,\r\n   \"id\": \"a3229509-428d-4129-92a9-97d0468aa74e\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"# Initialize an empty dictionary to store the author-title mapping\\n\",\r\n    \"author_years = {}\\n\",\r\n    \"\\n\",\r\n    \"# Iterate over the DataFrame rows\\n\",\r\n    \"for index, row in meta.iterrows():\\n\",\r\n    \"    author = str(row['author'])\\n\",\r\n    \"    year = row['year']\\n\",\r\n    \"    \\n\",\r\n    \"    # Use setdefault to initialize the list if the author is not already in the dictionary\\n\",\r\n    \"    author_years.setdefault(author, []).append(year)\\n\",\r\n    \"\\n\",\r\n    \"# Display the dictionary to verify\\n\",\r\n    \"# print(author_titles)\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 491,\r\n   \"id\": \"797127b7-d878-4135-9944-7285edc0e647\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"# normalized_dict = {normalize_text(str(author)): normalize_text(str(title)) for title, author in title_author_dict.items()}\\n\",\r\n    \"normalized_dict = {normalize_text(str(author)): title for title, author in author_years.items()}\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 492,\r\n   \"id\": \"ad07e114-6d33-47b1-a880-2dc81749cb3f\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"#normalize then apply dictionary\\n\",\r\n    \"# cleaned_dict = {key.strip(\\\"[]'\\\"): value for key, value in normalized_dict.items()}\\n\",\r\n    \"swapped_dict = {v: k for k, v in normalized_dict.items()}\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"def update_pubdates(name):\\n\",\r\n    \"    if name in swapped_dict:\\n\",\r\n    \"        years = swapped_dict[name]\\n\",\r\n    \"        return years\\n\",\r\n    \"    \\n\",\r\n    \"df['S2_pubdates'] = df['normalized_author'].apply(update_pubdates)\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 493,\r\n   \"id\": \"d61ad77e-b016-444f-924f-c60aee6bac1d\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"# df['S2_pubdates'] = df['author'].map(author_years)\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 494,\r\n   \"id\": \"ea4a3ef9-486b-46d1-a812-549235f4d17f\",\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"0                                                   None\\n\",\r\n       \"1                                                   None\\n\",\r\n       \"2                                                   None\\n\",\r\n       \"3                                                   None\\n\",\r\n       \"4                                                   None\\n\",\r\n       \"                             ...                        \\n\",\r\n       \"806       1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989\\n\",\r\n       \"807       1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989\\n\",\r\n       \"808       1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989\\n\",\r\n       \"809             1994, 1971, 1976, 1987, 1986, 1988, 1993\\n\",\r\n       \"810    2008, 2014, 2008, 2006, 2015, 2013, 2004, 2003...\\n\",\r\n       \"Name: S2_pubdates, Length: 811, dtype: object\"\r\n      ]\r\n     },\r\n     \"execution_count\": 494,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"df['S2_pubdates']\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 495,\r\n   \"id\": \"27c2cf17-de7a-43c9-b65c-4ff17dfc2ff9\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"# df\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"id\": \"feed36e6-1818-4465-9948-026ac9a90991\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"Step 1: Create the Features We Need\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"id\": \"2c9a2839-9adb-4755-bda8-016ce0535129\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"Get all of the necessary information/entries from VIAF\\n\",\r\n    \"(For the subsample example, this has already been done and can be skipped)\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"id\": \"08451175-5776-458a-a565-d0354a33444b\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"First, set up the functions to search VIAF and intialize the API\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 496,\r\n   \"id\": \"cf8e8194-6152-4796-a470-dfd145b328da\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"def get_name(name):\\n\",\r\n    \"    params = {\\n\",\r\n    \"        'query' : f'local.personalNames = \\\"{name}\\\"',\\n\",\r\n    \"        'maximumRecords': 10,\\n\",\r\n    \"        'startRecord' : 1,\\n\",\r\n    \"        'sortKeys': 'holdingscount',\\n\",\r\n    \"        'httpAccept': 'application/json'\\n\",\r\n    \"    }\\n\",\r\n    \"\\n\",\r\n    \"    headers={'User-Agent': user_agent}\\n\",\r\n    \"    url = \\\"https://viaf.org/viaf/search\\\"\\n\",\r\n    \"\\n\",\r\n    \"    r = requests.get(url,params=params,headers=headers, timeout=10)\\n\",\r\n    \"    data = r.json()\\n\",\r\n    \"\\n\",\r\n    \"    return data\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 497,\r\n   \"id\": \"097fab29-a53d-48d9-bf8f-a549ca5df11d\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"user_agent = 'YOUR PROJECT NAME HERE'\\n\",\r\n    \"id_column_name = \\\"Name\\\"\\n\",\r\n    \"\\n\",\r\n    \"pause_between_req = 1\\n\",\r\n    \"\\n\",\r\n    \"use_title_reconcilation = True\\n\",\r\n    \"\\n\",\r\n    \"cache = {}\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"id\": \"92243a02-1cf7-4185-97f1-fb50f155c5dc\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"Then create a function to extract the information that we want out of the VIAF JSON returned\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 498,\r\n   \"id\": \"4b2a2746-39a9-4f04-b1ad-3c26aad469d0\",\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"ename\": \"ModuleNotFoundError\",\r\n     \"evalue\": \"No module named 'fuzzywuzzy'\",\r\n     \"output_type\": \"error\",\r\n     \"traceback\": [\r\n      \"\\u001B[0;31m---------------------------------------------------------------------------\\u001B[0m\",\r\n      \"\\u001B[0;31mModuleNotFoundError\\u001B[0m                       Traceback (most recent call last)\",\r\n      \"Cell \\u001B[0;32mIn[498], line 2\\u001B[0m\\n\\u001B[1;32m      1\\u001B[0m \\u001B[38;5;28;01mimport\\u001B[39;00m \\u001B[38;5;21;01mpandas\\u001B[39;00m \\u001B[38;5;28;01mas\\u001B[39;00m \\u001B[38;5;21;01mpd\\u001B[39;00m\\n\\u001B[0;32m----> 2\\u001B[0m \\u001B[38;5;28;01mfrom\\u001B[39;00m \\u001B[38;5;21;01mfuzzywuzzy\\u001B[39;00m \\u001B[38;5;28;01mimport\\u001B[39;00m fuzz\\n\\u001B[1;32m      4\\u001B[0m birthdates_df \\u001B[38;5;241m=\\u001B[39m df\\n\\u001B[1;32m      6\\u001B[0m \\u001B[38;5;66;03m# Function to perform search and return DataFrame with search results\\u001B[39;00m\\n\",\r\n      \"\\u001B[0;31mModuleNotFoundError\\u001B[0m: No module named 'fuzzywuzzy'\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"# import pandas as pd\\n\",\r\n    \"# from fuzzywuzzy import fuzz\\n\",\r\n    \"\\n\",\r\n    \"# birthdates_df = df\\n\",\r\n    \"\\n\",\r\n    \"# # Function to perform search and return DataFrame with search results\\n\",\r\n    \"# def search_author(author_name):\\n\",\r\n    \"#     # Initialize list to store search results\\n\",\r\n    \"#     search_results = []\\n\",\r\n    \"\\n\",\r\n    \"#     try:\\n\",\r\n    \"#         data = get_name(author_name)\\n\",\r\n    \"#         records = data['searchRetrieveResponse']['records']\\n\",\r\n    \"#         total_records = len(records)\\n\",\r\n    \"\\n\",\r\n    \"#         for idx, record in enumerate(records):\\n\",\r\n    \"#             record_data = record['record']['recordData']\\n\",\r\n    \"#             birthdate = record['record']['recordData']['birthDate']\\n\",\r\n    \"#             viaf_title_list = []\\n\",\r\n    \"#             # Extract titles if available\\n\",\r\n    \"#             if 'titles' in record_data:\\n\",\r\n    \"#                 titles_data = record_data['titles']\\n\",\r\n    \"#                 if titles_data is not None:\\n\",\r\n    \"#                     if isinstance(titles_data['work'], list):\\n\",\r\n    \"#                         # Extract titles from the list of works\\n\",\r\n    \"#                         viaf_title_list.extend([work['title'] for work in titles_data['work'] if 'title' in work])\\n\",\r\n    \"#                     else:\\n\",\r\n    \"#                         # Extract title from a single work\\n\",\r\n    \"#                         title = titles_data['work'].get('title')\\n\",\r\n    \"#                         if title:\\n\",\r\n    \"#                             viaf_title_list.append(title)\\n\",\r\n    \"\\n\",\r\n    \"# #             # Get S2 titles for the author\\n\",\r\n    \"# #             s2_titles = birthdates_df.loc[birthdates_df['author'] == author_name, 'S2 Titles'].iloc[0]\\n\",\r\n    \"# #             if isinstance(s2_titles, float):\\n\",\r\n    \"# #                 s2_titles = []\\n\",\r\n    \"\\n\",\r\n    \"# #             # Perform fuzzy title matching\\n\",\r\n    \"# #             title_matched = False\\n\",\r\n    \"# #             matched_title = None\\n\",\r\n    \"# #             for title_from_viaf in title_list:\\n\",\r\n    \"# #                 for s2_title in s2_titles:\\n\",\r\n    \"# #                     if fuzz.partial_ratio(s2_title, title_from_viaf) >= 70:\\n\",\r\n    \"# #                         title_matched = True\\n\",\r\n    \"# #                         matched_title = s2_title\\n\",\r\n    \"# #                         break\\n\",\r\n    \"# #                 if title_matched:\\n\",\r\n    \"# #                     break\\n\",\r\n    \"\\n\",\r\n    \"# #             # Append author name, title list, S2 titles, title matched, matched title, and birthdate to search results\\n\",\r\n    \"# #             # birthdate = birthdates_df.loc[birthdates_df['author'] == author_name, 'birthdate'].iloc[0]\\n\",\r\n    \"# #             search_results.append({'author': author_name, 'record_count': len(records),\\n\",\r\n    \"# #                                    'record_enumerated': idx, 'title_list': title_list,\\n\",\r\n    \"# #                                    'S2 Titles': s2_titles, 'title_matched': title_matched,\\n\",\r\n    \"# #                                    'matched_title': matched_title, 'birthdate': birthdate})\\n\",\r\n    \"            \\n\",\r\n    \"#             # Append author name, title list, S2 titles, title matched, matched title, and birthdate to search results\\n\",\r\n    \"#             # birthdate = birthdates_df.loc[birthdates_df['author'] == author_name, 'birthdate'].iloc[0]\\n\",\r\n    \"#             title_list = df.loc[df['author'] == author_name, 'title_list'].iloc[0]\\n\",\r\n    \"\\n\",\r\n    \"#             search_results.append({'author': author_name, 'record_count': len(records),\\n\",\r\n    \"#                                    'record_enumerated': idx, 'viaf_title_list': viaf_title_list,\\n\",\r\n    \"#                                    'birthdate': birthdate,'title_list':title_list})\\n\",\r\n    \"#     except Exception as e:\\n\",\r\n    \"#         print(f'Processing Error for {author_name}: {e}')\\n\",\r\n    \"\\n\",\r\n    \"#     return search_results\\n\",\r\n    \"\\n\",\r\n    \"# # Iterate through each author name in the original DataFrame and perform the search\\n\",\r\n    \"# all_search_results = []\\n\",\r\n    \"# row_counter = 0  # Counter to limit the number of rows processed\\n\",\r\n    \"\\n\",\r\n    \"# for author_name in birthdates_df['author']:\\n\",\r\n    \"#     search_results = search_author(author_name)\\n\",\r\n    \"#     all_search_results.extend(search_results)\\n\",\r\n    \"#     # row_counter += 1\\n\",\r\n    \"#     # if row_counter >= 5:  # Adjust the number as needed\\n\",\r\n    \"#     #     break\\n\",\r\n    \"\\n\",\r\n    \"# # Convert list of dictionaries to DataFrame\\n\",\r\n    \"# all_search_results_df = pd.DataFrame(all_search_results)\\n\",\r\n    \"# print(all_search_results_df)\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"id\": \"5464c340-a73e-4bbc-bc16-18e33fae133d\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"Rename some columns so they match later usage\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 499,\r\n   \"id\": \"437b1aa9-d5d8-415a-9836-830f48ea928d\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"result_df = df\\n\",\r\n    \"result_df['VIAF_titlelist'] = result_df['record_enumerated_titles'] \\n\",\r\n    \"result_df['S2_titlelist'] = result_df['S2titles']\\n\",\r\n    \"result_df['average_S2_pubdate'] = result_df['avg_pubdates']\\n\",\r\n    \"result_df['VIAF_birthdate'] = result_df['standard_birthdate']\\n\",\r\n    \"result_df['S2_Author'] = result_df['author']\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"df = result_df\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 500,\r\n   \"id\": \"7d4e2ffc-26f7-4656-887e-a40d0cbccf5d\",\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/html\": [\r\n       \"<div>\\n\",\r\n       \"<style scoped>\\n\",\r\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\r\n       \"        vertical-align: middle;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe tbody tr th {\\n\",\r\n       \"        vertical-align: top;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe thead th {\\n\",\r\n       \"        text-align: right;\\n\",\r\n       \"    }\\n\",\r\n       \"</style>\\n\",\r\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\r\n       \"  <thead>\\n\",\r\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\r\n       \"      <th></th>\\n\",\r\n       \"      <th>Unnamed: 0</th>\\n\",\r\n       \"      <th>index</th>\\n\",\r\n       \"      <th>author</th>\\n\",\r\n       \"      <th>birthdate</th>\\n\",\r\n       \"      <th>record_enumerated</th>\\n\",\r\n       \"      <th>title_list</th>\\n\",\r\n       \"      <th>record_enumerated_titles</th>\\n\",\r\n       \"      <th>record_count</th>\\n\",\r\n       \"      <th>selected_birthyear</th>\\n\",\r\n       \"      <th>standard_birthdate</th>\\n\",\r\n       \"      <th>...</th>\\n\",\r\n       \"      <th>common_words</th>\\n\",\r\n       \"      <th>notes</th>\\n\",\r\n       \"      <th>normalized_author</th>\\n\",\r\n       \"      <th>S2_Titlelist</th>\\n\",\r\n       \"      <th>S2_pubdates</th>\\n\",\r\n       \"      <th>VIAF_titlelist</th>\\n\",\r\n       \"      <th>S2_titlelist</th>\\n\",\r\n       \"      <th>average_S2_pubdate</th>\\n\",\r\n       \"      <th>VIAF_birthdate</th>\\n\",\r\n       \"      <th>S2_Author</th>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </thead>\\n\",\r\n       \"  <tbody>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>0</th>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1869</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>['All men are brothers', 'All men are brothers...</td>\\n\",\r\n       \"      <td>['All men are brothers', 'All men are brothers...</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1869</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td></td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>['All men are brothers', 'All men are brothers...</td>\\n\",\r\n       \"      <td>['']</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1869</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>1</th>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1813</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>['Adagio, clarinet, strings, D♭ major', 'Adieu...</td>\\n\",\r\n       \"      <td>['Adagio, clarinet, strings, D♭ major', 'Adieu...</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1813</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td></td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>['Adagio, clarinet, strings, D♭ major', 'Adieu...</td>\\n\",\r\n       \"      <td>['']</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1813</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>2</th>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1859</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>['Adventure of Black Peter', 'Adventure of Bla...</td>\\n\",\r\n       \"      <td>['Adventure of Black Peter', 'Adventure of Bla...</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1859</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td></td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>['Adventure of Black Peter', 'Adventure of Bla...</td>\\n\",\r\n       \"      <td>['']</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1859</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>3</th>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1866</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>['10 letters of Sun Yat-Sen, 1914-1916', '30 J...</td>\\n\",\r\n       \"      <td>['10 letters of Sun Yat-Sen, 1914-1916', '30 J...</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1866</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td></td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>['10 letters of Sun Yat-Sen, 1914-1916', '30 J...</td>\\n\",\r\n       \"      <td>['']</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1866</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>4</th>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1864</td>\\n\",\r\n       \"      <td>5</td>\\n\",\r\n       \"      <td>['Alle guten Wünsche zum neuen Jahre sendet I...</td>\\n\",\r\n       \"      <td>['Alle guten Wünsche zum neuen Jahre sendet I...</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1864</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td></td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>['Alle guten Wünsche zum neuen Jahre sendet I...</td>\\n\",\r\n       \"      <td>['']</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1864</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>...</th>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>806</th>\\n\",\r\n       \"      <td>806</td>\\n\",\r\n       \"      <td>806</td>\\n\",\r\n       \"      <td>Paul Alpers</td>\\n\",\r\n       \"      <td>1941</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>['1375-1620', '1620-1789', '1789-1888', '476-1...</td>\\n\",\r\n       \"      <td>['1375-1620', '1620-1789', '1789-1888', '476-1...</td>\\n\",\r\n       \"      <td>6</td>\\n\",\r\n       \"      <td>1932.0</td>\\n\",\r\n       \"      <td>1941</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>['modern']</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>paul alpers</td>\\n\",\r\n       \"      <td>convening and convention in pastoral poetry, t...</td>\\n\",\r\n       \"      <td>1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989</td>\\n\",\r\n       \"      <td>['1375-1620', '1620-1789', '1789-1888', '476-1...</td>\\n\",\r\n       \"      <td>['convening and convention in pastoral poetry'...</td>\\n\",\r\n       \"      <td>1984.375000</td>\\n\",\r\n       \"      <td>1941</td>\\n\",\r\n       \"      <td>Paul Alpers</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>807</th>\\n\",\r\n       \"      <td>807</td>\\n\",\r\n       \"      <td>807</td>\\n\",\r\n       \"      <td>Paul Alpers</td>\\n\",\r\n       \"      <td>1932</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>['Afterlives of Pastoral : in memorian Paul Al...</td>\\n\",\r\n       \"      <td>['Afterlives of Pastoral : in memorian Paul Al...</td>\\n\",\r\n       \"      <td>6</td>\\n\",\r\n       \"      <td>1932.0</td>\\n\",\r\n       \"      <td>1932</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>['queene', 'poetry', 'pastoral', 'faerie', 'pa...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>paul alpers</td>\\n\",\r\n       \"      <td>convening and convention in pastoral poetry, t...</td>\\n\",\r\n       \"      <td>1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989</td>\\n\",\r\n       \"      <td>['Afterlives of Pastoral : in memorian Paul Al...</td>\\n\",\r\n       \"      <td>['convening and convention in pastoral poetry'...</td>\\n\",\r\n       \"      <td>1984.375000</td>\\n\",\r\n       \"      <td>1932</td>\\n\",\r\n       \"      <td>Paul Alpers</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>808</th>\\n\",\r\n       \"      <td>808</td>\\n\",\r\n       \"      <td>808</td>\\n\",\r\n       \"      <td>Paul Alpers</td>\\n\",\r\n       \"      <td>1887</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>['Alte deutsche Schwänke', 'Celler Flurnamenb...</td>\\n\",\r\n       \"      <td>['Alte deutsche Schwänke', 'Celler Flurnamenb...</td>\\n\",\r\n       \"      <td>6</td>\\n\",\r\n       \"      <td>1932.0</td>\\n\",\r\n       \"      <td>1887</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>paul alpers</td>\\n\",\r\n       \"      <td>convening and convention in pastoral poetry, t...</td>\\n\",\r\n       \"      <td>1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989</td>\\n\",\r\n       \"      <td>['Alte deutsche Schwänke', 'Celler Flurnamenb...</td>\\n\",\r\n       \"      <td>['convening and convention in pastoral poetry'...</td>\\n\",\r\n       \"      <td>1984.375000</td>\\n\",\r\n       \"      <td>1887</td>\\n\",\r\n       \"      <td>Paul Alpers</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>809</th>\\n\",\r\n       \"      <td>809</td>\\n\",\r\n       \"      <td>809</td>\\n\",\r\n       \"      <td>Ihab Hassan</td>\\n\",\r\n       \"      <td>1925</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>['Between the Eagle and the Sun : traces of Ja...</td>\\n\",\r\n       \"      <td>['Between the Eagle and the Sun : traces of Ja...</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>1925.0</td>\\n\",\r\n       \"      <td>1925</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>['literature', 'american', 'criticism', 'postm...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>ihab hassan</td>\\n\",\r\n       \"      <td>criticism in our clime parables of american ac...</td>\\n\",\r\n       \"      <td>1994, 1971, 1976, 1987, 1986, 1988, 1993</td>\\n\",\r\n       \"      <td>['Between the Eagle and the Sun : traces of Ja...</td>\\n\",\r\n       \"      <td>['criticism in our clime: parables of american...</td>\\n\",\r\n       \"      <td>1985.000000</td>\\n\",\r\n       \"      <td>1925</td>\\n\",\r\n       \"      <td>Ihab Hassan</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>810</th>\\n\",\r\n       \"      <td>810</td>\\n\",\r\n       \"      <td>810</td>\\n\",\r\n       \"      <td>Annette Volfing</td>\\n\",\r\n       \"      <td>1965</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>['Allegorie und Didaxe in Konrads ›Büchlein v...</td>\\n\",\r\n       \"      <td>['Allegorie und Didaxe in Konrads ›Büchlein v...</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>1965.0</td>\\n\",\r\n       \"      <td>1965</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>['heinrich', 'german', 'und', 'high', 'middle'...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>annette volfing</td>\\n\",\r\n       \"      <td>imagination und deixis studien zur wahrnehmung...</td>\\n\",\r\n       \"      <td>2008, 2014, 2008, 2006, 2015, 2013, 2004, 2003...</td>\\n\",\r\n       \"      <td>['Allegorie und Didaxe in Konrads ›Büchlein v...</td>\\n\",\r\n       \"      <td>['imagination und deixis: studien zur wahrnehm...</td>\\n\",\r\n       \"      <td>2007.923077</td>\\n\",\r\n       \"      <td>1965</td>\\n\",\r\n       \"      <td>Annette Volfing</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </tbody>\\n\",\r\n       \"</table>\\n\",\r\n       \"<p>811 rows × 29 columns</p>\\n\",\r\n       \"</div>\"\r\n      ],\r\n      \"text/plain\": [\r\n       \"     Unnamed: 0  index           author  birthdate  record_enumerated  \\\\\\n\",\r\n       \"0             0      0              NaN       1869                  1   \\n\",\r\n       \"1             1      1              NaN       1813                  2   \\n\",\r\n       \"2             2      2              NaN       1859                  3   \\n\",\r\n       \"3             3      3              NaN       1866                  4   \\n\",\r\n       \"4             4      4              NaN       1864                  5   \\n\",\r\n       \"..          ...    ...              ...        ...                ...   \\n\",\r\n       \"806         806    806      Paul Alpers       1941                  1   \\n\",\r\n       \"807         807    807      Paul Alpers       1932                  2   \\n\",\r\n       \"808         808    808      Paul Alpers       1887                  3   \\n\",\r\n       \"809         809    809      Ihab Hassan       1925                  1   \\n\",\r\n       \"810         810    810  Annette Volfing       1965                  1   \\n\",\r\n       \"\\n\",\r\n       \"                                            title_list  \\\\\\n\",\r\n       \"0    ['All men are brothers', 'All men are brothers...   \\n\",\r\n       \"1    ['Adagio, clarinet, strings, D♭ major', 'Adieu...   \\n\",\r\n       \"2    ['Adventure of Black Peter', 'Adventure of Bla...   \\n\",\r\n       \"3    ['10 letters of Sun Yat-Sen, 1914-1916', '30 J...   \\n\",\r\n       \"4    ['Alle guten Wünsche zum neuen Jahre sendet I...   \\n\",\r\n       \"..                                                 ...   \\n\",\r\n       \"806  ['1375-1620', '1620-1789', '1789-1888', '476-1...   \\n\",\r\n       \"807  ['Afterlives of Pastoral : in memorian Paul Al...   \\n\",\r\n       \"808  ['Alte deutsche Schwänke', 'Celler Flurnamenb...   \\n\",\r\n       \"809  ['Between the Eagle and the Sun : traces of Ja...   \\n\",\r\n       \"810  ['Allegorie und Didaxe in Konrads ›Büchlein v...   \\n\",\r\n       \"\\n\",\r\n       \"                              record_enumerated_titles  record_count  \\\\\\n\",\r\n       \"0    ['All men are brothers', 'All men are brothers...            10   \\n\",\r\n       \"1    ['Adagio, clarinet, strings, D♭ major', 'Adieu...            10   \\n\",\r\n       \"2    ['Adventure of Black Peter', 'Adventure of Bla...            10   \\n\",\r\n       \"3    ['10 letters of Sun Yat-Sen, 1914-1916', '30 J...            10   \\n\",\r\n       \"4    ['Alle guten Wünsche zum neuen Jahre sendet I...            10   \\n\",\r\n       \"..                                                 ...           ...   \\n\",\r\n       \"806  ['1375-1620', '1620-1789', '1789-1888', '476-1...             6   \\n\",\r\n       \"807  ['Afterlives of Pastoral : in memorian Paul Al...             6   \\n\",\r\n       \"808  ['Alte deutsche Schwänke', 'Celler Flurnamenb...             6   \\n\",\r\n       \"809  ['Between the Eagle and the Sun : traces of Ja...             3   \\n\",\r\n       \"810  ['Allegorie und Didaxe in Konrads ›Büchlein v...             1   \\n\",\r\n       \"\\n\",\r\n       \"    selected_birthyear  standard_birthdate  ...  \\\\\\n\",\r\n       \"0                  NaN                1869  ...   \\n\",\r\n       \"1                  NaN                1813  ...   \\n\",\r\n       \"2                  NaN                1859  ...   \\n\",\r\n       \"3                  NaN                1866  ...   \\n\",\r\n       \"4                  NaN                1864  ...   \\n\",\r\n       \"..                 ...                 ...  ...   \\n\",\r\n       \"806             1932.0                1941  ...   \\n\",\r\n       \"807             1932.0                1932  ...   \\n\",\r\n       \"808             1932.0                1887  ...   \\n\",\r\n       \"809             1925.0                1925  ...   \\n\",\r\n       \"810             1965.0                1965  ...   \\n\",\r\n       \"\\n\",\r\n       \"                                          common_words  notes  \\\\\\n\",\r\n       \"0                                                   []    NaN   \\n\",\r\n       \"1                                                   []    NaN   \\n\",\r\n       \"2                                                   []    NaN   \\n\",\r\n       \"3                                                   []    NaN   \\n\",\r\n       \"4                                                   []    NaN   \\n\",\r\n       \"..                                                 ...    ...   \\n\",\r\n       \"806                                         ['modern']    NaN   \\n\",\r\n       \"807  ['queene', 'poetry', 'pastoral', 'faerie', 'pa...    NaN   \\n\",\r\n       \"808                                                 []    NaN   \\n\",\r\n       \"809  ['literature', 'american', 'criticism', 'postm...    NaN   \\n\",\r\n       \"810  ['heinrich', 'german', 'und', 'high', 'middle'...    NaN   \\n\",\r\n       \"\\n\",\r\n       \"     normalized_author                                       S2_Titlelist  \\\\\\n\",\r\n       \"0                                                                     NaN   \\n\",\r\n       \"1                                                                     NaN   \\n\",\r\n       \"2                                                                     NaN   \\n\",\r\n       \"3                                                                     NaN   \\n\",\r\n       \"4                                                                     NaN   \\n\",\r\n       \"..                 ...                                                ...   \\n\",\r\n       \"806        paul alpers  convening and convention in pastoral poetry, t...   \\n\",\r\n       \"807        paul alpers  convening and convention in pastoral poetry, t...   \\n\",\r\n       \"808        paul alpers  convening and convention in pastoral poetry, t...   \\n\",\r\n       \"809        ihab hassan  criticism in our clime parables of american ac...   \\n\",\r\n       \"810    annette volfing  imagination und deixis studien zur wahrnehmung...   \\n\",\r\n       \"\\n\",\r\n       \"                                           S2_pubdates  \\\\\\n\",\r\n       \"0                                                 None   \\n\",\r\n       \"1                                                 None   \\n\",\r\n       \"2                                                 None   \\n\",\r\n       \"3                                                 None   \\n\",\r\n       \"4                                                 None   \\n\",\r\n       \"..                                                 ...   \\n\",\r\n       \"806     1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989   \\n\",\r\n       \"807     1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989   \\n\",\r\n       \"808     1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989   \\n\",\r\n       \"809           1994, 1971, 1976, 1987, 1986, 1988, 1993   \\n\",\r\n       \"810  2008, 2014, 2008, 2006, 2015, 2013, 2004, 2003...   \\n\",\r\n       \"\\n\",\r\n       \"                                        VIAF_titlelist  \\\\\\n\",\r\n       \"0    ['All men are brothers', 'All men are brothers...   \\n\",\r\n       \"1    ['Adagio, clarinet, strings, D♭ major', 'Adieu...   \\n\",\r\n       \"2    ['Adventure of Black Peter', 'Adventure of Bla...   \\n\",\r\n       \"3    ['10 letters of Sun Yat-Sen, 1914-1916', '30 J...   \\n\",\r\n       \"4    ['Alle guten Wünsche zum neuen Jahre sendet I...   \\n\",\r\n       \"..                                                 ...   \\n\",\r\n       \"806  ['1375-1620', '1620-1789', '1789-1888', '476-1...   \\n\",\r\n       \"807  ['Afterlives of Pastoral : in memorian Paul Al...   \\n\",\r\n       \"808  ['Alte deutsche Schwänke', 'Celler Flurnamenb...   \\n\",\r\n       \"809  ['Between the Eagle and the Sun : traces of Ja...   \\n\",\r\n       \"810  ['Allegorie und Didaxe in Konrads ›Büchlein v...   \\n\",\r\n       \"\\n\",\r\n       \"                                          S2_titlelist average_S2_pubdate  \\\\\\n\",\r\n       \"0                                                 ['']                NaN   \\n\",\r\n       \"1                                                 ['']                NaN   \\n\",\r\n       \"2                                                 ['']                NaN   \\n\",\r\n       \"3                                                 ['']                NaN   \\n\",\r\n       \"4                                                 ['']                NaN   \\n\",\r\n       \"..                                                 ...                ...   \\n\",\r\n       \"806  ['convening and convention in pastoral poetry'...        1984.375000   \\n\",\r\n       \"807  ['convening and convention in pastoral poetry'...        1984.375000   \\n\",\r\n       \"808  ['convening and convention in pastoral poetry'...        1984.375000   \\n\",\r\n       \"809  ['criticism in our clime: parables of american...        1985.000000   \\n\",\r\n       \"810  ['imagination und deixis: studien zur wahrnehm...        2007.923077   \\n\",\r\n       \"\\n\",\r\n       \"    VIAF_birthdate        S2_Author  \\n\",\r\n       \"0             1869              NaN  \\n\",\r\n       \"1             1813              NaN  \\n\",\r\n       \"2             1859              NaN  \\n\",\r\n       \"3             1866              NaN  \\n\",\r\n       \"4             1864              NaN  \\n\",\r\n       \"..             ...              ...  \\n\",\r\n       \"806           1941      Paul Alpers  \\n\",\r\n       \"807           1932      Paul Alpers  \\n\",\r\n       \"808           1887      Paul Alpers  \\n\",\r\n       \"809           1925      Ihab Hassan  \\n\",\r\n       \"810           1965  Annette Volfing  \\n\",\r\n       \"\\n\",\r\n       \"[811 rows x 29 columns]\"\r\n      ]\r\n     },\r\n     \"execution_count\": 500,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"df\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"id\": \"910fb8db-5e16-4ebd-8828-949f3fe67332\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"create our pubage variable\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 533,\r\n   \"id\": \"d76f3b6b-3252-404d-b8b8-cd9055c5b5b8\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"#create our defined function variables\\n\",\r\n    \"import pandas as pd\\n\",\r\n    \"from ast import literal_eval\\n\",\r\n    \"\\n\",\r\n    \"def find_max_pubdate(pubdates):\\n\",\r\n    \"    if isinstance(pubdates, list) and all(isinstance(pubdate, int) for pubdate in pubdates):\\n\",\r\n    \"        return max(pubdates)\\n\",\r\n    \"    return None\\n\",\r\n    \"\\n\",\r\n    \"def find_min_pubdate(pubdates):\\n\",\r\n    \"    if isinstance(pubdates, list) and all(isinstance(pubdate, int) for pubdate in pubdates):\\n\",\r\n    \"        return min(pubdates)\\n\",\r\n    \"    return None\\n\",\r\n    \"    \\n\",\r\n    \"# def find_avg_pubdate(pubdates):\\n\",\r\n    \"#     if isinstance(pubdates, list) and all(isinstance(pubdate, int) for pubdate in pubdates):\\n\",\r\n    \"#         return (sum(pubdates)/len(pubdates))\\n\",\r\n    \"#     return None\\n\",\r\n    \"\\n\",\r\n    \"def birth2maxdate(birth, pubdates):\\n\",\r\n    \"        # Convert the string representation to an actual tuple\\n\",\r\n    \"        pubdates_tuple = ast.literal_eval(pubdates)\\n\",\r\n    \"        \\n\",\r\n    \"        # Check if it's a tuple of integers\\n\",\r\n    \"        if isinstance(pubdates_tuple, tuple) and all(isinstance(date, int) for date in pubdates_tuple):\\n\",\r\n    \"            max_pubdate = find_max_pubdate(pubdates)\\n\",\r\n    \"            if max_pubdate is not None:\\n\",\r\n    \"                birth2maxdate = max_pubdate - birth\\n\",\r\n    \"                abs_birth2maxdate = abs(birth2maxdate)\\n\",\r\n    \"                return birth2maxdate, abs_birth2maxdate\\n\",\r\n    \"        return None, None\\n\",\r\n    \"\\n\",\r\n    \"def birth2mindate(birth, pubdates):\\n\",\r\n    \"    min_pubdate = find_min_pubdate(pubdates)\\n\",\r\n    \"    if min_pubdate is not None:\\n\",\r\n    \"        birth2mindate = min_pubdate - birth\\n\",\r\n    \"        abs_birth2mindate = abs(birth2mindate)\\n\",\r\n    \"        return birth2mindate, abs_birth2mindate\\n\",\r\n    \"    else:\\n\",\r\n    \"        return None, None\\n\",\r\n    \"\\n\",\r\n    \"def any_negative(birth2maxdate, birth2mindate):\\n\",\r\n    \"    if birth2maxdate is not None and birth2mindate is not None:\\n\",\r\n    \"        if birth2maxdate < 0 or birth2mindate < 0:\\n\",\r\n    \"            return 1\\n\",\r\n    \"    return 0\\n\",\r\n    \"\\n\",\r\n    \"def title_list_len(title_list):\\n\",\r\n    \"    return len(title_list) if isinstance(title_list, list) else 0\\n\",\r\n    \"\\n\",\r\n    \"def author_length(author):\\n\",\r\n    \"    return len(author)\\n\",\r\n    \"\\n\",\r\n    \"# Master function to process each row\\n\",\r\n    \"def process_row(row):\\n\",\r\n    \"    birth = row['VIAF_birthdate']\\n\",\r\n    \"    pubdates_str = row['S2_pubdates']\\n\",\r\n    \"    author = str(row['author'])\\n\",\r\n    \"    \\n\",\r\n    \"    if isinstance(pubdates_str, str) and pubdates_str.strip():\\n\",\r\n    \"        try:\\n\",\r\n    \"            pubdates = literal_eval(pubdates_str)\\n\",\r\n    \"        except (SyntaxError, ValueError):\\n\",\r\n    \"            pubdates = None\\n\",\r\n    \"    else:\\n\",\r\n    \"        pubdates = None\\n\",\r\n    \"    \\n\",\r\n    \"    if pubdates is None or not isinstance(pubdates, list):\\n\",\r\n    \"        return {\\n\",\r\n    \"            'birth2maxdate': None,\\n\",\r\n    \"            'abs_birth2maxdate': None,\\n\",\r\n    \"            'birth2mindate': None,\\n\",\r\n    \"            'abs_birth2mindate': None,\\n\",\r\n    \"            'negative_status': None,\\n\",\r\n    \"            'title_length': title_list_len(row['S2_Titlelist']),\\n\",\r\n    \"            'author_length': author_length(author),\\n\",\r\n    \"            'S2_pubdates': pubdates,\\n\",\r\n    \"            'birthyear':birth,\\n\",\r\n    \"            'S2 titlelist':row['S2_Titlelist'],\\n\",\r\n    \"            'VIAF_titlelist':row['VIAF_titlelist'],\\n\",\r\n    \"            'selected_birthyear':row['selected_birthyear'],\\n\",\r\n    \"            'author':row['author']\\n\",\r\n    \"\\n\",\r\n    \"        }\\n\",\r\n    \"\\n\",\r\n    \"    birth2maxdate_value, absbirth2maxdate_value = birth2maxdate(birth, pubdates)\\n\",\r\n    \"    birth2mindate_value, absbirth2mindate_value = birth2mindate(birth, pubdates)\\n\",\r\n    \"    neg_status = any_negative(birth2maxdate_value, birth2mindate_value)\\n\",\r\n    \"    title_length = title_list_len(row['S2_Titlelist'])\\n\",\r\n    \"    author_len = author_length(row['author'])\\n\",\r\n    \"    avg_pubdate = find_avg_pubdate(pubdates)\\n\",\r\n    \"\\n\",\r\n    \"    return {\\n\",\r\n    \"        'birth2maxdate': birth2maxdate_value,\\n\",\r\n    \"        'abs_birth2maxdate': absbirth2maxdate_value,\\n\",\r\n    \"        'birth2mindate': birth2mindate_value,\\n\",\r\n    \"        'abs_birth2mindate': absbirth2mindate_value,\\n\",\r\n    \"        'negative_status': neg_status,\\n\",\r\n    \"        'title_length': title_length,\\n\",\r\n    \"        'author_length': author_len,\\n\",\r\n    \"        'S2_pubdates': pubdates,\\n\",\r\n    \"        'birthyear':birth,\\n\",\r\n    \"        'S2 titlelist':row['S2_Titlelist'],\\n\",\r\n    \"        'VIAF_titlelist':row['VIAF_titlelist'],\\n\",\r\n    \"        'selected_birthyear':row['selected_birthyear'],\\n\",\r\n    \"        'author':row['author']\\n\",\r\n    \"        \\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"    }\\n\",\r\n    \"\\n\",\r\n    \"# Assuming df is your DataFrame\\n\",\r\n    \"df = result_df.apply(process_row, axis=1, result_type='expand')\\n\",\r\n    \"\\n\",\r\n    \"# Print or use result_df as needed\\n\",\r\n    \"# print(result_df)\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 534,\r\n   \"id\": \"1983be3b-e5c0-4210-b4c8-7c5e1ac59d5a\",\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/html\": [\r\n       \"<div>\\n\",\r\n       \"<style scoped>\\n\",\r\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\r\n       \"        vertical-align: middle;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe tbody tr th {\\n\",\r\n       \"        vertical-align: top;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe thead th {\\n\",\r\n       \"        text-align: right;\\n\",\r\n       \"    }\\n\",\r\n       \"</style>\\n\",\r\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\r\n       \"  <thead>\\n\",\r\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\r\n       \"      <th></th>\\n\",\r\n       \"      <th>birth2maxdate</th>\\n\",\r\n       \"      <th>abs_birth2maxdate</th>\\n\",\r\n       \"      <th>birth2mindate</th>\\n\",\r\n       \"      <th>abs_birth2mindate</th>\\n\",\r\n       \"      <th>negative_status</th>\\n\",\r\n       \"      <th>title_length</th>\\n\",\r\n       \"      <th>author_length</th>\\n\",\r\n       \"      <th>S2_pubdates</th>\\n\",\r\n       \"      <th>birthyear</th>\\n\",\r\n       \"      <th>S2 titlelist</th>\\n\",\r\n       \"      <th>VIAF_titlelist</th>\\n\",\r\n       \"      <th>selected_birthyear</th>\\n\",\r\n       \"      <th>author</th>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </thead>\\n\",\r\n       \"  <tbody>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>0</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>1869</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>['All men are brothers', 'All men are brothers...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>1</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>1813</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>['Adagio, clarinet, strings, D♭ major', 'Adieu...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>2</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>1859</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>['Adventure of Black Peter', 'Adventure of Bla...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>3</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>1866</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>['10 letters of Sun Yat-Sen, 1914-1916', '30 J...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>4</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>1864</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>['Alle guten Wünsche zum neuen Jahre sendet I...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>...</th>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>806</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>(1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989)</td>\\n\",\r\n       \"      <td>1941</td>\\n\",\r\n       \"      <td>convening and convention in pastoral poetry, t...</td>\\n\",\r\n       \"      <td>['1375-1620', '1620-1789', '1789-1888', '476-1...</td>\\n\",\r\n       \"      <td>1932.0</td>\\n\",\r\n       \"      <td>Paul Alpers</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>807</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>(1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989)</td>\\n\",\r\n       \"      <td>1932</td>\\n\",\r\n       \"      <td>convening and convention in pastoral poetry, t...</td>\\n\",\r\n       \"      <td>['Afterlives of Pastoral : in memorian Paul Al...</td>\\n\",\r\n       \"      <td>1932.0</td>\\n\",\r\n       \"      <td>Paul Alpers</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>808</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>(1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989)</td>\\n\",\r\n       \"      <td>1887</td>\\n\",\r\n       \"      <td>convening and convention in pastoral poetry, t...</td>\\n\",\r\n       \"      <td>['Alte deutsche Schwänke', 'Celler Flurnamenb...</td>\\n\",\r\n       \"      <td>1932.0</td>\\n\",\r\n       \"      <td>Paul Alpers</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>809</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>(1994, 1971, 1976, 1987, 1986, 1988, 1993)</td>\\n\",\r\n       \"      <td>1925</td>\\n\",\r\n       \"      <td>criticism in our clime parables of american ac...</td>\\n\",\r\n       \"      <td>['Between the Eagle and the Sun : traces of Ja...</td>\\n\",\r\n       \"      <td>1925.0</td>\\n\",\r\n       \"      <td>Ihab Hassan</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>810</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>(2008, 2014, 2008, 2006, 2015, 2013, 2004, 200...</td>\\n\",\r\n       \"      <td>1965</td>\\n\",\r\n       \"      <td>imagination und deixis studien zur wahrnehmung...</td>\\n\",\r\n       \"      <td>['Allegorie und Didaxe in Konrads ›Büchlein v...</td>\\n\",\r\n       \"      <td>1965.0</td>\\n\",\r\n       \"      <td>Annette Volfing</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </tbody>\\n\",\r\n       \"</table>\\n\",\r\n       \"<p>811 rows × 13 columns</p>\\n\",\r\n       \"</div>\"\r\n      ],\r\n      \"text/plain\": [\r\n       \"    birth2maxdate abs_birth2maxdate birth2mindate abs_birth2mindate  \\\\\\n\",\r\n       \"0            None              None          None              None   \\n\",\r\n       \"1            None              None          None              None   \\n\",\r\n       \"2            None              None          None              None   \\n\",\r\n       \"3            None              None          None              None   \\n\",\r\n       \"4            None              None          None              None   \\n\",\r\n       \"..            ...               ...           ...               ...   \\n\",\r\n       \"806          None              None          None              None   \\n\",\r\n       \"807          None              None          None              None   \\n\",\r\n       \"808          None              None          None              None   \\n\",\r\n       \"809          None              None          None              None   \\n\",\r\n       \"810          None              None          None              None   \\n\",\r\n       \"\\n\",\r\n       \"    negative_status  title_length  author_length  \\\\\\n\",\r\n       \"0              None             0              3   \\n\",\r\n       \"1              None             0              3   \\n\",\r\n       \"2              None             0              3   \\n\",\r\n       \"3              None             0              3   \\n\",\r\n       \"4              None             0              3   \\n\",\r\n       \"..              ...           ...            ...   \\n\",\r\n       \"806            None             0             11   \\n\",\r\n       \"807            None             0             11   \\n\",\r\n       \"808            None             0             11   \\n\",\r\n       \"809            None             0             11   \\n\",\r\n       \"810            None             0             15   \\n\",\r\n       \"\\n\",\r\n       \"                                           S2_pubdates  birthyear  \\\\\\n\",\r\n       \"0                                                 None       1869   \\n\",\r\n       \"1                                                 None       1813   \\n\",\r\n       \"2                                                 None       1859   \\n\",\r\n       \"3                                                 None       1866   \\n\",\r\n       \"4                                                 None       1864   \\n\",\r\n       \"..                                                 ...        ...   \\n\",\r\n       \"806   (1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989)       1941   \\n\",\r\n       \"807   (1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989)       1932   \\n\",\r\n       \"808   (1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989)       1887   \\n\",\r\n       \"809         (1994, 1971, 1976, 1987, 1986, 1988, 1993)       1925   \\n\",\r\n       \"810  (2008, 2014, 2008, 2006, 2015, 2013, 2004, 200...       1965   \\n\",\r\n       \"\\n\",\r\n       \"                                          S2 titlelist  \\\\\\n\",\r\n       \"0                                                  NaN   \\n\",\r\n       \"1                                                  NaN   \\n\",\r\n       \"2                                                  NaN   \\n\",\r\n       \"3                                                  NaN   \\n\",\r\n       \"4                                                  NaN   \\n\",\r\n       \"..                                                 ...   \\n\",\r\n       \"806  convening and convention in pastoral poetry, t...   \\n\",\r\n       \"807  convening and convention in pastoral poetry, t...   \\n\",\r\n       \"808  convening and convention in pastoral poetry, t...   \\n\",\r\n       \"809  criticism in our clime parables of american ac...   \\n\",\r\n       \"810  imagination und deixis studien zur wahrnehmung...   \\n\",\r\n       \"\\n\",\r\n       \"                                        VIAF_titlelist selected_birthyear  \\\\\\n\",\r\n       \"0    ['All men are brothers', 'All men are brothers...                NaN   \\n\",\r\n       \"1    ['Adagio, clarinet, strings, D♭ major', 'Adieu...                NaN   \\n\",\r\n       \"2    ['Adventure of Black Peter', 'Adventure of Bla...                NaN   \\n\",\r\n       \"3    ['10 letters of Sun Yat-Sen, 1914-1916', '30 J...                NaN   \\n\",\r\n       \"4    ['Alle guten Wünsche zum neuen Jahre sendet I...                NaN   \\n\",\r\n       \"..                                                 ...                ...   \\n\",\r\n       \"806  ['1375-1620', '1620-1789', '1789-1888', '476-1...             1932.0   \\n\",\r\n       \"807  ['Afterlives of Pastoral : in memorian Paul Al...             1932.0   \\n\",\r\n       \"808  ['Alte deutsche Schwänke', 'Celler Flurnamenb...             1932.0   \\n\",\r\n       \"809  ['Between the Eagle and the Sun : traces of Ja...             1925.0   \\n\",\r\n       \"810  ['Allegorie und Didaxe in Konrads ›Büchlein v...             1965.0   \\n\",\r\n       \"\\n\",\r\n       \"              author  \\n\",\r\n       \"0                NaN  \\n\",\r\n       \"1                NaN  \\n\",\r\n       \"2                NaN  \\n\",\r\n       \"3                NaN  \\n\",\r\n       \"4                NaN  \\n\",\r\n       \"..               ...  \\n\",\r\n       \"806      Paul Alpers  \\n\",\r\n       \"807      Paul Alpers  \\n\",\r\n       \"808      Paul Alpers  \\n\",\r\n       \"809      Ihab Hassan  \\n\",\r\n       \"810  Annette Volfing  \\n\",\r\n       \"\\n\",\r\n       \"[811 rows x 13 columns]\"\r\n      ]\r\n     },\r\n     \"execution_count\": 534,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"df\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 503,\r\n   \"id\": \"ef46229a-2548-458c-932f-bfca8a4daa25\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"import pandas as pd\\n\",\r\n    \"import ast\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"# Function to compute average publication date\\n\",\r\n    \"def compute_avg_pubdate(pubdates):\\n\",\r\n    \"    try:\\n\",\r\n    \"        # Convert the string representation to an actual tuple\\n\",\r\n    \"        pubdates_tuple = ast.literal_eval(pubdates)\\n\",\r\n    \"        \\n\",\r\n    \"        # Check if it's a tuple of integers\\n\",\r\n    \"        if isinstance(pubdates_tuple, tuple) and all(isinstance(date, int) for date in pubdates_tuple):\\n\",\r\n    \"            return sum(pubdates_tuple) / len(pubdates_tuple)\\n\",\r\n    \"        else:\\n\",\r\n    \"            return None\\n\",\r\n    \"    except (ValueError, SyntaxError):\\n\",\r\n    \"        return None\\n\",\r\n    \"\\n\",\r\n    \"# Apply the function to each row\\n\",\r\n    \"df['avg_pubdate'] = df['S2_pubdates'].apply(lambda x: compute_avg_pubdate(str(x)))\\n\",\r\n    \"\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 504,\r\n   \"id\": \"fd090a8e-fbb2-4718-973c-63abe3ff8230\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"#publication_age\\n\",\r\n    \"df['publication_age'] = df['avg_pubdate'] - df['birthyear']\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 535,\r\n   \"id\": \"31c3a502-404e-41c1-843c-c151cb2f2188\",\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/html\": [\r\n       \"<div>\\n\",\r\n       \"<style scoped>\\n\",\r\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\r\n       \"        vertical-align: middle;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe tbody tr th {\\n\",\r\n       \"        vertical-align: top;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe thead th {\\n\",\r\n       \"        text-align: right;\\n\",\r\n       \"    }\\n\",\r\n       \"</style>\\n\",\r\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\r\n       \"  <thead>\\n\",\r\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\r\n       \"      <th></th>\\n\",\r\n       \"      <th>birth2maxdate</th>\\n\",\r\n       \"      <th>abs_birth2maxdate</th>\\n\",\r\n       \"      <th>birth2mindate</th>\\n\",\r\n       \"      <th>abs_birth2mindate</th>\\n\",\r\n       \"      <th>negative_status</th>\\n\",\r\n       \"      <th>title_length</th>\\n\",\r\n       \"      <th>author_length</th>\\n\",\r\n       \"      <th>S2_pubdates</th>\\n\",\r\n       \"      <th>birthyear</th>\\n\",\r\n       \"      <th>S2 titlelist</th>\\n\",\r\n       \"      <th>VIAF_titlelist</th>\\n\",\r\n       \"      <th>selected_birthyear</th>\\n\",\r\n       \"      <th>author</th>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </thead>\\n\",\r\n       \"  <tbody>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>0</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>1869</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>['All men are brothers', 'All men are brothers...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>1</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>1813</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>['Adagio, clarinet, strings, D♭ major', 'Adieu...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>2</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>1859</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>['Adventure of Black Peter', 'Adventure of Bla...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>3</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>1866</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>['10 letters of Sun Yat-Sen, 1914-1916', '30 J...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>4</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>1864</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>['Alle guten Wünsche zum neuen Jahre sendet I...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>...</th>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>806</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>(1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989)</td>\\n\",\r\n       \"      <td>1941</td>\\n\",\r\n       \"      <td>convening and convention in pastoral poetry, t...</td>\\n\",\r\n       \"      <td>['1375-1620', '1620-1789', '1789-1888', '476-1...</td>\\n\",\r\n       \"      <td>1932.0</td>\\n\",\r\n       \"      <td>Paul Alpers</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>807</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>(1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989)</td>\\n\",\r\n       \"      <td>1932</td>\\n\",\r\n       \"      <td>convening and convention in pastoral poetry, t...</td>\\n\",\r\n       \"      <td>['Afterlives of Pastoral : in memorian Paul Al...</td>\\n\",\r\n       \"      <td>1932.0</td>\\n\",\r\n       \"      <td>Paul Alpers</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>808</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>(1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989)</td>\\n\",\r\n       \"      <td>1887</td>\\n\",\r\n       \"      <td>convening and convention in pastoral poetry, t...</td>\\n\",\r\n       \"      <td>['Alte deutsche Schwänke', 'Celler Flurnamenb...</td>\\n\",\r\n       \"      <td>1932.0</td>\\n\",\r\n       \"      <td>Paul Alpers</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>809</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>(1994, 1971, 1976, 1987, 1986, 1988, 1993)</td>\\n\",\r\n       \"      <td>1925</td>\\n\",\r\n       \"      <td>criticism in our clime parables of american ac...</td>\\n\",\r\n       \"      <td>['Between the Eagle and the Sun : traces of Ja...</td>\\n\",\r\n       \"      <td>1925.0</td>\\n\",\r\n       \"      <td>Ihab Hassan</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>810</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>(2008, 2014, 2008, 2006, 2015, 2013, 2004, 200...</td>\\n\",\r\n       \"      <td>1965</td>\\n\",\r\n       \"      <td>imagination und deixis studien zur wahrnehmung...</td>\\n\",\r\n       \"      <td>['Allegorie und Didaxe in Konrads ›Büchlein v...</td>\\n\",\r\n       \"      <td>1965.0</td>\\n\",\r\n       \"      <td>Annette Volfing</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </tbody>\\n\",\r\n       \"</table>\\n\",\r\n       \"<p>811 rows × 13 columns</p>\\n\",\r\n       \"</div>\"\r\n      ],\r\n      \"text/plain\": [\r\n       \"    birth2maxdate abs_birth2maxdate birth2mindate abs_birth2mindate  \\\\\\n\",\r\n       \"0            None              None          None              None   \\n\",\r\n       \"1            None              None          None              None   \\n\",\r\n       \"2            None              None          None              None   \\n\",\r\n       \"3            None              None          None              None   \\n\",\r\n       \"4            None              None          None              None   \\n\",\r\n       \"..            ...               ...           ...               ...   \\n\",\r\n       \"806          None              None          None              None   \\n\",\r\n       \"807          None              None          None              None   \\n\",\r\n       \"808          None              None          None              None   \\n\",\r\n       \"809          None              None          None              None   \\n\",\r\n       \"810          None              None          None              None   \\n\",\r\n       \"\\n\",\r\n       \"    negative_status  title_length  author_length  \\\\\\n\",\r\n       \"0              None             0              3   \\n\",\r\n       \"1              None             0              3   \\n\",\r\n       \"2              None             0              3   \\n\",\r\n       \"3              None             0              3   \\n\",\r\n       \"4              None             0              3   \\n\",\r\n       \"..              ...           ...            ...   \\n\",\r\n       \"806            None             0             11   \\n\",\r\n       \"807            None             0             11   \\n\",\r\n       \"808            None             0             11   \\n\",\r\n       \"809            None             0             11   \\n\",\r\n       \"810            None             0             15   \\n\",\r\n       \"\\n\",\r\n       \"                                           S2_pubdates  birthyear  \\\\\\n\",\r\n       \"0                                                 None       1869   \\n\",\r\n       \"1                                                 None       1813   \\n\",\r\n       \"2                                                 None       1859   \\n\",\r\n       \"3                                                 None       1866   \\n\",\r\n       \"4                                                 None       1864   \\n\",\r\n       \"..                                                 ...        ...   \\n\",\r\n       \"806   (1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989)       1941   \\n\",\r\n       \"807   (1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989)       1932   \\n\",\r\n       \"808   (1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989)       1887   \\n\",\r\n       \"809         (1994, 1971, 1976, 1987, 1986, 1988, 1993)       1925   \\n\",\r\n       \"810  (2008, 2014, 2008, 2006, 2015, 2013, 2004, 200...       1965   \\n\",\r\n       \"\\n\",\r\n       \"                                          S2 titlelist  \\\\\\n\",\r\n       \"0                                                  NaN   \\n\",\r\n       \"1                                                  NaN   \\n\",\r\n       \"2                                                  NaN   \\n\",\r\n       \"3                                                  NaN   \\n\",\r\n       \"4                                                  NaN   \\n\",\r\n       \"..                                                 ...   \\n\",\r\n       \"806  convening and convention in pastoral poetry, t...   \\n\",\r\n       \"807  convening and convention in pastoral poetry, t...   \\n\",\r\n       \"808  convening and convention in pastoral poetry, t...   \\n\",\r\n       \"809  criticism in our clime parables of american ac...   \\n\",\r\n       \"810  imagination und deixis studien zur wahrnehmung...   \\n\",\r\n       \"\\n\",\r\n       \"                                        VIAF_titlelist selected_birthyear  \\\\\\n\",\r\n       \"0    ['All men are brothers', 'All men are brothers...                NaN   \\n\",\r\n       \"1    ['Adagio, clarinet, strings, D♭ major', 'Adieu...                NaN   \\n\",\r\n       \"2    ['Adventure of Black Peter', 'Adventure of Bla...                NaN   \\n\",\r\n       \"3    ['10 letters of Sun Yat-Sen, 1914-1916', '30 J...                NaN   \\n\",\r\n       \"4    ['Alle guten Wünsche zum neuen Jahre sendet I...                NaN   \\n\",\r\n       \"..                                                 ...                ...   \\n\",\r\n       \"806  ['1375-1620', '1620-1789', '1789-1888', '476-1...             1932.0   \\n\",\r\n       \"807  ['Afterlives of Pastoral : in memorian Paul Al...             1932.0   \\n\",\r\n       \"808  ['Alte deutsche Schwänke', 'Celler Flurnamenb...             1932.0   \\n\",\r\n       \"809  ['Between the Eagle and the Sun : traces of Ja...             1925.0   \\n\",\r\n       \"810  ['Allegorie und Didaxe in Konrads ›Büchlein v...             1965.0   \\n\",\r\n       \"\\n\",\r\n       \"              author  \\n\",\r\n       \"0                NaN  \\n\",\r\n       \"1                NaN  \\n\",\r\n       \"2                NaN  \\n\",\r\n       \"3                NaN  \\n\",\r\n       \"4                NaN  \\n\",\r\n       \"..               ...  \\n\",\r\n       \"806      Paul Alpers  \\n\",\r\n       \"807      Paul Alpers  \\n\",\r\n       \"808      Paul Alpers  \\n\",\r\n       \"809      Ihab Hassan  \\n\",\r\n       \"810  Annette Volfing  \\n\",\r\n       \"\\n\",\r\n       \"[811 rows x 13 columns]\"\r\n      ]\r\n     },\r\n     \"execution_count\": 535,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"df\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 506,\r\n   \"id\": \"acece9c0-1607-4008-b87a-e1bc13a99c17\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"df['publication_age'] = pd.to_numeric(df['publication_age'], errors='coerce')\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"id\": \"d23ba414-1396-42bd-91dc-319f7ce40d5a\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"Add status variable, and then convert it from string to numbers\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 507,\r\n   \"id\": \"36a936e1-1ae6-42fa-9518-477f14d5d967\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"df['status'] = \\\"\\\"\\n\",\r\n    \"\\n\",\r\n    \"for idx, row in df.iterrows():\\n\",\r\n    \"    if row['publication_age'] < 0:\\n\",\r\n    \"        df.at[idx,'status'] = 'not_born'\\n\",\r\n    \"    elif row['publication_age'] > 100:\\n\",\r\n    \"        df.at[idx,'status'] = 'zombie'\\n\",\r\n    \"    elif row['publication_age'] < 9:\\n\",\r\n    \"        df.at[idx,'status'] = 'toddler'\\n\",\r\n    \"    else:\\n\",\r\n    \"        df.at[idx,'status'] = '0'\\n\",\r\n    \"\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 508,\r\n   \"id\": \"d3d39998-8559-4aaa-8f1f-a5fb6f43c347\",\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/html\": [\r\n       \"<div>\\n\",\r\n       \"<style scoped>\\n\",\r\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\r\n       \"        vertical-align: middle;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe tbody tr th {\\n\",\r\n       \"        vertical-align: top;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe thead th {\\n\",\r\n       \"        text-align: right;\\n\",\r\n       \"    }\\n\",\r\n       \"</style>\\n\",\r\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\r\n       \"  <thead>\\n\",\r\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\r\n       \"      <th></th>\\n\",\r\n       \"      <th>birth2maxdate</th>\\n\",\r\n       \"      <th>abs_birth2maxdate</th>\\n\",\r\n       \"      <th>birth2mindate</th>\\n\",\r\n       \"      <th>abs_birth2mindate</th>\\n\",\r\n       \"      <th>negative_status</th>\\n\",\r\n       \"      <th>title_length</th>\\n\",\r\n       \"      <th>author_length</th>\\n\",\r\n       \"      <th>S2_pubdates</th>\\n\",\r\n       \"      <th>birthyear</th>\\n\",\r\n       \"      <th>S2 titlelist</th>\\n\",\r\n       \"      <th>VIAF_titlelist</th>\\n\",\r\n       \"      <th>selected_birthyear</th>\\n\",\r\n       \"      <th>author</th>\\n\",\r\n       \"      <th>avg_pubdate</th>\\n\",\r\n       \"      <th>publication_age</th>\\n\",\r\n       \"      <th>status</th>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </thead>\\n\",\r\n       \"  <tbody>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>27</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>(1995, 1999, 2008, 1994, 1993, 1991)</td>\\n\",\r\n       \"      <td>1835</td>\\n\",\r\n       \"      <td>social comedy in austria and germany 18901933,...</td>\\n\",\r\n       \"      <td>['Ballads and metrical sketches, 1860:', 'The ...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>John Warren</td>\\n\",\r\n       \"      <td>1996.666667</td>\\n\",\r\n       \"      <td>161.666667</td>\\n\",\r\n       \"      <td>zombie</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>42</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>(1960, 1953, 1982, 1988, 1968, 1952, 1986, 198...</td>\\n\",\r\n       \"      <td>1861</td>\\n\",\r\n       \"      <td>torcimany de luis de averco tratado retorico g...</td>\\n\",\r\n       \"      <td>['The genitalia of the group Noctuidæ ... 1909...</td>\\n\",\r\n       \"      <td>1915.0</td>\\n\",\r\n       \"      <td>Frank Pierce</td>\\n\",\r\n       \"      <td>1972.416667</td>\\n\",\r\n       \"      <td>111.416667</td>\\n\",\r\n       \"      <td>zombie</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>43</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>(1960, 1953, 1982, 1988, 1968, 1952, 1986, 198...</td>\\n\",\r\n       \"      <td>1855</td>\\n\",\r\n       \"      <td>torcimany de luis de averco tratado retorico g...</td>\\n\",\r\n       \"      <td>['Address of the president:', 'American plays ...</td>\\n\",\r\n       \"      <td>1915.0</td>\\n\",\r\n       \"      <td>Frank Pierce</td>\\n\",\r\n       \"      <td>1972.416667</td>\\n\",\r\n       \"      <td>117.416667</td>\\n\",\r\n       \"      <td>zombie</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>45</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>(1960, 1953, 1982, 1988, 1968, 1952, 1986, 198...</td>\\n\",\r\n       \"      <td>1841</td>\\n\",\r\n       \"      <td>torcimany de luis de averco tratado retorico g...</td>\\n\",\r\n       \"      <td>[\\\"Appletons' medical dictionary; an illustrate...</td>\\n\",\r\n       \"      <td>1915.0</td>\\n\",\r\n       \"      <td>Frank Pierce</td>\\n\",\r\n       \"      <td>1972.416667</td>\\n\",\r\n       \"      <td>131.416667</td>\\n\",\r\n       \"      <td>zombie</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>47</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>(1960, 1953, 1982, 1988, 1968, 1952, 1986, 198...</td>\\n\",\r\n       \"      <td>1868</td>\\n\",\r\n       \"      <td>torcimany de luis de averco tratado retorico g...</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>1915.0</td>\\n\",\r\n       \"      <td>Frank Pierce</td>\\n\",\r\n       \"      <td>1972.416667</td>\\n\",\r\n       \"      <td>104.416667</td>\\n\",\r\n       \"      <td>zombie</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>...</th>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>754</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>18</td>\\n\",\r\n       \"      <td>(1950, 1941, 1961, 1949, 1945, 1943, 1947, 194...</td>\\n\",\r\n       \"      <td>1815</td>\\n\",\r\n       \"      <td>the four brontes the lives and works of charlo...</td>\\n\",\r\n       \"      <td>['Aaron Trow', 'The American senator', 'Austra...</td>\\n\",\r\n       \"      <td>1906.0</td>\\n\",\r\n       \"      <td>Kathleen Tillotson</td>\\n\",\r\n       \"      <td>1946.948276</td>\\n\",\r\n       \"      <td>131.948276</td>\\n\",\r\n       \"      <td>zombie</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>758</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>(2000, 2004, 2006, 2011, 2015, 2009, 2011, 200...</td>\\n\",\r\n       \"      <td>1871</td>\\n\",\r\n       \"      <td>dramaturgies of sprachkritik rainer werner fas...</td>\\n\",\r\n       \"      <td>['Alphabetical guide to Sinhalese folklore fro...</td>\\n\",\r\n       \"      <td>1968.0</td>\\n\",\r\n       \"      <td>David Barnett</td>\\n\",\r\n       \"      <td>2007.666667</td>\\n\",\r\n       \"      <td>136.666667</td>\\n\",\r\n       \"      <td>zombie</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>761</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>(2000, 2004, 2006, 2011, 2015, 2009, 2011, 200...</td>\\n\",\r\n       \"      <td>1907</td>\\n\",\r\n       \"      <td>dramaturgies of sprachkritik rainer werner fas...</td>\\n\",\r\n       \"      <td>['Air, flute, harp', 'Balladen Viola Klavier o...</td>\\n\",\r\n       \"      <td>1968.0</td>\\n\",\r\n       \"      <td>David Barnett</td>\\n\",\r\n       \"      <td>2007.666667</td>\\n\",\r\n       \"      <td>100.666667</td>\\n\",\r\n       \"      <td>zombie</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>769</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>(1910, 1926, 1920, 1907, 1915, 1907, 1916, 191...</td>\\n\",\r\n       \"      <td>1771</td>\\n\",\r\n       \"      <td>elckerlijceveryman the question of priority, s...</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>1859.0</td>\\n\",\r\n       \"      <td>Francis A. Wood</td>\\n\",\r\n       \"      <td>1913.705882</td>\\n\",\r\n       \"      <td>142.705882</td>\\n\",\r\n       \"      <td>zombie</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>791</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>(1966, 1937, 1935, 1942, 1962, 1957, 1941, 195...</td>\\n\",\r\n       \"      <td>1943</td>\\n\",\r\n       \"      <td>nan, nan, the quarto of king lear and brights ...</td>\\n\",\r\n       \"      <td>['Human resource management, 2002:']</td>\\n\",\r\n       \"      <td>1905.0</td>\\n\",\r\n       \"      <td>Madeleine Doran</td>\\n\",\r\n       \"      <td>1949.222222</td>\\n\",\r\n       \"      <td>6.222222</td>\\n\",\r\n       \"      <td>toddler</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </tbody>\\n\",\r\n       \"</table>\\n\",\r\n       \"<p>123 rows × 16 columns</p>\\n\",\r\n       \"</div>\"\r\n      ],\r\n      \"text/plain\": [\r\n       \"    birth2maxdate abs_birth2maxdate birth2mindate abs_birth2mindate  \\\\\\n\",\r\n       \"27           None              None          None              None   \\n\",\r\n       \"42           None              None          None              None   \\n\",\r\n       \"43           None              None          None              None   \\n\",\r\n       \"45           None              None          None              None   \\n\",\r\n       \"47           None              None          None              None   \\n\",\r\n       \"..            ...               ...           ...               ...   \\n\",\r\n       \"754          None              None          None              None   \\n\",\r\n       \"758          None              None          None              None   \\n\",\r\n       \"761          None              None          None              None   \\n\",\r\n       \"769          None              None          None              None   \\n\",\r\n       \"791          None              None          None              None   \\n\",\r\n       \"\\n\",\r\n       \"    negative_status  title_length  author_length  \\\\\\n\",\r\n       \"27             None             0             11   \\n\",\r\n       \"42             None             0             12   \\n\",\r\n       \"43             None             0             12   \\n\",\r\n       \"45             None             0             12   \\n\",\r\n       \"47             None             0             12   \\n\",\r\n       \"..              ...           ...            ...   \\n\",\r\n       \"754            None             0             18   \\n\",\r\n       \"758            None             0             13   \\n\",\r\n       \"761            None             0             13   \\n\",\r\n       \"769            None             0             15   \\n\",\r\n       \"791            None             0             15   \\n\",\r\n       \"\\n\",\r\n       \"                                           S2_pubdates  birthyear  \\\\\\n\",\r\n       \"27                (1995, 1999, 2008, 1994, 1993, 1991)       1835   \\n\",\r\n       \"42   (1960, 1953, 1982, 1988, 1968, 1952, 1986, 198...       1861   \\n\",\r\n       \"43   (1960, 1953, 1982, 1988, 1968, 1952, 1986, 198...       1855   \\n\",\r\n       \"45   (1960, 1953, 1982, 1988, 1968, 1952, 1986, 198...       1841   \\n\",\r\n       \"47   (1960, 1953, 1982, 1988, 1968, 1952, 1986, 198...       1868   \\n\",\r\n       \"..                                                 ...        ...   \\n\",\r\n       \"754  (1950, 1941, 1961, 1949, 1945, 1943, 1947, 194...       1815   \\n\",\r\n       \"758  (2000, 2004, 2006, 2011, 2015, 2009, 2011, 200...       1871   \\n\",\r\n       \"761  (2000, 2004, 2006, 2011, 2015, 2009, 2011, 200...       1907   \\n\",\r\n       \"769  (1910, 1926, 1920, 1907, 1915, 1907, 1916, 191...       1771   \\n\",\r\n       \"791  (1966, 1937, 1935, 1942, 1962, 1957, 1941, 195...       1943   \\n\",\r\n       \"\\n\",\r\n       \"                                          S2 titlelist  \\\\\\n\",\r\n       \"27   social comedy in austria and germany 18901933,...   \\n\",\r\n       \"42   torcimany de luis de averco tratado retorico g...   \\n\",\r\n       \"43   torcimany de luis de averco tratado retorico g...   \\n\",\r\n       \"45   torcimany de luis de averco tratado retorico g...   \\n\",\r\n       \"47   torcimany de luis de averco tratado retorico g...   \\n\",\r\n       \"..                                                 ...   \\n\",\r\n       \"754  the four brontes the lives and works of charlo...   \\n\",\r\n       \"758  dramaturgies of sprachkritik rainer werner fas...   \\n\",\r\n       \"761  dramaturgies of sprachkritik rainer werner fas...   \\n\",\r\n       \"769  elckerlijceveryman the question of priority, s...   \\n\",\r\n       \"791  nan, nan, the quarto of king lear and brights ...   \\n\",\r\n       \"\\n\",\r\n       \"                                        VIAF_titlelist selected_birthyear  \\\\\\n\",\r\n       \"27   ['Ballads and metrical sketches, 1860:', 'The ...                NaN   \\n\",\r\n       \"42   ['The genitalia of the group Noctuidæ ... 1909...             1915.0   \\n\",\r\n       \"43   ['Address of the president:', 'American plays ...             1915.0   \\n\",\r\n       \"45   [\\\"Appletons' medical dictionary; an illustrate...             1915.0   \\n\",\r\n       \"47                                                  []             1915.0   \\n\",\r\n       \"..                                                 ...                ...   \\n\",\r\n       \"754  ['Aaron Trow', 'The American senator', 'Austra...             1906.0   \\n\",\r\n       \"758  ['Alphabetical guide to Sinhalese folklore fro...             1968.0   \\n\",\r\n       \"761  ['Air, flute, harp', 'Balladen Viola Klavier o...             1968.0   \\n\",\r\n       \"769                                                 []             1859.0   \\n\",\r\n       \"791               ['Human resource management, 2002:']             1905.0   \\n\",\r\n       \"\\n\",\r\n       \"                 author  avg_pubdate  publication_age   status  \\n\",\r\n       \"27          John Warren  1996.666667       161.666667   zombie  \\n\",\r\n       \"42         Frank Pierce  1972.416667       111.416667   zombie  \\n\",\r\n       \"43         Frank Pierce  1972.416667       117.416667   zombie  \\n\",\r\n       \"45         Frank Pierce  1972.416667       131.416667   zombie  \\n\",\r\n       \"47         Frank Pierce  1972.416667       104.416667   zombie  \\n\",\r\n       \"..                  ...          ...              ...      ...  \\n\",\r\n       \"754  Kathleen Tillotson  1946.948276       131.948276   zombie  \\n\",\r\n       \"758       David Barnett  2007.666667       136.666667   zombie  \\n\",\r\n       \"761       David Barnett  2007.666667       100.666667   zombie  \\n\",\r\n       \"769     Francis A. Wood  1913.705882       142.705882   zombie  \\n\",\r\n       \"791     Madeleine Doran  1949.222222         6.222222  toddler  \\n\",\r\n       \"\\n\",\r\n       \"[123 rows x 16 columns]\"\r\n      ]\r\n     },\r\n     \"execution_count\": 508,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"df.loc[df['status'] != '0']\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 509,\r\n   \"id\": \"2b965caf-e5ef-4011-9e39-7ee4ac72d34a\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"df['status'] = df['status'].str.replace('zombie', '1')\\n\",\r\n    \"df['status'] = df['status'].fillna('0')\\n\",\r\n    \"df['status'] = df['status'].str.replace('not_born', '2')\\n\",\r\n    \"df['status'] = df['status'].str.replace('toddler', '3')\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 510,\r\n   \"id\": \"f605f9b3-bc60-4631-9956-cd6ff8dc3743\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"# df.loc[df['status'] == '2']\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"id\": \"9c3cb583-51c5-4232-843d-1fbeb610b1c4\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"Now S2 and VIAF titlelist embeddings\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 511,\r\n   \"id\": \"3baace9a-74ee-4f23-b4ad-9230c92b8dc5\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"#embeddings\\n\",\r\n    \"\\n\",\r\n    \"from sentence_transformers import SentenceTransformer\\n\",\r\n    \"\\n\",\r\n    \"# Load the pre-trained model\\n\",\r\n    \"model = SentenceTransformer('all-MiniLM-L6-v2')\\n\",\r\n    \"\\n\",\r\n    \"# Function to generate embeddings for a list of titles\\n\",\r\n    \"def get_embeddings(titles_list):\\n\",\r\n    \"    if isinstance(titles_list, str):\\n\",\r\n    \"        return model.encode(titles_list)\\n\",\r\n    \"    else:\\n\",\r\n    \"        return model.encode('')\\n\",\r\n    \"\\n\",\r\n    \"# Generate embeddings for each row in the DataFrame\\n\",\r\n    \"df['S2_embeddings'] = df['S2 titlelist'].apply(get_embeddings)\\n\",\r\n    \"df['VIAF_embeddings'] = df['VIAF_titlelist'].apply(get_embeddings)\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 512,\r\n   \"id\": \"82a1f78d-acd6-4e16-be41-c26754a098ba\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"df['S2_titlelist'] = df['S2 titlelist']\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 513,\r\n   \"id\": \"55a67920-5b96-4105-8e40-2845be8e14aa\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"# #parse embeddings\\n\",\r\n    \"# #fix embedding issue like we determined in earlier notebook:\\n\",\r\n    \"# import numpy as np\\n\",\r\n    \"# import ast\\n\",\r\n    \"\\n\",\r\n    \"# def parse_embedding(embedding_str):\\n\",\r\n    \"#     try:\\n\",\r\n    \"#         # Remove leading and trailing brackets\\n\",\r\n    \"#         # embedding_str = embedding_str.strip('[]')\\n\",\r\n    \"        \\n\",\r\n    \"#         # Replace newlines with spaces and split by spaces\\n\",\r\n    \"#         # embedding_list = embedding_str.replace('\\\\n', ' ').split()\\n\",\r\n    \"        \\n\",\r\n    \"#         # Convert list to numpy array\\n\",\r\n    \"#         return np.array([float(x) for x in embedding_list], dtype=np.float32)\\n\",\r\n    \"#     except ValueError as e:\\n\",\r\n    \"#         print(f\\\"Error parsing embedding: {e}\\\")\\n\",\r\n    \"#         return np.array([])  # return an empty array in case of error\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"# df['S2_embeddings_array'] = df['S2_embeddings'].apply(parse_embedding)\\n\",\r\n    \"# df['VIAF_embeddings_array'] = df['VIAF_embeddings'].apply(parse_embedding)\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"#I think this step isn't needed since the embeddings WERE created within this notebook\\n\",\r\n    \"\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 514,\r\n   \"id\": \"0f94bf09-f18b-4c35-918d-9c022ae22ec8\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"df['S2_embeddings'] = df['S2_embeddings'].apply(np.mean)\\n\",\r\n    \"df['VIAF_embeddings'] = df['VIAF_embeddings'].apply(np.mean)\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 515,\r\n   \"id\": \"0844a098-bca8-44ee-80c2-0dbafd31ff1f\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"#get overlapping words and overlapping lemmas:\\n\",\r\n    \"# Function to lemmatize text and return a set of lemmatized words\\n\",\r\n    \"\\n\",\r\n    \"def lemmatize_text(text):\\n\",\r\n    \"    doc = nlp(text)\\n\",\r\n    \"    return set(token.lemma_ for token in doc if not token.is_stop and not token.is_punct)\\n\",\r\n    \"\\n\",\r\n    \"# Function to calculate lemma overlap and return the overlapping lemmas\\n\",\r\n    \"def calculate_lemma_overlap(text1, text2):\\n\",\r\n    \"    text1 = str(text1)\\n\",\r\n    \"    text2 = str(text2)\\n\",\r\n    \"    lemmas1 = lemmatize_text(text1)\\n\",\r\n    \"    lemmas2 = lemmatize_text(text2)\\n\",\r\n    \"    overlap = lemmas1.intersection(lemmas2)\\n\",\r\n    \"    return len(overlap), overlap\\n\",\r\n    \"\\n\",\r\n    \"# # Apply the function to compute lemma overlap for each row in the DataFrame\\n\",\r\n    \"# df[['lemma_overlap', 'overlapping_lemmas']] = df.apply(\\n\",\r\n    \"#     lambda row: pd.Series(calculate_lemma_overlap(row['VIAF_titlelist'], row['S2_titlelist'])), \\n\",\r\n    \"#     axis=1)\\n\",\r\n    \"df[['lemma_overlap', 'overlapping_lemmas']] = df.apply(\\n\",\r\n    \"    lambda row: pd.Series(calculate_lemma_overlap(row['VIAF_titlelist'], row['S2_titlelist'])), \\n\",\r\n    \"    axis=1)\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 516,\r\n   \"id\": \"19b646ca-2f50-46e4-85c9-443f64eb4e59\",\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stderr\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"[nltk_data] Downloading package stopwords to\\n\",\r\n      \"[nltk_data]     /Users/beccacohen/nltk_data...\\n\",\r\n      \"[nltk_data]   Package stopwords is already up-to-date!\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"#add overlaps\\n\",\r\n    \"\\n\",\r\n    \"#add word overlap as a new feature\\n\",\r\n    \"import pandas as pd\\n\",\r\n    \"from nltk.corpus import stopwords\\n\",\r\n    \"import nltk\\n\",\r\n    \"\\n\",\r\n    \"# Download stopwords from NLTK if you haven't already\\n\",\r\n    \"nltk.download('stopwords')\\n\",\r\n    \"# Define stop words\\n\",\r\n    \"stop_words = set(stopwords.words('english'))\\n\",\r\n    \"\\n\",\r\n    \"# Function to create bag of words after removing stop words\\n\",\r\n    \"def bag_of_words(title):\\n\",\r\n    \"    words = title.lower().split()\\n\",\r\n    \"    return set([word for word in words if word not in stop_words])\\n\",\r\n    \"\\n\",\r\n    \"# Function to find and count word overlap\\n\",\r\n    \"def find_word_overlap(row):\\n\",\r\n    \"    try:\\n\",\r\n    \"        v_list = ast.literal_eval(row['VIAF_titlelist'])\\n\",\r\n    \"        s_list = ast.literal_eval(row['S2_titlelist'])\\n\",\r\n    \"        if isinstance(v_list, list):\\n\",\r\n    \"\\n\",\r\n    \"            for title in v_list:\\n\",\r\n    \"                title = str(title)\\n\",\r\n    \"        if isinstance(s_list, list):\\n\",\r\n    \"\\n\",\r\n    \"            for title in s_list:\\n\",\r\n    \"                title = str(title)\\n\",\r\n    \"        if isinstance(v_list, list):\\n\",\r\n    \"\\n\",\r\n    \"            v_bag = bag_of_words(v_list) \\n\",\r\n    \"        if isinstance(s_list, list):\\n\",\r\n    \"\\n\",\r\n    \"            s_bag = bag_of_words(s_list) \\n\",\r\n    \"\\n\",\r\n    \"        overlap = v_bag & s_bag\\n\",\r\n    \"    except:\\n\",\r\n    \"        overlap = ''\\n\",\r\n    \"    return pd.Series([len(overlap), list(overlap)])\\n\",\r\n    \"  \\n\",\r\n    \"# Apply the function to each row and create two new columns\\n\",\r\n    \"df[['word_overlap_count', 'overlapping_words']] = df.apply(find_word_overlap, axis=1)\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 517,\r\n   \"id\": \"38814ed3-b3c0-47ba-8edd-1887437d4b81\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"#embed overlapping word meaning\\n\",\r\n    \"import spacy\\n\",\r\n    \"import numpy as np\\n\",\r\n    \"\\n\",\r\n    \"# Load the spaCy model\\n\",\r\n    \"nlp = spacy.load(\\\"en_core_web_sm\\\")\\n\",\r\n    \"\\n\",\r\n    \"def get_word_embeddings(words):\\n\",\r\n    \"    embeddings = [nlp(word).vector for word in words if nlp(word).has_vector]\\n\",\r\n    \"    if not embeddings:  # Handle case where no valid embeddings\\n\",\r\n    \"        return np.zeros(nlp.vocab.vectors.shape[1])\\n\",\r\n    \"    mean_embedding = np.mean(embeddings, axis=0)\\n\",\r\n    \"    return mean_embedding\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"df['mean_embedding'] = df['overlapping_words'].apply(get_word_embeddings)\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 518,\r\n   \"id\": \"58692c9a-e7a0-4ec8-b190-b9dd7b2e056c\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"#rename to keep track of where birthdate data came from\\n\",\r\n    \"df['VIAF_birthdate'] = df['birthyear']\\n\",\r\n    \"df['pub_age'] = df['publication_age']\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 519,\r\n   \"id\": \"7bfa2a40-eadd-429e-afb6-ad8514d48012\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"#store the metadata to examine later with the probabilities\\n\",\r\n    \"original_indices = df.index\\n\",\r\n    \"original_metadata = df[['VIAF_titlelist', 'selected_birthyear', 'author', 'S2_titlelist','status','pub_age','avg_pubdate', 'VIAF_birthdate','overlapping_words','word_overlap_count','lemma_overlap','overlapping_lemmas']].copy()\\n\",\r\n    \"\\n\",\r\n    \"\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 520,\r\n   \"id\": \"2ca34192-3c70-44ec-b6b8-e9d90e1e9e46\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"df['status'] = df['status'].apply(pd.to_numeric)\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 528,\r\n   \"id\": \"51c504b5-84e7-45d6-8536-c960b09b0b4d\",\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/html\": [\r\n       \"<div>\\n\",\r\n       \"<style scoped>\\n\",\r\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\r\n       \"        vertical-align: middle;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe tbody tr th {\\n\",\r\n       \"        vertical-align: top;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe thead th {\\n\",\r\n       \"        text-align: right;\\n\",\r\n       \"    }\\n\",\r\n       \"</style>\\n\",\r\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\r\n       \"  <thead>\\n\",\r\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\r\n       \"      <th></th>\\n\",\r\n       \"      <th>birth2maxdate</th>\\n\",\r\n       \"      <th>abs_birth2maxdate</th>\\n\",\r\n       \"      <th>birth2mindate</th>\\n\",\r\n       \"      <th>abs_birth2mindate</th>\\n\",\r\n       \"      <th>negative_status</th>\\n\",\r\n       \"      <th>title_length</th>\\n\",\r\n       \"      <th>author_length</th>\\n\",\r\n       \"      <th>S2_pubdates</th>\\n\",\r\n       \"      <th>birthyear</th>\\n\",\r\n       \"      <th>S2 titlelist</th>\\n\",\r\n       \"      <th>...</th>\\n\",\r\n       \"      <th>VIAF_embeddings</th>\\n\",\r\n       \"      <th>S2_titlelist</th>\\n\",\r\n       \"      <th>lemma_overlap</th>\\n\",\r\n       \"      <th>overlapping_lemmas</th>\\n\",\r\n       \"      <th>word_overlap_count</th>\\n\",\r\n       \"      <th>overlapping_words</th>\\n\",\r\n       \"      <th>mean_embedding</th>\\n\",\r\n       \"      <th>VIAF_birthdate</th>\\n\",\r\n       \"      <th>pub_age</th>\\n\",\r\n       \"      <th>match?</th>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </thead>\\n\",\r\n       \"  <tbody>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>0</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>1869</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>-0.001305</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>{}</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>1869</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>1</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>1813</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>-0.000812</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>{}</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>1813</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>2</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>1859</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>-0.000511</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>{}</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>1859</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>3</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>1866</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>-0.001297</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>{}</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>1866</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>4</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>1864</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>-0.001834</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>{}</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>1864</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>...</th>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>806</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>(1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989)</td>\\n\",\r\n       \"      <td>1941</td>\\n\",\r\n       \"      <td>convening and convention in pastoral poetry, t...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>-0.001304</td>\\n\",\r\n       \"      <td>convening and convention in pastoral poetry, t...</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>{modern}</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>1941</td>\\n\",\r\n       \"      <td>43.375000</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>807</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>(1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989)</td>\\n\",\r\n       \"      <td>1932</td>\\n\",\r\n       \"      <td>convening and convention in pastoral poetry, t...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>-0.001322</td>\\n\",\r\n       \"      <td>convening and convention in pastoral poetry, t...</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>{poetry, pastoral, queene}</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>1932</td>\\n\",\r\n       \"      <td>52.375000</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>808</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>(1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989)</td>\\n\",\r\n       \"      <td>1887</td>\\n\",\r\n       \"      <td>convening and convention in pastoral poetry, t...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>-0.001751</td>\\n\",\r\n       \"      <td>convening and convention in pastoral poetry, t...</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>{}</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>1887</td>\\n\",\r\n       \"      <td>97.375000</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>809</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>(1994, 1971, 1976, 1987, 1986, 1988, 1993)</td>\\n\",\r\n       \"      <td>1925</td>\\n\",\r\n       \"      <td>criticism in our clime parables of american ac...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>-0.001676</td>\\n\",\r\n       \"      <td>criticism in our clime parables of american ac...</td>\\n\",\r\n       \"      <td>5</td>\\n\",\r\n       \"      <td>{literature, american, perspective, criticism,...</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>1925</td>\\n\",\r\n       \"      <td>60.000000</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>810</th>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>None</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>(2008, 2014, 2008, 2006, 2015, 2013, 2004, 200...</td>\\n\",\r\n       \"      <td>1965</td>\\n\",\r\n       \"      <td>imagination und deixis studien zur wahrnehmung...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>-0.001114</td>\\n\",\r\n       \"      <td>imagination und deixis studien zur wahrnehmung...</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>{german, high, deutschen, und}</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>1965</td>\\n\",\r\n       \"      <td>42.923077</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </tbody>\\n\",\r\n       \"</table>\\n\",\r\n       \"<p>811 rows × 27 columns</p>\\n\",\r\n       \"</div>\"\r\n      ],\r\n      \"text/plain\": [\r\n       \"    birth2maxdate abs_birth2maxdate birth2mindate abs_birth2mindate  \\\\\\n\",\r\n       \"0            None              None          None              None   \\n\",\r\n       \"1            None              None          None              None   \\n\",\r\n       \"2            None              None          None              None   \\n\",\r\n       \"3            None              None          None              None   \\n\",\r\n       \"4            None              None          None              None   \\n\",\r\n       \"..            ...               ...           ...               ...   \\n\",\r\n       \"806          None              None          None              None   \\n\",\r\n       \"807          None              None          None              None   \\n\",\r\n       \"808          None              None          None              None   \\n\",\r\n       \"809          None              None          None              None   \\n\",\r\n       \"810          None              None          None              None   \\n\",\r\n       \"\\n\",\r\n       \"    negative_status  title_length  author_length  \\\\\\n\",\r\n       \"0              None             0              3   \\n\",\r\n       \"1              None             0              3   \\n\",\r\n       \"2              None             0              3   \\n\",\r\n       \"3              None             0              3   \\n\",\r\n       \"4              None             0              3   \\n\",\r\n       \"..              ...           ...            ...   \\n\",\r\n       \"806            None             0             11   \\n\",\r\n       \"807            None             0             11   \\n\",\r\n       \"808            None             0             11   \\n\",\r\n       \"809            None             0             11   \\n\",\r\n       \"810            None             0             15   \\n\",\r\n       \"\\n\",\r\n       \"                                           S2_pubdates  birthyear  \\\\\\n\",\r\n       \"0                                                 None       1869   \\n\",\r\n       \"1                                                 None       1813   \\n\",\r\n       \"2                                                 None       1859   \\n\",\r\n       \"3                                                 None       1866   \\n\",\r\n       \"4                                                 None       1864   \\n\",\r\n       \"..                                                 ...        ...   \\n\",\r\n       \"806   (1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989)       1941   \\n\",\r\n       \"807   (1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989)       1932   \\n\",\r\n       \"808   (1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989)       1887   \\n\",\r\n       \"809         (1994, 1971, 1976, 1987, 1986, 1988, 1993)       1925   \\n\",\r\n       \"810  (2008, 2014, 2008, 2006, 2015, 2013, 2004, 200...       1965   \\n\",\r\n       \"\\n\",\r\n       \"                                          S2 titlelist  ... VIAF_embeddings  \\\\\\n\",\r\n       \"0                                                  NaN  ...       -0.001305   \\n\",\r\n       \"1                                                  NaN  ...       -0.000812   \\n\",\r\n       \"2                                                  NaN  ...       -0.000511   \\n\",\r\n       \"3                                                  NaN  ...       -0.001297   \\n\",\r\n       \"4                                                  NaN  ...       -0.001834   \\n\",\r\n       \"..                                                 ...  ...             ...   \\n\",\r\n       \"806  convening and convention in pastoral poetry, t...  ...       -0.001304   \\n\",\r\n       \"807  convening and convention in pastoral poetry, t...  ...       -0.001322   \\n\",\r\n       \"808  convening and convention in pastoral poetry, t...  ...       -0.001751   \\n\",\r\n       \"809  criticism in our clime parables of american ac...  ...       -0.001676   \\n\",\r\n       \"810  imagination und deixis studien zur wahrnehmung...  ...       -0.001114   \\n\",\r\n       \"\\n\",\r\n       \"                                          S2_titlelist lemma_overlap  \\\\\\n\",\r\n       \"0                                                  NaN             0   \\n\",\r\n       \"1                                                  NaN             0   \\n\",\r\n       \"2                                                  NaN             0   \\n\",\r\n       \"3                                                  NaN             0   \\n\",\r\n       \"4                                                  NaN             0   \\n\",\r\n       \"..                                                 ...           ...   \\n\",\r\n       \"806  convening and convention in pastoral poetry, t...             1   \\n\",\r\n       \"807  convening and convention in pastoral poetry, t...             3   \\n\",\r\n       \"808  convening and convention in pastoral poetry, t...             0   \\n\",\r\n       \"809  criticism in our clime parables of american ac...             5   \\n\",\r\n       \"810  imagination und deixis studien zur wahrnehmung...             4   \\n\",\r\n       \"\\n\",\r\n       \"                                    overlapping_lemmas  word_overlap_count  \\\\\\n\",\r\n       \"0                                                   {}                   0   \\n\",\r\n       \"1                                                   {}                   0   \\n\",\r\n       \"2                                                   {}                   0   \\n\",\r\n       \"3                                                   {}                   0   \\n\",\r\n       \"4                                                   {}                   0   \\n\",\r\n       \"..                                                 ...                 ...   \\n\",\r\n       \"806                                           {modern}                   0   \\n\",\r\n       \"807                         {poetry, pastoral, queene}                   0   \\n\",\r\n       \"808                                                 {}                   0   \\n\",\r\n       \"809  {literature, american, perspective, criticism,...                   0   \\n\",\r\n       \"810                     {german, high, deutschen, und}                   0   \\n\",\r\n       \"\\n\",\r\n       \"     overlapping_words  mean_embedding  VIAF_birthdate    pub_age  match?  \\n\",\r\n       \"0                   []              []            1869        NaN       0  \\n\",\r\n       \"1                   []              []            1813        NaN       0  \\n\",\r\n       \"2                   []              []            1859        NaN       0  \\n\",\r\n       \"3                   []              []            1866        NaN       0  \\n\",\r\n       \"4                   []              []            1864        NaN       0  \\n\",\r\n       \"..                 ...             ...             ...        ...     ...  \\n\",\r\n       \"806                 []              []            1941  43.375000       0  \\n\",\r\n       \"807                 []              []            1932  52.375000       1  \\n\",\r\n       \"808                 []              []            1887  97.375000       0  \\n\",\r\n       \"809                 []              []            1925  60.000000       1  \\n\",\r\n       \"810                 []              []            1965  42.923077       1  \\n\",\r\n       \"\\n\",\r\n       \"[811 rows x 27 columns]\"\r\n      ]\r\n     },\r\n     \"execution_count\": 528,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"df\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 522,\r\n   \"id\": \"c30c9255-4cda-48e8-8c0c-8fe2e947746e\",\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/html\": [\r\n       \"<div>\\n\",\r\n       \"<style scoped>\\n\",\r\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\r\n       \"        vertical-align: middle;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe tbody tr th {\\n\",\r\n       \"        vertical-align: top;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe thead th {\\n\",\r\n       \"        text-align: right;\\n\",\r\n       \"    }\\n\",\r\n       \"</style>\\n\",\r\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\r\n       \"  <thead>\\n\",\r\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\r\n       \"      <th></th>\\n\",\r\n       \"      <th>Column1</th>\\n\",\r\n       \"      <th>VIAF_titlelist</th>\\n\",\r\n       \"      <th>author</th>\\n\",\r\n       \"      <th>S2_titlelist</th>\\n\",\r\n       \"      <th>status</th>\\n\",\r\n       \"      <th>pub_age</th>\\n\",\r\n       \"      <th>avg_pubdates</th>\\n\",\r\n       \"      <th>standard_birthdate_viaf</th>\\n\",\r\n       \"      <th>overlapping_words</th>\\n\",\r\n       \"      <th>overlapping_lemmas</th>\\n\",\r\n       \"      <th>Class_0_Proba</th>\\n\",\r\n       \"      <th>Class_1_Proba</th>\\n\",\r\n       \"      <th>Class_Decision</th>\\n\",\r\n       \"      <th>True_Label</th>\\n\",\r\n       \"      <th>label_match?</th>\\n\",\r\n       \"      <th>Column2</th>\\n\",\r\n       \"      <th>Column3</th>\\n\",\r\n       \"      <th>new_label</th>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </thead>\\n\",\r\n       \"  <tbody>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>0</th>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>['All men are brothers', 'All men are brothers...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>['']</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1869</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>set()</td>\\n\",\r\n       \"      <td>0.84</td>\\n\",\r\n       \"      <td>0.16</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>True</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>1</th>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>['Adagio, clarinet, strings, D♭ major', 'Adieu...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>['']</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1813</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>set()</td>\\n\",\r\n       \"      <td>0.82</td>\\n\",\r\n       \"      <td>0.18</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>True</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>2</th>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>['Adventure of Black Peter', 'Adventure of Bla...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>['']</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1859</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>set()</td>\\n\",\r\n       \"      <td>0.83</td>\\n\",\r\n       \"      <td>0.17</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>True</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>3</th>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>['10 letters of Sun Yat-Sen, 1914-1916', '30 J...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>['']</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1866</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>set()</td>\\n\",\r\n       \"      <td>0.82</td>\\n\",\r\n       \"      <td>0.18</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>True</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>4</th>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>['Alle guten Wünsche zum neuen Jahre sendet I...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>['']</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1864</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>set()</td>\\n\",\r\n       \"      <td>0.83</td>\\n\",\r\n       \"      <td>0.17</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>True</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>...</th>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>806</th>\\n\",\r\n       \"      <td>806</td>\\n\",\r\n       \"      <td>['1375-1620', '1620-1789', '1789-1888', '476-1...</td>\\n\",\r\n       \"      <td>paul alpers</td>\\n\",\r\n       \"      <td>['convening and convention in pastoral poetry'...</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>43.0</td>\\n\",\r\n       \"      <td>1984.375000</td>\\n\",\r\n       \"      <td>1941</td>\\n\",\r\n       \"      <td>[\\\"'what\\\", 'modern', \\\"'the\\\"]</td>\\n\",\r\n       \"      <td>{'modern'}</td>\\n\",\r\n       \"      <td>0.31</td>\\n\",\r\n       \"      <td>0.69</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>True</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>807</th>\\n\",\r\n       \"      <td>807</td>\\n\",\r\n       \"      <td>['Afterlives of Pastoral : in memorian Paul Al...</td>\\n\",\r\n       \"      <td>paul alpers</td>\\n\",\r\n       \"      <td>['convening and convention in pastoral poetry'...</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>52.0</td>\\n\",\r\n       \"      <td>1984.375000</td>\\n\",\r\n       \"      <td>1932</td>\\n\",\r\n       \"      <td>['pastoral', \\\"'what\\\", 'faerie', \\\"queene',\\\", \\\"'...</td>\\n\",\r\n       \"      <td>{'poetry', 'pastoral', 'queene'}</td>\\n\",\r\n       \"      <td>0.19</td>\\n\",\r\n       \"      <td>0.81</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>True</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>808</th>\\n\",\r\n       \"      <td>808</td>\\n\",\r\n       \"      <td>['Alte deutsche Schwänke', 'Celler Flurnamenb...</td>\\n\",\r\n       \"      <td>paul alpers</td>\\n\",\r\n       \"      <td>['convening and convention in pastoral poetry'...</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>97.0</td>\\n\",\r\n       \"      <td>1984.375000</td>\\n\",\r\n       \"      <td>1887</td>\\n\",\r\n       \"      <td>[]</td>\\n\",\r\n       \"      <td>set()</td>\\n\",\r\n       \"      <td>0.35</td>\\n\",\r\n       \"      <td>0.65</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>True</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>809</th>\\n\",\r\n       \"      <td>809</td>\\n\",\r\n       \"      <td>['Between the Eagle and the Sun : traces of Ja...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>['criticism in our clime: parables of american...</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>60.0</td>\\n\",\r\n       \"      <td>1985.000000</td>\\n\",\r\n       \"      <td>1925</td>\\n\",\r\n       \"      <td>['postmodern', 'american']</td>\\n\",\r\n       \"      <td>{'postmodern', 'literature', 'american', 'pers...</td>\\n\",\r\n       \"      <td>0.24</td>\\n\",\r\n       \"      <td>0.76</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>True</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>810</th>\\n\",\r\n       \"      <td>810</td>\\n\",\r\n       \"      <td>['Allegorie und Didaxe in Konrads ›Büchlein v...</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>['imagination und deixis: studien zur wahrnehm...</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>42.0</td>\\n\",\r\n       \"      <td>2007.923077</td>\\n\",\r\n       \"      <td>1965</td>\\n\",\r\n       \"      <td>['middle', 'deutschen', 'und', 'german', 'high']</td>\\n\",\r\n       \"      <td>{'deutschen', 'und', 'german', 'high'}</td>\\n\",\r\n       \"      <td>0.22</td>\\n\",\r\n       \"      <td>0.78</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>True</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>NaN</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </tbody>\\n\",\r\n       \"</table>\\n\",\r\n       \"<p>811 rows × 18 columns</p>\\n\",\r\n       \"</div>\"\r\n      ],\r\n      \"text/plain\": [\r\n       \"     Column1                                     VIAF_titlelist       author  \\\\\\n\",\r\n       \"0          0  ['All men are brothers', 'All men are brothers...          NaN   \\n\",\r\n       \"1          1  ['Adagio, clarinet, strings, D♭ major', 'Adieu...          NaN   \\n\",\r\n       \"2          2  ['Adventure of Black Peter', 'Adventure of Bla...          NaN   \\n\",\r\n       \"3          3  ['10 letters of Sun Yat-Sen, 1914-1916', '30 J...          NaN   \\n\",\r\n       \"4          4  ['Alle guten Wünsche zum neuen Jahre sendet I...          NaN   \\n\",\r\n       \"..       ...                                                ...          ...   \\n\",\r\n       \"806      806  ['1375-1620', '1620-1789', '1789-1888', '476-1...  paul alpers   \\n\",\r\n       \"807      807  ['Afterlives of Pastoral : in memorian Paul Al...  paul alpers   \\n\",\r\n       \"808      808  ['Alte deutsche Schwänke', 'Celler Flurnamenb...  paul alpers   \\n\",\r\n       \"809      809  ['Between the Eagle and the Sun : traces of Ja...          NaN   \\n\",\r\n       \"810      810  ['Allegorie und Didaxe in Konrads ›Büchlein v...          NaN   \\n\",\r\n       \"\\n\",\r\n       \"                                          S2_titlelist  status  pub_age  \\\\\\n\",\r\n       \"0                                                 ['']       0      NaN   \\n\",\r\n       \"1                                                 ['']       0      NaN   \\n\",\r\n       \"2                                                 ['']       0      NaN   \\n\",\r\n       \"3                                                 ['']       0      NaN   \\n\",\r\n       \"4                                                 ['']       0      NaN   \\n\",\r\n       \"..                                                 ...     ...      ...   \\n\",\r\n       \"806  ['convening and convention in pastoral poetry'...       0     43.0   \\n\",\r\n       \"807  ['convening and convention in pastoral poetry'...       0     52.0   \\n\",\r\n       \"808  ['convening and convention in pastoral poetry'...       0     97.0   \\n\",\r\n       \"809  ['criticism in our clime: parables of american...       0     60.0   \\n\",\r\n       \"810  ['imagination und deixis: studien zur wahrnehm...       0     42.0   \\n\",\r\n       \"\\n\",\r\n       \"     avg_pubdates  standard_birthdate_viaf  \\\\\\n\",\r\n       \"0             NaN                     1869   \\n\",\r\n       \"1             NaN                     1813   \\n\",\r\n       \"2             NaN                     1859   \\n\",\r\n       \"3             NaN                     1866   \\n\",\r\n       \"4             NaN                     1864   \\n\",\r\n       \"..            ...                      ...   \\n\",\r\n       \"806   1984.375000                     1941   \\n\",\r\n       \"807   1984.375000                     1932   \\n\",\r\n       \"808   1984.375000                     1887   \\n\",\r\n       \"809   1985.000000                     1925   \\n\",\r\n       \"810   2007.923077                     1965   \\n\",\r\n       \"\\n\",\r\n       \"                                     overlapping_words  \\\\\\n\",\r\n       \"0                                                   []   \\n\",\r\n       \"1                                                   []   \\n\",\r\n       \"2                                                   []   \\n\",\r\n       \"3                                                   []   \\n\",\r\n       \"4                                                   []   \\n\",\r\n       \"..                                                 ...   \\n\",\r\n       \"806                        [\\\"'what\\\", 'modern', \\\"'the\\\"]   \\n\",\r\n       \"807  ['pastoral', \\\"'what\\\", 'faerie', \\\"queene',\\\", \\\"'...   \\n\",\r\n       \"808                                                 []   \\n\",\r\n       \"809                         ['postmodern', 'american']   \\n\",\r\n       \"810   ['middle', 'deutschen', 'und', 'german', 'high']   \\n\",\r\n       \"\\n\",\r\n       \"                                    overlapping_lemmas  Class_0_Proba  \\\\\\n\",\r\n       \"0                                                set()           0.84   \\n\",\r\n       \"1                                                set()           0.82   \\n\",\r\n       \"2                                                set()           0.83   \\n\",\r\n       \"3                                                set()           0.82   \\n\",\r\n       \"4                                                set()           0.83   \\n\",\r\n       \"..                                                 ...            ...   \\n\",\r\n       \"806                                         {'modern'}           0.31   \\n\",\r\n       \"807                   {'poetry', 'pastoral', 'queene'}           0.19   \\n\",\r\n       \"808                                              set()           0.35   \\n\",\r\n       \"809  {'postmodern', 'literature', 'american', 'pers...           0.24   \\n\",\r\n       \"810             {'deutschen', 'und', 'german', 'high'}           0.22   \\n\",\r\n       \"\\n\",\r\n       \"     Class_1_Proba  Class_Decision  True_Label  label_match? Column2 Column3  \\\\\\n\",\r\n       \"0             0.16               0           0          True     NaN     NaN   \\n\",\r\n       \"1             0.18               0           0          True     NaN     NaN   \\n\",\r\n       \"2             0.17               0           0          True     NaN     NaN   \\n\",\r\n       \"3             0.18               0           0          True     NaN     NaN   \\n\",\r\n       \"4             0.17               0           0          True     NaN     NaN   \\n\",\r\n       \"..             ...             ...         ...           ...     ...     ...   \\n\",\r\n       \"806           0.69               0           0          True     NaN     NaN   \\n\",\r\n       \"807           0.81               1           1          True     NaN     NaN   \\n\",\r\n       \"808           0.65               0           0          True     NaN     NaN   \\n\",\r\n       \"809           0.76               1           1          True     NaN     NaN   \\n\",\r\n       \"810           0.78               1           1          True     NaN     NaN   \\n\",\r\n       \"\\n\",\r\n       \"     new_label  \\n\",\r\n       \"0            0  \\n\",\r\n       \"1            0  \\n\",\r\n       \"2            0  \\n\",\r\n       \"3            0  \\n\",\r\n       \"4            0  \\n\",\r\n       \"..         ...  \\n\",\r\n       \"806          0  \\n\",\r\n       \"807          1  \\n\",\r\n       \"808          0  \\n\",\r\n       \"809          1  \\n\",\r\n       \"810          1  \\n\",\r\n       \"\\n\",\r\n       \"[811 rows x 18 columns]\"\r\n      ]\r\n     },\r\n     \"execution_count\": 522,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"df_2\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 523,\r\n   \"id\": \"4d6abe89-4332-4a07-8035-8a0f985edd4a\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"#in this case, I had done the true labels by hand, so let's add them in here\\n\",\r\n    \"df_2 = pd.read_csv('new_labels_aug22.csv')\\n\",\r\n    \"df['match?'] = df_2['new_label']\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 525,\r\n   \"id\": \"fa45e3f3-3132-40d3-a7e0-5351541d08a8\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"import pandas as pd\\n\",\r\n    \"from sklearn.model_selection import train_test_split, cross_val_predict\\n\",\r\n    \"from sklearn.ensemble import RandomForestClassifier\\n\",\r\n    \"from sklearn.metrics import (precision_recall_curve, roc_auc_score,\\n\",\r\n    \"                             confusion_matrix, ConfusionMatrixDisplay,\\n\",\r\n    \"                             classification_report, accuracy_score)\\n\",\r\n    \"import matplotlib.pyplot as plt\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"X = df.drop(columns=['author','VIAF_titlelist','S2_titlelist','overlapping_words','selected_birthyear','overlapping_lemmas'])  # Drop the label and metadata columns\\n\",\r\n    \"y = df['match?']\\n\",\r\n    \"\\n\",\r\n    \"# Optional: If you want to split into training and test sets first\\n\",\r\n    \"X_train, X_test, y_train, y_test = train_test_split(\\n\",\r\n    \"    X, y, test_size=0.2, random_state=42\\n\",\r\n    \")\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 527,\r\n   \"id\": \"5e4e637e-2023-4805-94f3-cf9e268c2d95\",\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"\\n\",\r\n      \"Data types in X_train:\\n\",\r\n      \"birth2maxdate          object\\n\",\r\n      \"abs_birth2maxdate      object\\n\",\r\n      \"birth2mindate          object\\n\",\r\n      \"abs_birth2mindate      object\\n\",\r\n      \"negative_status        object\\n\",\r\n      \"title_length            int64\\n\",\r\n      \"author_length           int64\\n\",\r\n      \"S2_pubdates            object\\n\",\r\n      \"birthyear               int64\\n\",\r\n      \"S2 titlelist           object\\n\",\r\n      \"avg_pubdate           float64\\n\",\r\n      \"publication_age       float64\\n\",\r\n      \"status                  int64\\n\",\r\n      \"S2_embeddings         float32\\n\",\r\n      \"VIAF_embeddings       float32\\n\",\r\n      \"lemma_overlap           int64\\n\",\r\n      \"word_overlap_count      int64\\n\",\r\n      \"mean_embedding         object\\n\",\r\n      \"VIAF_birthdate          int64\\n\",\r\n      \"pub_age               float64\\n\",\r\n      \"match?                  int64\\n\",\r\n      \"dtype: object\\n\",\r\n      \"\\n\",\r\n      \"Data types in y_train:\\n\",\r\n      \"int64\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"# For DataFrames and Series, you can also check the data types of columns\\n\",\r\n    \"print(\\\"\\\\nData types in X_train:\\\")\\n\",\r\n    \"print(X_train.dtypes)\\n\",\r\n    \"print(\\\"\\\\nData types in y_train:\\\")\\n\",\r\n    \"print(y_train.dtype)\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 526,\r\n   \"id\": \"814afd58-aaa1-4a86-a3ad-97eb4822dadb\",\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"ename\": \"ValueError\",\r\n     \"evalue\": \"setting an array element with a sequence.\",\r\n     \"output_type\": \"error\",\r\n     \"traceback\": [\r\n      \"\\u001B[0;31m---------------------------------------------------------------------------\\u001B[0m\",\r\n      \"\\u001B[0;31mTypeError\\u001B[0m                                 Traceback (most recent call last)\",\r\n      \"\\u001B[0;31mTypeError\\u001B[0m: float() argument must be a string or a real number, not 'tuple'\",\r\n      \"\\nThe above exception was the direct cause of the following exception:\\n\",\r\n      \"\\u001B[0;31mValueError\\u001B[0m                                Traceback (most recent call last)\",\r\n      \"\\u001B[0;32m/var/folders/b7/sfhbbfm5637g6g4dl2gs5bjw0000gn/T/ipykernel_13452/4207874261.py\\u001B[0m in \\u001B[0;36m?\\u001B[0;34m()\\u001B[0m\\n\\u001B[1;32m      2\\u001B[0m \\u001B[0mmodel\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mRandomForestClassifier\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mn_estimators\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0;36m100\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mrandom_state\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0;36m42\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m      3\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m      4\\u001B[0m \\u001B[0;31m# Perform cross-validation\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m      5\\u001B[0m \\u001B[0mmodel\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mRandomForestClassifier\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m----> 6\\u001B[0;31m \\u001B[0my_pred_proba\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mcross_val_predict\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mmodel\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mX\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0my\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mcv\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0;36m5\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mmethod\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0;34m'predict_proba'\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m      7\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m      8\\u001B[0m \\u001B[0;31m# Store predictions with original indices\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m      9\\u001B[0m \\u001B[0mpredictions_df\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mpd\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mDataFrame\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0my_pred_proba\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mindex\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0moriginal_indices\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mcolumns\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0;34m[\\u001B[0m\\u001B[0;34m'Class_0_Proba'\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0;34m'Class_1_Proba'\\u001B[0m\\u001B[0;34m]\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\r\n      \"\\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/_param_validation.py\\u001B[0m in \\u001B[0;36m?\\u001B[0;34m(*args, **kwargs)\\u001B[0m\\n\\u001B[1;32m    210\\u001B[0m                         \\u001B[0mprefer_skip_nested_validation\\u001B[0m \\u001B[0;32mor\\u001B[0m \\u001B[0mglobal_skip_validation\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    211\\u001B[0m                     \\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    212\\u001B[0m                 \\u001B[0;34m)\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    213\\u001B[0m                     \\u001B[0;32mreturn\\u001B[0m \\u001B[0mfunc\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0;34m*\\u001B[0m\\u001B[0margs\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0;34m**\\u001B[0m\\u001B[0mkwargs\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m--> 214\\u001B[0;31m             \\u001B[0;32mexcept\\u001B[0m \\u001B[0mInvalidParameterError\\u001B[0m \\u001B[0;32mas\\u001B[0m \\u001B[0me\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m    215\\u001B[0m                 \\u001B[0;31m# When the function is just a wrapper around an estimator, we allow\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    216\\u001B[0m                 \\u001B[0;31m# the function to delegate validation to the estimator, but we replace\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    217\\u001B[0m                 \\u001B[0;31m# the name of the estimator by the name of the function in the error\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\r\n      \"\\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/model_selection/_validation.py\\u001B[0m in \\u001B[0;36m?\\u001B[0;34m(estimator, X, y, groups, cv, n_jobs, verbose, fit_params, params, pre_dispatch, method)\\u001B[0m\\n\\u001B[1;32m   1278\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1279\\u001B[0m     \\u001B[0;31m# We clone the estimator to make sure that all the folds are\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1280\\u001B[0m     \\u001B[0;31m# independent, and that it is pickle-able.\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1281\\u001B[0m     \\u001B[0mparallel\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mParallel\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mn_jobs\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0mn_jobs\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mverbose\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0mverbose\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mpre_dispatch\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0mpre_dispatch\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m-> 1282\\u001B[0;31m     predictions = parallel(\\n\\u001B[0m\\u001B[1;32m   1283\\u001B[0m         delayed(_fit_and_predict)(\\n\\u001B[1;32m   1284\\u001B[0m             \\u001B[0mclone\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mestimator\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m,\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1285\\u001B[0m             \\u001B[0mX\\u001B[0m\\u001B[0;34m,\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\r\n      \"\\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/parallel.py\\u001B[0m in \\u001B[0;36m?\\u001B[0;34m(self, iterable)\\u001B[0m\\n\\u001B[1;32m     70\\u001B[0m         iterable_with_config = (\\n\\u001B[1;32m     71\\u001B[0m             \\u001B[0;34m(\\u001B[0m\\u001B[0m_with_config\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mdelayed_func\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mconfig\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0margs\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mkwargs\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m     72\\u001B[0m             \\u001B[0;32mfor\\u001B[0m \\u001B[0mdelayed_func\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0margs\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mkwargs\\u001B[0m \\u001B[0;32min\\u001B[0m \\u001B[0miterable\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m     73\\u001B[0m         \\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m---> 74\\u001B[0;31m         \\u001B[0;32mreturn\\u001B[0m \\u001B[0msuper\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0m__call__\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0miterable_with_config\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\",\r\n      \"\\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/joblib/parallel.py\\u001B[0m in \\u001B[0;36m?\\u001B[0;34m(self, iterable)\\u001B[0m\\n\\u001B[1;32m   1914\\u001B[0m             \\u001B[0;31m# If n_jobs==1, run the computation sequentially and return\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1915\\u001B[0m             \\u001B[0;31m# immediately to avoid overheads.\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1916\\u001B[0m             \\u001B[0moutput\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mself\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0m_get_sequential_output\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0miterable\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1917\\u001B[0m             \\u001B[0mnext\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0moutput\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m-> 1918\\u001B[0;31m             \\u001B[0;32mreturn\\u001B[0m \\u001B[0moutput\\u001B[0m \\u001B[0;32mif\\u001B[0m \\u001B[0mself\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mreturn_generator\\u001B[0m \\u001B[0;32melse\\u001B[0m \\u001B[0mlist\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0moutput\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m   1919\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1920\\u001B[0m         \\u001B[0;31m# Let's create an ID that uniquely identifies the current call. If the\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1921\\u001B[0m         \\u001B[0;31m# call is interrupted early and that the same instance is immediately\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\r\n      \"\\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/joblib/parallel.py\\u001B[0m in \\u001B[0;36m?\\u001B[0;34m(self, iterable)\\u001B[0m\\n\\u001B[1;32m   1857\\u001B[0m         \\u001B[0;32mfinally\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1858\\u001B[0m             \\u001B[0mself\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mprint_progress\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1859\\u001B[0m             \\u001B[0mself\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0m_running\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0;32mFalse\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1860\\u001B[0m             \\u001B[0mself\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0m_iterating\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0;32mFalse\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m-> 1861\\u001B[0;31m             \\u001B[0mself\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0m_original_iterator\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0;32mNone\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\",\r\n      \"\\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/parallel.py\\u001B[0m in \\u001B[0;36m?\\u001B[0;34m(self, *args, **kwargs)\\u001B[0m\\n\\u001B[1;32m    132\\u001B[0m                 \\u001B[0mUserWarning\\u001B[0m\\u001B[0;34m,\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    133\\u001B[0m             \\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    134\\u001B[0m             \\u001B[0mconfig\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0;34m{\\u001B[0m\\u001B[0;34m}\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    135\\u001B[0m         \\u001B[0;32mwith\\u001B[0m \\u001B[0mconfig_context\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0;34m**\\u001B[0m\\u001B[0mconfig\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m--> 136\\u001B[0;31m             \\u001B[0;32mreturn\\u001B[0m \\u001B[0mself\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mfunction\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0;34m*\\u001B[0m\\u001B[0margs\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0;34m**\\u001B[0m\\u001B[0mkwargs\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\",\r\n      \"\\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/model_selection/_validation.py\\u001B[0m in \\u001B[0;36m?\\u001B[0;34m(estimator, X, y, train, test, fit_params, method)\\u001B[0m\\n\\u001B[1;32m   1363\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1364\\u001B[0m     \\u001B[0;32mif\\u001B[0m \\u001B[0my_train\\u001B[0m \\u001B[0;32mis\\u001B[0m \\u001B[0;32mNone\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1365\\u001B[0m         \\u001B[0mestimator\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mfit\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mX_train\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0;34m**\\u001B[0m\\u001B[0mfit_params\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1366\\u001B[0m     \\u001B[0;32melse\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m-> 1367\\u001B[0;31m         \\u001B[0mestimator\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mfit\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mX_train\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0my_train\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0;34m**\\u001B[0m\\u001B[0mfit_params\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m   1368\\u001B[0m     \\u001B[0mfunc\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mgetattr\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mestimator\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mmethod\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1369\\u001B[0m     \\u001B[0mpredictions\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mfunc\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mX_test\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1370\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\r\n      \"\\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/base.py\\u001B[0m in \\u001B[0;36m?\\u001B[0;34m(estimator, *args, **kwargs)\\u001B[0m\\n\\u001B[1;32m   1469\\u001B[0m                 skip_parameter_validation=(\\n\\u001B[1;32m   1470\\u001B[0m                     \\u001B[0mprefer_skip_nested_validation\\u001B[0m \\u001B[0;32mor\\u001B[0m \\u001B[0mglobal_skip_validation\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1471\\u001B[0m                 \\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1472\\u001B[0m             \\u001B[0;34m)\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m-> 1473\\u001B[0;31m                 \\u001B[0;32mreturn\\u001B[0m \\u001B[0mfit_method\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mestimator\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0;34m*\\u001B[0m\\u001B[0margs\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0;34m**\\u001B[0m\\u001B[0mkwargs\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\",\r\n      \"\\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/ensemble/_forest.py\\u001B[0m in \\u001B[0;36m?\\u001B[0;34m(self, X, y, sample_weight)\\u001B[0m\\n\\u001B[1;32m    359\\u001B[0m         \\u001B[0;31m# Validate or convert input data\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    360\\u001B[0m         \\u001B[0;32mif\\u001B[0m \\u001B[0missparse\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0my\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    361\\u001B[0m             \\u001B[0;32mraise\\u001B[0m \\u001B[0mValueError\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0;34m\\\"sparse multilabel-indicator for y is not supported.\\\"\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    362\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m--> 363\\u001B[0;31m         X, y = self._validate_data(\\n\\u001B[0m\\u001B[1;32m    364\\u001B[0m             \\u001B[0mX\\u001B[0m\\u001B[0;34m,\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    365\\u001B[0m             \\u001B[0my\\u001B[0m\\u001B[0;34m,\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    366\\u001B[0m             \\u001B[0mmulti_output\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0;32mTrue\\u001B[0m\\u001B[0;34m,\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\r\n      \"\\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/base.py\\u001B[0m in \\u001B[0;36m?\\u001B[0;34m(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)\\u001B[0m\\n\\u001B[1;32m    646\\u001B[0m                 \\u001B[0;32mif\\u001B[0m \\u001B[0;34m\\\"estimator\\\"\\u001B[0m \\u001B[0;32mnot\\u001B[0m \\u001B[0;32min\\u001B[0m \\u001B[0mcheck_y_params\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    647\\u001B[0m                     \\u001B[0mcheck_y_params\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0;34m{\\u001B[0m\\u001B[0;34m**\\u001B[0m\\u001B[0mdefault_check_params\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0;34m**\\u001B[0m\\u001B[0mcheck_y_params\\u001B[0m\\u001B[0;34m}\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    648\\u001B[0m                 \\u001B[0my\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mcheck_array\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0my\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0minput_name\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0;34m\\\"y\\\"\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0;34m**\\u001B[0m\\u001B[0mcheck_y_params\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    649\\u001B[0m             \\u001B[0;32melse\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m--> 650\\u001B[0;31m                 \\u001B[0mX\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0my\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mcheck_X_y\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mX\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0my\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0;34m**\\u001B[0m\\u001B[0mcheck_params\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m    651\\u001B[0m             \\u001B[0mout\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mX\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0my\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    652\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    653\\u001B[0m         \\u001B[0;32mif\\u001B[0m \\u001B[0;32mnot\\u001B[0m \\u001B[0mno_val_X\\u001B[0m \\u001B[0;32mand\\u001B[0m \\u001B[0mcheck_params\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mget\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0;34m\\\"ensure_2d\\\"\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0;32mTrue\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\r\n      \"\\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/validation.py\\u001B[0m in \\u001B[0;36m?\\u001B[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\\u001B[0m\\n\\u001B[1;32m   1297\\u001B[0m         raise ValueError(\\n\\u001B[1;32m   1298\\u001B[0m             \\u001B[0;34mf\\\"\\u001B[0m\\u001B[0;34m{\\u001B[0m\\u001B[0mestimator_name\\u001B[0m\\u001B[0;34m}\\u001B[0m\\u001B[0;34m requires y to be passed, but the target y is None\\u001B[0m\\u001B[0;34m\\\"\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1299\\u001B[0m         \\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1300\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m-> 1301\\u001B[0;31m     X = check_array(\\n\\u001B[0m\\u001B[1;32m   1302\\u001B[0m         \\u001B[0mX\\u001B[0m\\u001B[0;34m,\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1303\\u001B[0m         \\u001B[0maccept_sparse\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0maccept_sparse\\u001B[0m\\u001B[0;34m,\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1304\\u001B[0m         \\u001B[0maccept_large_sparse\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0maccept_large_sparse\\u001B[0m\\u001B[0;34m,\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\r\n      \"\\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/validation.py\\u001B[0m in \\u001B[0;36m?\\u001B[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\\u001B[0m\\n\\u001B[1;32m   1009\\u001B[0m                         \\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1010\\u001B[0m                     \\u001B[0marray\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mxp\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mastype\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0marray\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mdtype\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mcopy\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0;32mFalse\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1011\\u001B[0m                 \\u001B[0;32melse\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1012\\u001B[0m                     \\u001B[0marray\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0m_asarray_with_order\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0marray\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0morder\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0morder\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mdtype\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0mdtype\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mxp\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0mxp\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m-> 1013\\u001B[0;31m             \\u001B[0;32mexcept\\u001B[0m \\u001B[0mComplexWarning\\u001B[0m \\u001B[0;32mas\\u001B[0m \\u001B[0mcomplex_warning\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m   1014\\u001B[0m                 raise ValueError(\\n\\u001B[1;32m   1015\\u001B[0m                     \\u001B[0;34m\\\"Complex data not supported\\\\n{}\\\\n\\\"\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mformat\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0marray\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   1016\\u001B[0m                 \\u001B[0;34m)\\u001B[0m \\u001B[0;32mfrom\\u001B[0m \\u001B[0mcomplex_warning\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\r\n      \"\\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/_array_api.py\\u001B[0m in \\u001B[0;36m?\\u001B[0;34m(array, dtype, order, copy, xp, device)\\u001B[0m\\n\\u001B[1;32m    747\\u001B[0m         \\u001B[0;31m# Use NumPy API to support order\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    748\\u001B[0m         \\u001B[0;32mif\\u001B[0m \\u001B[0mcopy\\u001B[0m \\u001B[0;32mis\\u001B[0m \\u001B[0;32mTrue\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    749\\u001B[0m             \\u001B[0marray\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mnumpy\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0marray\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0marray\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0morder\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0morder\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mdtype\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0mdtype\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    750\\u001B[0m         \\u001B[0;32melse\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m--> 751\\u001B[0;31m             \\u001B[0marray\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mnumpy\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0masarray\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0marray\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0morder\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0morder\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mdtype\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0mdtype\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m    752\\u001B[0m \\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    753\\u001B[0m         \\u001B[0;31m# At this point array is a NumPy ndarray. We convert it to an array\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m    754\\u001B[0m         \\u001B[0;31m# container that is consistent with the input's namespace.\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\r\n      \"\\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/generic.py\\u001B[0m in \\u001B[0;36m?\\u001B[0;34m(self, dtype, copy)\\u001B[0m\\n\\u001B[1;32m   2149\\u001B[0m     def __array__(\\n\\u001B[1;32m   2150\\u001B[0m         \\u001B[0mself\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mdtype\\u001B[0m\\u001B[0;34m:\\u001B[0m \\u001B[0mnpt\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mDTypeLike\\u001B[0m \\u001B[0;34m|\\u001B[0m \\u001B[0;32mNone\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0;32mNone\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mcopy\\u001B[0m\\u001B[0;34m:\\u001B[0m \\u001B[0mbool_t\\u001B[0m \\u001B[0;34m|\\u001B[0m \\u001B[0;32mNone\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0;32mNone\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   2151\\u001B[0m     \\u001B[0;34m)\\u001B[0m \\u001B[0;34m->\\u001B[0m \\u001B[0mnp\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mndarray\\u001B[0m\\u001B[0;34m:\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   2152\\u001B[0m         \\u001B[0mvalues\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mself\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0m_values\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0;32m-> 2153\\u001B[0;31m         \\u001B[0marr\\u001B[0m \\u001B[0;34m=\\u001B[0m \\u001B[0mnp\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0masarray\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mvalues\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0mdtype\\u001B[0m\\u001B[0;34m=\\u001B[0m\\u001B[0mdtype\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[0m\\u001B[1;32m   2154\\u001B[0m         if (\\n\\u001B[1;32m   2155\\u001B[0m             \\u001B[0mastype_is_view\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0mvalues\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mdtype\\u001B[0m\\u001B[0;34m,\\u001B[0m \\u001B[0marr\\u001B[0m\\u001B[0;34m.\\u001B[0m\\u001B[0mdtype\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\\u001B[1;32m   2156\\u001B[0m             \\u001B[0;32mand\\u001B[0m \\u001B[0musing_copy_on_write\\u001B[0m\\u001B[0;34m(\\u001B[0m\\u001B[0;34m)\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0;34m\\u001B[0m\\u001B[0m\\n\",\r\n      \"\\u001B[0;31mValueError\\u001B[0m: setting an array element with a sequence.\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"# Initialize the Random Forest model\\n\",\r\n    \"model = RandomForestClassifier(n_estimators=100, random_state=42)\\n\",\r\n    \"\\n\",\r\n    \"# Perform cross-validation\\n\",\r\n    \"model = RandomForestClassifier()\\n\",\r\n    \"y_pred_proba = cross_val_predict(model, X, y, cv=5, method='predict_proba')\\n\",\r\n    \"\\n\",\r\n    \"# Store predictions with original indices\\n\",\r\n    \"predictions_df = pd.DataFrame(y_pred_proba, index=original_indices, columns=['Class_0_Proba', 'Class_1_Proba'])\\n\",\r\n    \"\\n\",\r\n    \"# Merge the metadata back\\n\",\r\n    \"results_df = pd.concat([original_metadata, predictions_df], axis=1)\\n\",\r\n    \"results_df['True_Label'] = y.loc[results_df.index]\\n\",\r\n    \"\\n\",\r\n    \"# Now you have a DataFrame with metadata and predictions\\n\",\r\n    \"print(results_df.head())\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"id\": \"ca884c92-4fe1-4d3c-9c5f-e95c9fa3bfac\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"id\": \"b74156fd-9f1e-43ba-8007-837e9275c0a8\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"id\": \"d9a803ca-4f1e-4ff0-830f-d52e554cf80b\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": []\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3 (ipykernel)\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 3\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython3\",\r\n   \"version\": \"3.12.4\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 5\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/clean_VIAF_classifier.ipynb b/clean_VIAF_classifier.ipynb
--- a/clean_VIAF_classifier.ipynb	(revision fcdd84778f167256181cca801d2f5cd3e889f23f)
+++ b/clean_VIAF_classifier.ipynb	(date 1727979992666)
@@ -5,8 +5,8 @@
    "id": "29df79eb-96b9-4285-b78b-597f71afb188",
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2024-08-28T20:48:15.055705Z",
-     "start_time": "2024-08-28T20:48:14.993781Z"
+     "end_time": "2024-09-24T16:14:16.678764Z",
+     "start_time": "2024-09-24T16:14:16.675688Z"
     }
    },
    "source": [
@@ -20,61 +20,451 @@
     "\n",
     "import pandas as pd"
    ],
-   "outputs": [
-    {
-     "ename": "ImportError",
-     "evalue": "DLL load failed while importing _multiarray_umath: The specified module could not be found.",
-     "output_type": "error",
-     "traceback": [
-      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
-      "\u001B[1;31mImportError\u001B[0m                               Traceback (most recent call last)",
-      "\u001B[1;31mImportError\u001B[0m: DLL load failed while importing _multiarray_umath: The specified module could not be found."
-     ]
-    },
-    {
-     "ename": "ImportError",
-     "evalue": "numpy._core.multiarray failed to import",
-     "output_type": "error",
-     "traceback": [
-      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
-      "\u001B[1;31mImportError\u001B[0m                               Traceback (most recent call last)",
-      "Cell \u001B[1;32mIn[4], line 9\u001B[0m\n\u001B[0;32m      6\u001B[0m \u001B[38;5;28;01mimport\u001B[39;00m \u001B[38;5;21;01municodedata\u001B[39;00m\n\u001B[0;32m      7\u001B[0m \u001B[38;5;28;01mimport\u001B[39;00m \u001B[38;5;21;01mpprint\u001B[39;00m\n\u001B[1;32m----> 9\u001B[0m \u001B[38;5;28;01mimport\u001B[39;00m \u001B[38;5;21;01mpandas\u001B[39;00m \u001B[38;5;28;01mas\u001B[39;00m \u001B[38;5;21;01mpd\u001B[39;00m\n",
-      "File \u001B[1;32m~\\miniconda3\\Lib\\site-packages\\pandas\\__init__.py:62\u001B[0m\n\u001B[0;32m     59\u001B[0m \u001B[38;5;66;03m# let init-time option registration happen\u001B[39;00m\n\u001B[0;32m     60\u001B[0m \u001B[38;5;28;01mimport\u001B[39;00m \u001B[38;5;21;01mpandas\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mcore\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mconfig_init\u001B[39;00m  \u001B[38;5;66;03m# pyright: ignore[reportUnusedImport] # noqa: F401\u001B[39;00m\n\u001B[1;32m---> 62\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mpandas\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mcore\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mapi\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m (\n\u001B[0;32m     63\u001B[0m     \u001B[38;5;66;03m# dtype\u001B[39;00m\n\u001B[0;32m     64\u001B[0m     ArrowDtype,\n\u001B[0;32m     65\u001B[0m     Int8Dtype,\n\u001B[0;32m     66\u001B[0m     Int16Dtype,\n\u001B[0;32m     67\u001B[0m     Int32Dtype,\n\u001B[0;32m     68\u001B[0m     Int64Dtype,\n\u001B[0;32m     69\u001B[0m     UInt8Dtype,\n\u001B[0;32m     70\u001B[0m     UInt16Dtype,\n\u001B[0;32m     71\u001B[0m     UInt32Dtype,\n\u001B[0;32m     72\u001B[0m     UInt64Dtype,\n\u001B[0;32m     73\u001B[0m     Float32Dtype,\n\u001B[0;32m     74\u001B[0m     Float64Dtype,\n\u001B[0;32m     75\u001B[0m     CategoricalDtype,\n\u001B[0;32m     76\u001B[0m     PeriodDtype,\n\u001B[0;32m     77\u001B[0m     IntervalDtype,\n\u001B[0;32m     78\u001B[0m     DatetimeTZDtype,\n\u001B[0;32m     79\u001B[0m     StringDtype,\n\u001B[0;32m     80\u001B[0m     BooleanDtype,\n\u001B[0;32m     81\u001B[0m     \u001B[38;5;66;03m# missing\u001B[39;00m\n\u001B[0;32m     82\u001B[0m     NA,\n\u001B[0;32m     83\u001B[0m     isna,\n\u001B[0;32m     84\u001B[0m     isnull,\n\u001B[0;32m     85\u001B[0m     notna,\n\u001B[0;32m     86\u001B[0m     notnull,\n\u001B[0;32m     87\u001B[0m     \u001B[38;5;66;03m# indexes\u001B[39;00m\n\u001B[0;32m     88\u001B[0m     Index,\n\u001B[0;32m     89\u001B[0m     CategoricalIndex,\n\u001B[0;32m     90\u001B[0m     RangeIndex,\n\u001B[0;32m     91\u001B[0m     MultiIndex,\n\u001B[0;32m     92\u001B[0m     IntervalIndex,\n\u001B[0;32m     93\u001B[0m     TimedeltaIndex,\n\u001B[0;32m     94\u001B[0m     DatetimeIndex,\n\u001B[0;32m     95\u001B[0m     PeriodIndex,\n\u001B[0;32m     96\u001B[0m     IndexSlice,\n\u001B[0;32m     97\u001B[0m     \u001B[38;5;66;03m# tseries\u001B[39;00m\n\u001B[0;32m     98\u001B[0m     NaT,\n\u001B[0;32m     99\u001B[0m     Period,\n\u001B[0;32m    100\u001B[0m     period_range,\n\u001B[0;32m    101\u001B[0m     Timedelta,\n\u001B[0;32m    102\u001B[0m     timedelta_range,\n\u001B[0;32m    103\u001B[0m     Timestamp,\n\u001B[0;32m    104\u001B[0m     date_range,\n\u001B[0;32m    105\u001B[0m     bdate_range,\n\u001B[0;32m    106\u001B[0m     Interval,\n\u001B[0;32m    107\u001B[0m     interval_range,\n\u001B[0;32m    108\u001B[0m     DateOffset,\n\u001B[0;32m    109\u001B[0m     \u001B[38;5;66;03m# conversion\u001B[39;00m\n\u001B[0;32m    110\u001B[0m     to_numeric,\n\u001B[0;32m    111\u001B[0m     to_datetime,\n\u001B[0;32m    112\u001B[0m     to_timedelta,\n\u001B[0;32m    113\u001B[0m     \u001B[38;5;66;03m# misc\u001B[39;00m\n\u001B[0;32m    114\u001B[0m     Flags,\n\u001B[0;32m    115\u001B[0m     Grouper,\n\u001B[0;32m    116\u001B[0m     factorize,\n\u001B[0;32m    117\u001B[0m     unique,\n\u001B[0;32m    118\u001B[0m     value_counts,\n\u001B[0;32m    119\u001B[0m     NamedAgg,\n\u001B[0;32m    120\u001B[0m     array,\n\u001B[0;32m    121\u001B[0m     Categorical,\n\u001B[0;32m    122\u001B[0m     set_eng_float_format,\n\u001B[0;32m    123\u001B[0m     Series,\n\u001B[0;32m    124\u001B[0m     DataFrame,\n\u001B[0;32m    125\u001B[0m )\n\u001B[0;32m    127\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mpandas\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mcore\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mdtypes\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mdtypes\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m SparseDtype\n\u001B[0;32m    129\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mpandas\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mtseries\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mapi\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m infer_freq\n",
-      "File \u001B[1;32m~\\miniconda3\\Lib\\site-packages\\pandas\\core\\api.py:1\u001B[0m\n\u001B[1;32m----> 1\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mpandas\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01m_libs\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m (\n\u001B[0;32m      2\u001B[0m     NaT,\n\u001B[0;32m      3\u001B[0m     Period,\n\u001B[0;32m      4\u001B[0m     Timedelta,\n\u001B[0;32m      5\u001B[0m     Timestamp,\n\u001B[0;32m      6\u001B[0m )\n\u001B[0;32m      7\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mpandas\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01m_libs\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mmissing\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m NA\n\u001B[0;32m      9\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mpandas\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mcore\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mdtypes\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mdtypes\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m (\n\u001B[0;32m     10\u001B[0m     ArrowDtype,\n\u001B[0;32m     11\u001B[0m     CategoricalDtype,\n\u001B[1;32m   (...)\u001B[0m\n\u001B[0;32m     14\u001B[0m     PeriodDtype,\n\u001B[0;32m     15\u001B[0m )\n",
-      "File \u001B[1;32m~\\miniconda3\\Lib\\site-packages\\pandas\\_libs\\__init__.py:17\u001B[0m\n\u001B[0;32m     13\u001B[0m \u001B[38;5;66;03m# Below imports needs to happen first to ensure pandas top level\u001B[39;00m\n\u001B[0;32m     14\u001B[0m \u001B[38;5;66;03m# module gets monkeypatched with the pandas_datetime_CAPI\u001B[39;00m\n\u001B[0;32m     15\u001B[0m \u001B[38;5;66;03m# see pandas_datetime_exec in pd_datetime.c\u001B[39;00m\n\u001B[0;32m     16\u001B[0m \u001B[38;5;28;01mimport\u001B[39;00m \u001B[38;5;21;01mpandas\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01m_libs\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mpandas_parser\u001B[39;00m  \u001B[38;5;66;03m# isort: skip # type: ignore[reportUnusedImport]\u001B[39;00m\n\u001B[1;32m---> 17\u001B[0m \u001B[38;5;28;01mimport\u001B[39;00m \u001B[38;5;21;01mpandas\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01m_libs\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mpandas_datetime\u001B[39;00m  \u001B[38;5;66;03m# noqa: F401 # isort: skip # type: ignore[reportUnusedImport]\u001B[39;00m\n\u001B[0;32m     18\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mpandas\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01m_libs\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01minterval\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m Interval\n\u001B[0;32m     19\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mpandas\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01m_libs\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mtslibs\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m (\n\u001B[0;32m     20\u001B[0m     NaT,\n\u001B[0;32m     21\u001B[0m     NaTType,\n\u001B[1;32m   (...)\u001B[0m\n\u001B[0;32m     26\u001B[0m     iNaT,\n\u001B[0;32m     27\u001B[0m )\n",
-      "\u001B[1;31mImportError\u001B[0m: numpy._core.multiarray failed to import"
-     ]
-    }
-   ],
-   "execution_count": 4
+   "outputs": [],
+   "execution_count": 16
   },
   {
    "cell_type": "code",
    "id": "e16d7f46-98d6-4b01-9598-d7552106a31c",
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2024-08-28T20:45:03.769915Z",
-     "start_time": "2024-08-28T20:45:03.760306Z"
+     "end_time": "2024-09-24T16:14:16.711007Z",
+     "start_time": "2024-09-24T16:14:16.680768Z"
     }
    },
    "source": [
     "#read in our data\n",
     "df = pd.read_csv('result_df_july18_1136am.csv')"
    ],
+   "outputs": [],
+   "execution_count": 17
+  },
+  {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:16.754081Z",
+     "start_time": "2024-09-24T16:14:16.744422Z"
+    }
+   },
+   "cell_type": "code",
+   "source": "df",
+   "id": "270b44bb441725b2",
    "outputs": [
     {
-     "ename": "NameError",
-     "evalue": "name 'pd' is not defined",
-     "output_type": "error",
-     "traceback": [
-      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
-      "\u001B[1;31mNameError\u001B[0m                                 Traceback (most recent call last)",
-      "Cell \u001B[1;32mIn[3], line 2\u001B[0m\n\u001B[0;32m      1\u001B[0m \u001B[38;5;66;03m#read in our data\u001B[39;00m\n\u001B[1;32m----> 2\u001B[0m df \u001B[38;5;241m=\u001B[39m pd\u001B[38;5;241m.\u001B[39mread_csv(\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mresult_df_july18_1136am.csv\u001B[39m\u001B[38;5;124m'\u001B[39m)\n",
-      "\u001B[1;31mNameError\u001B[0m: name 'pd' is not defined"
-     ]
+     "data": {
+      "text/plain": [
+       "     Unnamed: 0  index           author  birthdate  record_enumerated  \\\n",
+       "0             0      0              NaN       1869                  1   \n",
+       "1             1      1              NaN       1813                  2   \n",
+       "2             2      2              NaN       1859                  3   \n",
+       "3             3      3              NaN       1866                  4   \n",
+       "4             4      4              NaN       1864                  5   \n",
+       "..          ...    ...              ...        ...                ...   \n",
+       "806         806    806      Paul Alpers       1941                  1   \n",
+       "807         807    807      Paul Alpers       1932                  2   \n",
+       "808         808    808      Paul Alpers       1887                  3   \n",
+       "809         809    809      Ihab Hassan       1925                  1   \n",
+       "810         810    810  Annette Volfing       1965                  1   \n",
+       "\n",
+       "                                            title_list  \\\n",
+       "0    ['All men are brothers', 'All men are brothers...   \n",
+       "1    ['Adagio, clarinet, strings, D♭ major', 'Adieu...   \n",
+       "2    ['Adventure of Black Peter', 'Adventure of Bla...   \n",
+       "3    ['10 letters of Sun Yat-Sen, 1914-1916', '30 J...   \n",
+       "4    ['Alle guten Wünsche zum neuen Jahre sendet I...   \n",
+       "..                                                 ...   \n",
+       "806  ['1375-1620', '1620-1789', '1789-1888', '476-1...   \n",
+       "807  ['Afterlives of Pastoral : in memorian Paul Al...   \n",
+       "808  ['Alte deutsche Schwänke', 'Celler Flurnamenb...   \n",
+       "809  ['Between the Eagle and the Sun : traces of Ja...   \n",
+       "810  ['Allegorie und Didaxe in Konrads ›Büchlein v...   \n",
+       "\n",
+       "                              record_enumerated_titles  record_count  \\\n",
+       "0    ['All men are brothers', 'All men are brothers...            10   \n",
+       "1    ['Adagio, clarinet, strings, D♭ major', 'Adieu...            10   \n",
+       "2    ['Adventure of Black Peter', 'Adventure of Bla...            10   \n",
+       "3    ['10 letters of Sun Yat-Sen, 1914-1916', '30 J...            10   \n",
+       "4    ['Alle guten Wünsche zum neuen Jahre sendet I...            10   \n",
+       "..                                                 ...           ...   \n",
+       "806  ['1375-1620', '1620-1789', '1789-1888', '476-1...             6   \n",
+       "807  ['Afterlives of Pastoral : in memorian Paul Al...             6   \n",
+       "808  ['Alte deutsche Schwänke', 'Celler Flurnamenb...             6   \n",
+       "809  ['Between the Eagle and the Sun : traces of Ja...             3   \n",
+       "810  ['Allegorie und Didaxe in Konrads ›Büchlein v...             1   \n",
+       "\n",
+       "    selected_birthyear  standard_birthdate  ...  match?  S2Titles  \\\n",
+       "0                  NaN                1869  ...   False       NaN   \n",
+       "1                  NaN                1813  ...   False       NaN   \n",
+       "2                  NaN                1859  ...   False       NaN   \n",
+       "3                  NaN                1866  ...   False       NaN   \n",
+       "4                  NaN                1864  ...   False       NaN   \n",
+       "..                 ...                 ...  ...     ...       ...   \n",
+       "806             1932.0                1941  ...   False       NaN   \n",
+       "807             1932.0                1932  ...    True       NaN   \n",
+       "808             1932.0                1887  ...   False       NaN   \n",
+       "809             1925.0                1925  ...    True       NaN   \n",
+       "810             1965.0                1965  ...    True       NaN   \n",
+       "\n",
+       "                                              S2titles avg_pubdates  pub_age  \\\n",
+       "0                                                 ['']          NaN      NaN   \n",
+       "1                                                 ['']          NaN      NaN   \n",
+       "2                                                 ['']          NaN      NaN   \n",
+       "3                                                 ['']          NaN      NaN   \n",
+       "4                                                 ['']          NaN      NaN   \n",
+       "..                                                 ...          ...      ...   \n",
+       "806  ['convening and convention in pastoral poetry'...  1984.375000     43.0   \n",
+       "807  ['convening and convention in pastoral poetry'...  1984.375000     52.0   \n",
+       "808  ['convening and convention in pastoral poetry'...  1984.375000     97.0   \n",
+       "809  ['criticism in our clime: parables of american...  1985.000000     60.0   \n",
+       "810  ['imagination und deixis: studien zur wahrnehm...  2007.923077     42.0   \n",
+       "\n",
+       "     status matched_title? matched_title_list  \\\n",
+       "0       NaN             no                 []   \n",
+       "1       NaN             no                 []   \n",
+       "2       NaN             no                 []   \n",
+       "3       NaN             no                 []   \n",
+       "4       NaN             no                 []   \n",
+       "..      ...            ...                ...   \n",
+       "806     NaN             no                 []   \n",
+       "807     NaN             no                 []   \n",
+       "808     NaN             no                 []   \n",
+       "809     NaN             no                 []   \n",
+       "810     NaN             no                 []   \n",
+       "\n",
+       "                                          common_words notes  \n",
+       "0                                                   []   NaN  \n",
+       "1                                                   []   NaN  \n",
+       "2                                                   []   NaN  \n",
+       "3                                                   []   NaN  \n",
+       "4                                                   []   NaN  \n",
+       "..                                                 ...   ...  \n",
+       "806                                         ['modern']   NaN  \n",
+       "807  ['queene', 'poetry', 'pastoral', 'faerie', 'pa...   NaN  \n",
+       "808                                                 []   NaN  \n",
+       "809  ['literature', 'american', 'criticism', 'postm...   NaN  \n",
+       "810  ['heinrich', 'german', 'und', 'high', 'middle'...   NaN  \n",
+       "\n",
+       "[811 rows x 21 columns]"
+      ],
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>Unnamed: 0</th>\n",
+       "      <th>index</th>\n",
+       "      <th>author</th>\n",
+       "      <th>birthdate</th>\n",
+       "      <th>record_enumerated</th>\n",
+       "      <th>title_list</th>\n",
+       "      <th>record_enumerated_titles</th>\n",
+       "      <th>record_count</th>\n",
+       "      <th>selected_birthyear</th>\n",
+       "      <th>standard_birthdate</th>\n",
+       "      <th>...</th>\n",
+       "      <th>match?</th>\n",
+       "      <th>S2Titles</th>\n",
+       "      <th>S2titles</th>\n",
+       "      <th>avg_pubdates</th>\n",
+       "      <th>pub_age</th>\n",
+       "      <th>status</th>\n",
+       "      <th>matched_title?</th>\n",
+       "      <th>matched_title_list</th>\n",
+       "      <th>common_words</th>\n",
+       "      <th>notes</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>0</th>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1869</td>\n",
+       "      <td>1</td>\n",
+       "      <td>['All men are brothers', 'All men are brothers...</td>\n",
+       "      <td>['All men are brothers', 'All men are brothers...</td>\n",
+       "      <td>10</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1869</td>\n",
+       "      <td>...</td>\n",
+       "      <td>False</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>['']</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>no</td>\n",
+       "      <td>[]</td>\n",
+       "      <td>[]</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>1</th>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1813</td>\n",
+       "      <td>2</td>\n",
+       "      <td>['Adagio, clarinet, strings, D♭ major', 'Adieu...</td>\n",
+       "      <td>['Adagio, clarinet, strings, D♭ major', 'Adieu...</td>\n",
+       "      <td>10</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1813</td>\n",
+       "      <td>...</td>\n",
+       "      <td>False</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>['']</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>no</td>\n",
+       "      <td>[]</td>\n",
+       "      <td>[]</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2</th>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1859</td>\n",
+       "      <td>3</td>\n",
+       "      <td>['Adventure of Black Peter', 'Adventure of Bla...</td>\n",
+       "      <td>['Adventure of Black Peter', 'Adventure of Bla...</td>\n",
+       "      <td>10</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1859</td>\n",
+       "      <td>...</td>\n",
+       "      <td>False</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>['']</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>no</td>\n",
+       "      <td>[]</td>\n",
+       "      <td>[]</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>3</th>\n",
+       "      <td>3</td>\n",
+       "      <td>3</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1866</td>\n",
+       "      <td>4</td>\n",
+       "      <td>['10 letters of Sun Yat-Sen, 1914-1916', '30 J...</td>\n",
+       "      <td>['10 letters of Sun Yat-Sen, 1914-1916', '30 J...</td>\n",
+       "      <td>10</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1866</td>\n",
+       "      <td>...</td>\n",
+       "      <td>False</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>['']</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>no</td>\n",
+       "      <td>[]</td>\n",
+       "      <td>[]</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>4</td>\n",
+       "      <td>4</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1864</td>\n",
+       "      <td>5</td>\n",
+       "      <td>['Alle guten Wünsche zum neuen Jahre sendet I...</td>\n",
+       "      <td>['Alle guten Wünsche zum neuen Jahre sendet I...</td>\n",
+       "      <td>10</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>1864</td>\n",
+       "      <td>...</td>\n",
+       "      <td>False</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>['']</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>no</td>\n",
+       "      <td>[]</td>\n",
+       "      <td>[]</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>...</th>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>806</th>\n",
+       "      <td>806</td>\n",
+       "      <td>806</td>\n",
+       "      <td>Paul Alpers</td>\n",
+       "      <td>1941</td>\n",
+       "      <td>1</td>\n",
+       "      <td>['1375-1620', '1620-1789', '1789-1888', '476-1...</td>\n",
+       "      <td>['1375-1620', '1620-1789', '1789-1888', '476-1...</td>\n",
+       "      <td>6</td>\n",
+       "      <td>1932.0</td>\n",
+       "      <td>1941</td>\n",
+       "      <td>...</td>\n",
+       "      <td>False</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>['convening and convention in pastoral poetry'...</td>\n",
+       "      <td>1984.375000</td>\n",
+       "      <td>43.0</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>no</td>\n",
+       "      <td>[]</td>\n",
+       "      <td>['modern']</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>807</th>\n",
+       "      <td>807</td>\n",
+       "      <td>807</td>\n",
+       "      <td>Paul Alpers</td>\n",
+       "      <td>1932</td>\n",
+       "      <td>2</td>\n",
+       "      <td>['Afterlives of Pastoral : in memorian Paul Al...</td>\n",
+       "      <td>['Afterlives of Pastoral : in memorian Paul Al...</td>\n",
+       "      <td>6</td>\n",
+       "      <td>1932.0</td>\n",
+       "      <td>1932</td>\n",
+       "      <td>...</td>\n",
+       "      <td>True</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>['convening and convention in pastoral poetry'...</td>\n",
+       "      <td>1984.375000</td>\n",
+       "      <td>52.0</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>no</td>\n",
+       "      <td>[]</td>\n",
+       "      <td>['queene', 'poetry', 'pastoral', 'faerie', 'pa...</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>808</th>\n",
+       "      <td>808</td>\n",
+       "      <td>808</td>\n",
+       "      <td>Paul Alpers</td>\n",
+       "      <td>1887</td>\n",
+       "      <td>3</td>\n",
+       "      <td>['Alte deutsche Schwänke', 'Celler Flurnamenb...</td>\n",
+       "      <td>['Alte deutsche Schwänke', 'Celler Flurnamenb...</td>\n",
+       "      <td>6</td>\n",
+       "      <td>1932.0</td>\n",
+       "      <td>1887</td>\n",
+       "      <td>...</td>\n",
+       "      <td>False</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>['convening and convention in pastoral poetry'...</td>\n",
+       "      <td>1984.375000</td>\n",
+       "      <td>97.0</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>no</td>\n",
+       "      <td>[]</td>\n",
+       "      <td>[]</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>809</th>\n",
+       "      <td>809</td>\n",
+       "      <td>809</td>\n",
+       "      <td>Ihab Hassan</td>\n",
+       "      <td>1925</td>\n",
+       "      <td>1</td>\n",
+       "      <td>['Between the Eagle and the Sun : traces of Ja...</td>\n",
+       "      <td>['Between the Eagle and the Sun : traces of Ja...</td>\n",
+       "      <td>3</td>\n",
+       "      <td>1925.0</td>\n",
+       "      <td>1925</td>\n",
+       "      <td>...</td>\n",
+       "      <td>True</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>['criticism in our clime: parables of american...</td>\n",
+       "      <td>1985.000000</td>\n",
+       "      <td>60.0</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>no</td>\n",
+       "      <td>[]</td>\n",
+       "      <td>['literature', 'american', 'criticism', 'postm...</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>810</th>\n",
+       "      <td>810</td>\n",
+       "      <td>810</td>\n",
+       "      <td>Annette Volfing</td>\n",
+       "      <td>1965</td>\n",
+       "      <td>1</td>\n",
+       "      <td>['Allegorie und Didaxe in Konrads ›Büchlein v...</td>\n",
+       "      <td>['Allegorie und Didaxe in Konrads ›Büchlein v...</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1965.0</td>\n",
+       "      <td>1965</td>\n",
+       "      <td>...</td>\n",
+       "      <td>True</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>['imagination und deixis: studien zur wahrnehm...</td>\n",
+       "      <td>2007.923077</td>\n",
+       "      <td>42.0</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>no</td>\n",
+       "      <td>[]</td>\n",
+       "      <td>['heinrich', 'german', 'und', 'high', 'middle'...</td>\n",
+       "      <td>NaN</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "<p>811 rows × 21 columns</p>\n",
+       "</div>"
+      ]
+     },
+     "execution_count": 18,
+     "metadata": {},
+     "output_type": "execute_result"
     }
    ],
-   "execution_count": 3
+   "execution_count": 18
   },
   {
    "cell_type": "markdown",
@@ -86,10 +476,13 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 480,
    "id": "8f4be7a2-a3ca-42ee-9a72-ff43f2d5b6fa",
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:16.961128Z",
+     "start_time": "2024-09-24T16:14:16.802429Z"
+    }
+   },
    "source": [
     "#for this specific subsample example, we need to add back S2 info like S2 titles and pub dates\n",
     "\n",
@@ -102,14 +495,19 @@
     "import pandas as pd\n",
     "meta = pd.read_csv(file_path, sep='\\t')\n",
     "\n"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 19
   },
   {
    "cell_type": "code",
-   "execution_count": 481,
    "id": "58d1c533-2670-4bbd-beb9-099559a2b46f",
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:17.471270Z",
+     "start_time": "2024-09-24T16:14:16.994301Z"
+    }
+   },
    "source": [
     "# Ensure the authors column is of type list\n",
     "meta['author'] = meta['authors'].apply(lambda x: eval(x) if isinstance(x, str) else x)\n",
@@ -121,20 +519,54 @@
     "\n",
     "# Display the exploded DataFrame\n",
     "# print(meta_exploded)\n"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 20
   },
   {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:17.480187Z",
+     "start_time": "2024-09-24T16:14:17.477276Z"
+    }
+   },
    "cell_type": "code",
-   "execution_count": 482,
+   "source": [
+    "def normalize_text(text):\n",
+    "    \"\"\"\n",
+    "    Normalize the text by converting to lowercase, preserving commas and spaces,\n",
+    "    and removing unnecessary special characters.\n",
+    "    \"\"\"\n",
+    "    if pd.isna(text):\n",
+    "        return ''\n",
+    "    text = text.lower()  # Convert to lowercase\n",
+    "    text = re.sub(r'\\s+', ' ', text)  # Replace multiple spaces with a single space\n",
+    "    text = re.sub(r'[^\\w\\s,]', '', text)  # Remove all characters except alphanumeric, spaces, and commas\n",
+    "    return text.strip()  # Trim leading and trailing spaces\n"
+   ],
+   "id": "b0317ce20de4c3c9",
+   "outputs": [],
+   "execution_count": 21
+  },
+  {
+   "cell_type": "code",
    "id": "00b9ad82-40e5-43a5-beb1-56852afb796d",
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:19.176613Z",
+     "start_time": "2024-09-24T16:14:17.515692Z"
+    }
+   },
    "source": [
+    "\n",
+    "import re\n",
     "for idx, row in meta.iterrows():\n",
     "    author = str(row['author'])\n",
     "    author_clean = normalize_text(author)\n",
     "    meta.at[idx, 'author'] = author_clean"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 22
   },
   {
    "cell_type": "markdown",
@@ -146,10 +578,13 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 483,
    "id": "ba4c9a62-3931-4fd9-9d3e-ac620515262e",
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:20.269038Z",
+     "start_time": "2024-09-24T16:14:19.209240Z"
+    }
+   },
    "source": [
     "# Initialize an empty dictionary to store the author-title mapping\n",
     "author_titles = {}\n",
@@ -164,14 +599,19 @@
     "\n",
     "# # Display the dictionary to verify\n",
     "# print(author_titles)\n"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 23
   },
   {
    "cell_type": "code",
-   "execution_count": 484,
    "id": "1dc8989d-34f7-4328-9471-009d66c60510",
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:20.307920Z",
+     "start_time": "2024-09-24T16:14:20.300609Z"
+    }
+   },
    "source": [
     "import re\n",
     "\n",
@@ -195,57 +635,104 @@
     "# Normalize the DataFrame\n",
     "# df['normalized_S2_titlelist'] = df['S2_Titlelist'].apply(normalize_text)\n",
     "df['normalized_author'] = df['author'].apply(normalize_text)"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 24
   },
   {
    "cell_type": "code",
-   "execution_count": 485,
    "id": "953218a0-7f4f-43a4-938b-cb1359ef3ee6",
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:20.533713Z",
+     "start_time": "2024-09-24T16:14:20.339682Z"
+    }
+   },
    "source": [
     "normalized_dict = {normalize_text(str(author)): normalize_text(str(title)) for title, author in author_titles.items()}\n"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 25
   },
   {
    "cell_type": "code",
-   "execution_count": 486,
    "id": "90310035-d396-4fc5-a1db-ddda810a97ad",
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:20.572414Z",
+     "start_time": "2024-09-24T16:14:20.567658Z"
+    }
+   },
    "source": [
     "swapped_dict = {v: k for k, v in normalized_dict.items()}\n"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 26
   },
   {
    "cell_type": "code",
-   "execution_count": 487,
    "id": "d4433fe8-a535-469d-aaf0-2a91f090e4f1",
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:20.605934Z",
+     "start_time": "2024-09-24T16:14:20.603998Z"
+    }
+   },
    "source": [
     "# swapped_dict"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 27
   },
   {
    "cell_type": "code",
-   "execution_count": 488,
    "id": "afda86c5-b536-4e2f-974a-bea30da02b5e",
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:20.641397Z",
+     "start_time": "2024-09-24T16:14:20.637710Z"
+    }
+   },
    "source": [
     "df['S2_Titlelist'] = df['normalized_author'].map(swapped_dict)\n"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 28
   },
   {
    "cell_type": "code",
-   "execution_count": 489,
    "id": "849b21f2-8cdb-43a4-9871-de99ed232c1a",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# df"
-   ]
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:15:20.913676Z",
+     "start_time": "2024-09-24T16:15:20.908989Z"
+    }
+   },
+   "source": "df['S2_Titlelist']",
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "0                                                    NaN\n",
+       "1                                                    NaN\n",
+       "2                                                    NaN\n",
+       "3                                                    NaN\n",
+       "4                                                    NaN\n",
+       "                             ...                        \n",
+       "806    convening and convention in pastoral poetry, t...\n",
+       "807    convening and convention in pastoral poetry, t...\n",
+       "808    convening and convention in pastoral poetry, t...\n",
+       "809    criticism in our clime parables of american ac...\n",
+       "810    imagination und deixis studien zur wahrnehmung...\n",
+       "Name: S2_Titlelist, Length: 811, dtype: object"
+      ]
+     },
+     "execution_count": 43,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "execution_count": 43
   },
   {
    "cell_type": "markdown",
@@ -257,10 +744,13 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 490,
    "id": "a3229509-428d-4129-92a9-97d0468aa74e",
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:21.799905Z",
+     "start_time": "2024-09-24T16:14:20.707738Z"
+    }
+   },
    "source": [
     "# Initialize an empty dictionary to store the author-title mapping\n",
     "author_years = {}\n",
@@ -275,25 +765,35 @@
     "\n",
     "# Display the dictionary to verify\n",
     "# print(author_titles)\n"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 30
   },
   {
    "cell_type": "code",
-   "execution_count": 491,
    "id": "797127b7-d878-4135-9944-7285edc0e647",
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:21.886821Z",
+     "start_time": "2024-09-24T16:14:21.832979Z"
+    }
+   },
    "source": [
     "# normalized_dict = {normalize_text(str(author)): normalize_text(str(title)) for title, author in title_author_dict.items()}\n",
     "normalized_dict = {normalize_text(str(author)): title for title, author in author_years.items()}\n"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 31
   },
   {
    "cell_type": "code",
-   "execution_count": 492,
    "id": "ad07e114-6d33-47b1-a880-2dc81749cb3f",
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:21.922728Z",
+     "start_time": "2024-09-24T16:14:21.917874Z"
+    }
+   },
    "source": [
     "#normalize then apply dictionary\n",
     "# cleaned_dict = {key.strip(\"[]'\"): value for key, value in normalized_dict.items()}\n",
@@ -306,23 +806,37 @@
     "        return years\n",
     "    \n",
     "df['S2_pubdates'] = df['normalized_author'].apply(update_pubdates)"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 32
   },
   {
    "cell_type": "code",
-   "execution_count": 493,
    "id": "d61ad77e-b016-444f-924f-c60aee6bac1d",
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:21.956333Z",
+     "start_time": "2024-09-24T16:14:21.954382Z"
+    }
+   },
    "source": [
     "# df['S2_pubdates'] = df['author'].map(author_years)"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 33
   },
   {
    "cell_type": "code",
-   "execution_count": 494,
    "id": "ea4a3ef9-486b-46d1-a812-549235f4d17f",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:21.988920Z",
+     "start_time": "2024-09-24T16:14:21.985719Z"
+    }
+   },
+   "source": [
+    "df['S2_pubdates']"
+   ],
    "outputs": [
     {
      "data": {
@@ -341,24 +855,40 @@
        "Name: S2_pubdates, Length: 811, dtype: object"
       ]
      },
-     "execution_count": 494,
+     "execution_count": 34,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
-   "source": [
-    "df['S2_pubdates']"
-   ]
+   "execution_count": 34
   },
   {
    "cell_type": "code",
-   "execution_count": 495,
-   "id": "27c2cf17-de7a-43c9-b65c-4ff17dfc2ff9",
-   "metadata": {},
+   "id": "5eb15fc5dc2ccd8",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:22.037049Z",
+     "start_time": "2024-09-24T16:14:22.035391Z"
+    }
+   },
+   "source": [],
    "outputs": [],
+   "execution_count": null
+  },
+  {
+   "cell_type": "code",
+   "id": "27c2cf17-de7a-43c9-b65c-4ff17dfc2ff9",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:22.079483Z",
+     "start_time": "2024-09-24T16:14:22.077539Z"
+    }
+   },
    "source": [
     "# df"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 35
   },
   {
    "cell_type": "markdown",
@@ -387,10 +917,13 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 496,
    "id": "cf8e8194-6152-4796-a470-dfd145b328da",
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:22.149422Z",
+     "start_time": "2024-09-24T16:14:22.146487Z"
+    }
+   },
    "source": [
     "def get_name(name):\n",
     "    params = {\n",
@@ -408,14 +941,19 @@
     "    data = r.json()\n",
     "\n",
     "    return data"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 36
   },
   {
    "cell_type": "code",
-   "execution_count": 497,
    "id": "097fab29-a53d-48d9-bf8f-a549ca5df11d",
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:22.200551Z",
+     "start_time": "2024-09-24T16:14:22.198403Z"
+    }
+   },
    "source": [
     "user_agent = 'YOUR PROJECT NAME HERE'\n",
     "id_column_name = \"Name\"\n",
@@ -425,7 +963,9 @@
     "use_title_reconcilation = True\n",
     "\n",
     "cache = {}"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 37
   },
   {
    "cell_type": "markdown",
@@ -437,22 +977,13 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 498,
    "id": "4b2a2746-39a9-4f04-b1ad-3c26aad469d0",
-   "metadata": {},
-   "outputs": [
-    {
-     "ename": "ModuleNotFoundError",
-     "evalue": "No module named 'fuzzywuzzy'",
-     "output_type": "error",
-     "traceback": [
-      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
-      "\u001B[0;31mModuleNotFoundError\u001B[0m                       Traceback (most recent call last)",
-      "Cell \u001B[0;32mIn[498], line 2\u001B[0m\n\u001B[1;32m      1\u001B[0m \u001B[38;5;28;01mimport\u001B[39;00m \u001B[38;5;21;01mpandas\u001B[39;00m \u001B[38;5;28;01mas\u001B[39;00m \u001B[38;5;21;01mpd\u001B[39;00m\n\u001B[0;32m----> 2\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mfuzzywuzzy\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m fuzz\n\u001B[1;32m      4\u001B[0m birthdates_df \u001B[38;5;241m=\u001B[39m df\n\u001B[1;32m      6\u001B[0m \u001B[38;5;66;03m# Function to perform search and return DataFrame with search results\u001B[39;00m\n",
-      "\u001B[0;31mModuleNotFoundError\u001B[0m: No module named 'fuzzywuzzy'"
-     ]
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:22.233998Z",
+     "start_time": "2024-09-24T16:14:22.230761Z"
     }
-   ],
+   },
    "source": [
     "# import pandas as pd\n",
     "# from fuzzywuzzy import fuzz\n",
@@ -536,7 +1067,9 @@
     "# # Convert list of dictionaries to DataFrame\n",
     "# all_search_results_df = pd.DataFrame(all_search_results)\n",
     "# print(all_search_results_df)\n"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 38
   },
   {
    "cell_type": "markdown",
@@ -548,10 +1081,13 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 499,
    "id": "437b1aa9-d5d8-415a-9836-830f48ea928d",
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:22.266329Z",
+     "start_time": "2024-09-24T16:14:22.263441Z"
+    }
+   },
    "source": [
     "result_df = df\n",
     "result_df['VIAF_titlelist'] = result_df['record_enumerated_titles'] \n",
@@ -562,16 +1098,158 @@
     "\n",
     "\n",
     "df = result_df"
-   ]
+   ],
+   "outputs": [],
+   "execution_count": 39
   },
   {
    "cell_type": "code",
-   "execution_count": 500,
    "id": "7d4e2ffc-26f7-4656-887e-a40d0cbccf5d",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:22.308020Z",
+     "start_time": "2024-09-24T16:14:22.298259Z"
+    }
+   },
+   "source": [
+    "df"
+   ],
    "outputs": [
     {
      "data": {
+      "text/plain": [
+       "     Unnamed: 0  index           author  birthdate  record_enumerated  \\\n",
+       "0             0      0              NaN       1869                  1   \n",
+       "1             1      1              NaN       1813                  2   \n",
+       "2             2      2              NaN       1859                  3   \n",
+       "3             3      3              NaN       1866                  4   \n",
+       "4             4      4              NaN       1864                  5   \n",
+       "..          ...    ...              ...        ...                ...   \n",
+       "806         806    806      Paul Alpers       1941                  1   \n",
+       "807         807    807      Paul Alpers       1932                  2   \n",
+       "808         808    808      Paul Alpers       1887                  3   \n",
+       "809         809    809      Ihab Hassan       1925                  1   \n",
+       "810         810    810  Annette Volfing       1965                  1   \n",
+       "\n",
+       "                                            title_list  \\\n",
+       "0    ['All men are brothers', 'All men are brothers...   \n",
+       "1    ['Adagio, clarinet, strings, D♭ major', 'Adieu...   \n",
+       "2    ['Adventure of Black Peter', 'Adventure of Bla...   \n",
+       "3    ['10 letters of Sun Yat-Sen, 1914-1916', '30 J...   \n",
+       "4    ['Alle guten Wünsche zum neuen Jahre sendet I...   \n",
+       "..                                                 ...   \n",
+       "806  ['1375-1620', '1620-1789', '1789-1888', '476-1...   \n",
+       "807  ['Afterlives of Pastoral : in memorian Paul Al...   \n",
+       "808  ['Alte deutsche Schwänke', 'Celler Flurnamenb...   \n",
+       "809  ['Between the Eagle and the Sun : traces of Ja...   \n",
+       "810  ['Allegorie und Didaxe in Konrads ›Büchlein v...   \n",
+       "\n",
+       "                              record_enumerated_titles  record_count  \\\n",
+       "0    ['All men are brothers', 'All men are brothers...            10   \n",
+       "1    ['Adagio, clarinet, strings, D♭ major', 'Adieu...            10   \n",
+       "2    ['Adventure of Black Peter', 'Adventure of Bla...            10   \n",
+       "3    ['10 letters of Sun Yat-Sen, 1914-1916', '30 J...            10   \n",
+       "4    ['Alle guten Wünsche zum neuen Jahre sendet I...            10   \n",
+       "..                                                 ...           ...   \n",
+       "806  ['1375-1620', '1620-1789', '1789-1888', '476-1...             6   \n",
+       "807  ['Afterlives of Pastoral : in memorian Paul Al...             6   \n",
+       "808  ['Alte deutsche Schwänke', 'Celler Flurnamenb...             6   \n",
+       "809  ['Between the Eagle and the Sun : traces of Ja...             3   \n",
+       "810  ['Allegorie und Didaxe in Konrads ›Büchlein v...             1   \n",
+       "\n",
+       "    selected_birthyear  standard_birthdate  ...  \\\n",
+       "0                  NaN                1869  ...   \n",
+       "1                  NaN                1813  ...   \n",
+       "2                  NaN                1859  ...   \n",
+       "3                  NaN                1866  ...   \n",
+       "4                  NaN                1864  ...   \n",
+       "..                 ...                 ...  ...   \n",
+       "806             1932.0                1941  ...   \n",
+       "807             1932.0                1932  ...   \n",
+       "808             1932.0                1887  ...   \n",
+       "809             1925.0                1925  ...   \n",
+       "810             1965.0                1965  ...   \n",
+       "\n",
+       "                                          common_words  notes  \\\n",
+       "0                                                   []    NaN   \n",
+       "1                                                   []    NaN   \n",
+       "2                                                   []    NaN   \n",
+       "3                                                   []    NaN   \n",
+       "4                                                   []    NaN   \n",
+       "..                                                 ...    ...   \n",
+       "806                                         ['modern']    NaN   \n",
+       "807  ['queene', 'poetry', 'pastoral', 'faerie', 'pa...    NaN   \n",
+       "808                                                 []    NaN   \n",
+       "809  ['literature', 'american', 'criticism', 'postm...    NaN   \n",
+       "810  ['heinrich', 'german', 'und', 'high', 'middle'...    NaN   \n",
+       "\n",
+       "     normalized_author                                       S2_Titlelist  \\\n",
+       "0                                                                     NaN   \n",
+       "1                                                                     NaN   \n",
+       "2                                                                     NaN   \n",
+       "3                                                                     NaN   \n",
+       "4                                                                     NaN   \n",
+       "..                 ...                                                ...   \n",
+       "806        paul alpers  convening and convention in pastoral poetry, t...   \n",
+       "807        paul alpers  convening and convention in pastoral poetry, t...   \n",
+       "808        paul alpers  convening and convention in pastoral poetry, t...   \n",
+       "809        ihab hassan  criticism in our clime parables of american ac...   \n",
+       "810    annette volfing  imagination und deixis studien zur wahrnehmung...   \n",
+       "\n",
+       "                                           S2_pubdates  \\\n",
+       "0                                                 None   \n",
+       "1                                                 None   \n",
+       "2                                                 None   \n",
+       "3                                                 None   \n",
+       "4                                                 None   \n",
+       "..                                                 ...   \n",
+       "806     1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989   \n",
+       "807     1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989   \n",
+       "808     1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989   \n",
+       "809           1994, 1971, 1976, 1987, 1986, 1988, 1993   \n",
+       "810  2008, 2014, 2008, 2006, 2015, 2013, 2004, 2003...   \n",
+       "\n",
+       "                                        VIAF_titlelist  \\\n",
+       "0    ['All men are brothers', 'All men are brothers...   \n",
+       "1    ['Adagio, clarinet, strings, D♭ major', 'Adieu...   \n",
+       "2    ['Adventure of Black Peter', 'Adventure of Bla...   \n",
+       "3    ['10 letters of Sun Yat-Sen, 1914-1916', '30 J...   \n",
+       "4    ['Alle guten Wünsche zum neuen Jahre sendet I...   \n",
+       "..                                                 ...   \n",
+       "806  ['1375-1620', '1620-1789', '1789-1888', '476-1...   \n",
+       "807  ['Afterlives of Pastoral : in memorian Paul Al...   \n",
+       "808  ['Alte deutsche Schwänke', 'Celler Flurnamenb...   \n",
+       "809  ['Between the Eagle and the Sun : traces of Ja...   \n",
+       "810  ['Allegorie und Didaxe in Konrads ›Büchlein v...   \n",
+       "\n",
+       "                                          S2_titlelist average_S2_pubdate  \\\n",
+       "0                                                 ['']                NaN   \n",
+       "1                                                 ['']                NaN   \n",
+       "2                                                 ['']                NaN   \n",
+       "3                                                 ['']                NaN   \n",
+       "4                                                 ['']                NaN   \n",
+       "..                                                 ...                ...   \n",
+       "806  ['convening and convention in pastoral poetry'...        1984.375000   \n",
+       "807  ['convening and convention in pastoral poetry'...        1984.375000   \n",
+       "808  ['convening and convention in pastoral poetry'...        1984.375000   \n",
+       "809  ['criticism in our clime: parables of american...        1985.000000   \n",
+       "810  ['imagination und deixis: studien zur wahrnehm...        2007.923077   \n",
+       "\n",
+       "    VIAF_birthdate        S2_Author  \n",
+       "0             1869              NaN  \n",
+       "1             1813              NaN  \n",
+       "2             1859              NaN  \n",
+       "3             1866              NaN  \n",
+       "4             1864              NaN  \n",
+       "..             ...              ...  \n",
+       "806           1941      Paul Alpers  \n",
+       "807           1932      Paul Alpers  \n",
+       "808           1887      Paul Alpers  \n",
+       "809           1925      Ihab Hassan  \n",
+       "810           1965  Annette Volfing  \n",
+       "\n",
+       "[811 rows x 29 columns]"
+      ],
       "text/html": [
        "<div>\n",
        "<style scoped>\n",
@@ -883,149 +1561,14 @@
        "</table>\n",
        "<p>811 rows × 29 columns</p>\n",
        "</div>"
-      ],
-      "text/plain": [
-       "     Unnamed: 0  index           author  birthdate  record_enumerated  \\\n",
-       "0             0      0              NaN       1869                  1   \n",
-       "1             1      1              NaN       1813                  2   \n",
-       "2             2      2              NaN       1859                  3   \n",
-       "3             3      3              NaN       1866                  4   \n",
-       "4             4      4              NaN       1864                  5   \n",
-       "..          ...    ...              ...        ...                ...   \n",
-       "806         806    806      Paul Alpers       1941                  1   \n",
-       "807         807    807      Paul Alpers       1932                  2   \n",
-       "808         808    808      Paul Alpers       1887                  3   \n",
-       "809         809    809      Ihab Hassan       1925                  1   \n",
-       "810         810    810  Annette Volfing       1965                  1   \n",
-       "\n",
-       "                                            title_list  \\\n",
-       "0    ['All men are brothers', 'All men are brothers...   \n",
-       "1    ['Adagio, clarinet, strings, D♭ major', 'Adieu...   \n",
-       "2    ['Adventure of Black Peter', 'Adventure of Bla...   \n",
-       "3    ['10 letters of Sun Yat-Sen, 1914-1916', '30 J...   \n",
-       "4    ['Alle guten Wünsche zum neuen Jahre sendet I...   \n",
-       "..                                                 ...   \n",
-       "806  ['1375-1620', '1620-1789', '1789-1888', '476-1...   \n",
-       "807  ['Afterlives of Pastoral : in memorian Paul Al...   \n",
-       "808  ['Alte deutsche Schwänke', 'Celler Flurnamenb...   \n",
-       "809  ['Between the Eagle and the Sun : traces of Ja...   \n",
-       "810  ['Allegorie und Didaxe in Konrads ›Büchlein v...   \n",
-       "\n",
-       "                              record_enumerated_titles  record_count  \\\n",
-       "0    ['All men are brothers', 'All men are brothers...            10   \n",
-       "1    ['Adagio, clarinet, strings, D♭ major', 'Adieu...            10   \n",
-       "2    ['Adventure of Black Peter', 'Adventure of Bla...            10   \n",
-       "3    ['10 letters of Sun Yat-Sen, 1914-1916', '30 J...            10   \n",
-       "4    ['Alle guten Wünsche zum neuen Jahre sendet I...            10   \n",
-       "..                                                 ...           ...   \n",
-       "806  ['1375-1620', '1620-1789', '1789-1888', '476-1...             6   \n",
-       "807  ['Afterlives of Pastoral : in memorian Paul Al...             6   \n",
-       "808  ['Alte deutsche Schwänke', 'Celler Flurnamenb...             6   \n",
-       "809  ['Between the Eagle and the Sun : traces of Ja...             3   \n",
-       "810  ['Allegorie und Didaxe in Konrads ›Büchlein v...             1   \n",
-       "\n",
-       "    selected_birthyear  standard_birthdate  ...  \\\n",
-       "0                  NaN                1869  ...   \n",
-       "1                  NaN                1813  ...   \n",
-       "2                  NaN                1859  ...   \n",
-       "3                  NaN                1866  ...   \n",
-       "4                  NaN                1864  ...   \n",
-       "..                 ...                 ...  ...   \n",
-       "806             1932.0                1941  ...   \n",
-       "807             1932.0                1932  ...   \n",
-       "808             1932.0                1887  ...   \n",
-       "809             1925.0                1925  ...   \n",
-       "810             1965.0                1965  ...   \n",
-       "\n",
-       "                                          common_words  notes  \\\n",
-       "0                                                   []    NaN   \n",
-       "1                                                   []    NaN   \n",
-       "2                                                   []    NaN   \n",
-       "3                                                   []    NaN   \n",
-       "4                                                   []    NaN   \n",
-       "..                                                 ...    ...   \n",
-       "806                                         ['modern']    NaN   \n",
-       "807  ['queene', 'poetry', 'pastoral', 'faerie', 'pa...    NaN   \n",
-       "808                                                 []    NaN   \n",
-       "809  ['literature', 'american', 'criticism', 'postm...    NaN   \n",
-       "810  ['heinrich', 'german', 'und', 'high', 'middle'...    NaN   \n",
-       "\n",
-       "     normalized_author                                       S2_Titlelist  \\\n",
-       "0                                                                     NaN   \n",
-       "1                                                                     NaN   \n",
-       "2                                                                     NaN   \n",
-       "3                                                                     NaN   \n",
-       "4                                                                     NaN   \n",
-       "..                 ...                                                ...   \n",
-       "806        paul alpers  convening and convention in pastoral poetry, t...   \n",
-       "807        paul alpers  convening and convention in pastoral poetry, t...   \n",
-       "808        paul alpers  convening and convention in pastoral poetry, t...   \n",
-       "809        ihab hassan  criticism in our clime parables of american ac...   \n",
-       "810    annette volfing  imagination und deixis studien zur wahrnehmung...   \n",
-       "\n",
-       "                                           S2_pubdates  \\\n",
-       "0                                                 None   \n",
-       "1                                                 None   \n",
-       "2                                                 None   \n",
-       "3                                                 None   \n",
-       "4                                                 None   \n",
-       "..                                                 ...   \n",
-       "806     1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989   \n",
-       "807     1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989   \n",
-       "808     1983, 1977, 1977, 1978, 1982, 1982, 2007, 1989   \n",
-       "809           1994, 1971, 1976, 1987, 1986, 1988, 1993   \n",
-       "810  2008, 2014, 2008, 2006, 2015, 2013, 2004, 2003...   \n",
-       "\n",
-       "                                        VIAF_titlelist  \\\n",
-       "0    ['All men are brothers', 'All men are brothers...   \n",
-       "1    ['Adagio, clarinet, strings, D♭ major', 'Adieu...   \n",
-       "2    ['Adventure of Black Peter', 'Adventure of Bla...   \n",
-       "3    ['10 letters of Sun Yat-Sen, 1914-1916', '30 J...   \n",
-       "4    ['Alle guten Wünsche zum neuen Jahre sendet I...   \n",
-       "..                                                 ...   \n",
-       "806  ['1375-1620', '1620-1789', '1789-1888', '476-1...   \n",
-       "807  ['Afterlives of Pastoral : in memorian Paul Al...   \n",
-       "808  ['Alte deutsche Schwänke', 'Celler Flurnamenb...   \n",
-       "809  ['Between the Eagle and the Sun : traces of Ja...   \n",
-       "810  ['Allegorie und Didaxe in Konrads ›Büchlein v...   \n",
-       "\n",
-       "                                          S2_titlelist average_S2_pubdate  \\\n",
-       "0                                                 ['']                NaN   \n",
-       "1                                                 ['']                NaN   \n",
-       "2                                                 ['']                NaN   \n",
-       "3                                                 ['']                NaN   \n",
-       "4                                                 ['']                NaN   \n",
-       "..                                                 ...                ...   \n",
-       "806  ['convening and convention in pastoral poetry'...        1984.375000   \n",
-       "807  ['convening and convention in pastoral poetry'...        1984.375000   \n",
-       "808  ['convening and convention in pastoral poetry'...        1984.375000   \n",
-       "809  ['criticism in our clime: parables of american...        1985.000000   \n",
-       "810  ['imagination und deixis: studien zur wahrnehm...        2007.923077   \n",
-       "\n",
-       "    VIAF_birthdate        S2_Author  \n",
-       "0             1869              NaN  \n",
-       "1             1813              NaN  \n",
-       "2             1859              NaN  \n",
-       "3             1866              NaN  \n",
-       "4             1864              NaN  \n",
-       "..             ...              ...  \n",
-       "806           1941      Paul Alpers  \n",
-       "807           1932      Paul Alpers  \n",
-       "808           1887      Paul Alpers  \n",
-       "809           1925      Ihab Hassan  \n",
-       "810           1965  Annette Volfing  \n",
-       "\n",
-       "[811 rows x 29 columns]"
       ]
      },
-     "execution_count": 500,
+     "execution_count": 40,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
-   "source": [
-    "df"
-   ]
+   "execution_count": 40
   },
   {
    "cell_type": "markdown",
@@ -1037,10 +1580,13 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 533,
    "id": "d76f3b6b-3252-404d-b8b8-cd9055c5b5b8",
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:15:47.814604Z",
+     "start_time": "2024-09-24T16:15:47.768065Z"
+    }
+   },
    "source": [
     "#create our defined function variables\n",
     "import pandas as pd\n",
@@ -1109,7 +1655,9 @@
     "    else:\n",
     "        pubdates = None\n",
     "    \n",
-    "    if pubdates is None or not isinstance(pubdates, list):\n",
+    "    # if pubdates is None:\n",
+    "    #if pubdates is None or not isinstance(pubdates, list):\n",
+    "\n",
     "        return {\n",
     "            'birth2maxdate': None,\n",
     "            'abs_birth2maxdate': None,\n",
@@ -1125,8 +1673,7 @@
     "            'selected_birthyear':row['selected_birthyear'],\n",
     "            'author':row['author']\n",
     "\n",
-    "        }\n",
-    "\n",
+    "    }\n",
     "    birth2maxdate_value, absbirth2maxdate_value = birth2maxdate(birth, pubdates)\n",
     "    birth2mindate_value, absbirth2mindate_value = birth2mindate(birth, pubdates)\n",
     "    neg_status = any_negative(birth2maxdate_value, birth2mindate_value)\n",
@@ -1158,13 +1705,93 @@
     "\n",
     "# Print or use result_df as needed\n",
     "# print(result_df)\n"
-   ]
+   ],
+   "outputs": [
+    {
+     "ename": "NameError",
+     "evalue": "name 'ast' is not defined",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[1;31mNameError\u001B[0m                                 Traceback (most recent call last)",
+      "Cell \u001B[1;32mIn[44], line 114\u001B[0m\n\u001B[0;32m     94\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m {\n\u001B[0;32m     95\u001B[0m         \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mbirth2maxdate\u001B[39m\u001B[38;5;124m'\u001B[39m: birth2maxdate_value,\n\u001B[0;32m     96\u001B[0m         \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mabs_birth2maxdate\u001B[39m\u001B[38;5;124m'\u001B[39m: absbirth2maxdate_value,\n\u001B[1;32m   (...)\u001B[0m\n\u001B[0;32m    110\u001B[0m \n\u001B[0;32m    111\u001B[0m     }\n\u001B[0;32m    113\u001B[0m \u001B[38;5;66;03m# Assuming df is your DataFrame\u001B[39;00m\n\u001B[1;32m--> 114\u001B[0m df \u001B[38;5;241m=\u001B[39m result_df\u001B[38;5;241m.\u001B[39mapply(process_row, axis\u001B[38;5;241m=\u001B[39m\u001B[38;5;241m1\u001B[39m, result_type\u001B[38;5;241m=\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mexpand\u001B[39m\u001B[38;5;124m'\u001B[39m)\n",
+      "File \u001B[1;32m~\\miniconda3\\Lib\\site-packages\\pandas\\core\\frame.py:10374\u001B[0m, in \u001B[0;36mDataFrame.apply\u001B[1;34m(self, func, axis, raw, result_type, args, by_row, engine, engine_kwargs, **kwargs)\u001B[0m\n\u001B[0;32m  10360\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mpandas\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mcore\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mapply\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m frame_apply\n\u001B[0;32m  10362\u001B[0m op \u001B[38;5;241m=\u001B[39m frame_apply(\n\u001B[0;32m  10363\u001B[0m     \u001B[38;5;28mself\u001B[39m,\n\u001B[0;32m  10364\u001B[0m     func\u001B[38;5;241m=\u001B[39mfunc,\n\u001B[1;32m   (...)\u001B[0m\n\u001B[0;32m  10372\u001B[0m     kwargs\u001B[38;5;241m=\u001B[39mkwargs,\n\u001B[0;32m  10373\u001B[0m )\n\u001B[1;32m> 10374\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m op\u001B[38;5;241m.\u001B[39mapply()\u001B[38;5;241m.\u001B[39m__finalize__(\u001B[38;5;28mself\u001B[39m, method\u001B[38;5;241m=\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mapply\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n",
+      "File \u001B[1;32m~\\miniconda3\\Lib\\site-packages\\pandas\\core\\apply.py:916\u001B[0m, in \u001B[0;36mFrameApply.apply\u001B[1;34m(self)\u001B[0m\n\u001B[0;32m    913\u001B[0m \u001B[38;5;28;01melif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mraw:\n\u001B[0;32m    914\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mapply_raw(engine\u001B[38;5;241m=\u001B[39m\u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mengine, engine_kwargs\u001B[38;5;241m=\u001B[39m\u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mengine_kwargs)\n\u001B[1;32m--> 916\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mapply_standard()\n",
+      "File \u001B[1;32m~\\miniconda3\\Lib\\site-packages\\pandas\\core\\apply.py:1063\u001B[0m, in \u001B[0;36mFrameApply.apply_standard\u001B[1;34m(self)\u001B[0m\n\u001B[0;32m   1061\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21mapply_standard\u001B[39m(\u001B[38;5;28mself\u001B[39m):\n\u001B[0;32m   1062\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mengine \u001B[38;5;241m==\u001B[39m \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mpython\u001B[39m\u001B[38;5;124m\"\u001B[39m:\n\u001B[1;32m-> 1063\u001B[0m         results, res_index \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mapply_series_generator()\n\u001B[0;32m   1064\u001B[0m     \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[0;32m   1065\u001B[0m         results, res_index \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mapply_series_numba()\n",
+      "File \u001B[1;32m~\\miniconda3\\Lib\\site-packages\\pandas\\core\\apply.py:1081\u001B[0m, in \u001B[0;36mFrameApply.apply_series_generator\u001B[1;34m(self)\u001B[0m\n\u001B[0;32m   1078\u001B[0m \u001B[38;5;28;01mwith\u001B[39;00m option_context(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mmode.chained_assignment\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;28;01mNone\u001B[39;00m):\n\u001B[0;32m   1079\u001B[0m     \u001B[38;5;28;01mfor\u001B[39;00m i, v \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28menumerate\u001B[39m(series_gen):\n\u001B[0;32m   1080\u001B[0m         \u001B[38;5;66;03m# ignore SettingWithCopy here in case the user mutates\u001B[39;00m\n\u001B[1;32m-> 1081\u001B[0m         results[i] \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mfunc(v, \u001B[38;5;241m*\u001B[39m\u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39margs, \u001B[38;5;241m*\u001B[39m\u001B[38;5;241m*\u001B[39m\u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mkwargs)\n\u001B[0;32m   1082\u001B[0m         \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28misinstance\u001B[39m(results[i], ABCSeries):\n\u001B[0;32m   1083\u001B[0m             \u001B[38;5;66;03m# If we have a view on v, we need to make a copy because\u001B[39;00m\n\u001B[0;32m   1084\u001B[0m             \u001B[38;5;66;03m#  series_generator will swap out the underlying data\u001B[39;00m\n\u001B[0;32m   1085\u001B[0m             results[i] \u001B[38;5;241m=\u001B[39m results[i]\u001B[38;5;241m.\u001B[39mcopy(deep\u001B[38;5;241m=\u001B[39m\u001B[38;5;28;01mFalse\u001B[39;00m)\n",
+      "Cell \u001B[1;32mIn[44], line 87\u001B[0m, in \u001B[0;36mprocess_row\u001B[1;34m(row)\u001B[0m\n\u001B[0;32m     68\u001B[0m \u001B[38;5;66;03m# if pubdates is None:\u001B[39;00m\n\u001B[0;32m     69\u001B[0m \u001B[38;5;66;03m#if pubdates is None or not isinstance(pubdates, list):\u001B[39;00m\n\u001B[0;32m     71\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m {\n\u001B[0;32m     72\u001B[0m         \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mbirth2maxdate\u001B[39m\u001B[38;5;124m'\u001B[39m: \u001B[38;5;28;01mNone\u001B[39;00m,\n\u001B[0;32m     73\u001B[0m         \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mabs_birth2maxdate\u001B[39m\u001B[38;5;124m'\u001B[39m: \u001B[38;5;28;01mNone\u001B[39;00m,\n\u001B[1;32m   (...)\u001B[0m\n\u001B[0;32m     85\u001B[0m \n\u001B[0;32m     86\u001B[0m }\n\u001B[1;32m---> 87\u001B[0m birth2maxdate_value, absbirth2maxdate_value \u001B[38;5;241m=\u001B[39m birth2maxdate(birth, pubdates)\n\u001B[0;32m     88\u001B[0m birth2mindate_value, absbirth2mindate_value \u001B[38;5;241m=\u001B[39m birth2mindate(birth, pubdates)\n\u001B[0;32m     89\u001B[0m neg_status \u001B[38;5;241m=\u001B[39m any_negative(birth2maxdate_value, birth2mindate_value)\n",
+      "Cell \u001B[1;32mIn[44], line 22\u001B[0m, in \u001B[0;36mbirth2maxdate\u001B[1;34m(birth, pubdates)\u001B[0m\n\u001B[0;32m     20\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21mbirth2maxdate\u001B[39m(birth, pubdates):\n\u001B[0;32m     21\u001B[0m         \u001B[38;5;66;03m# Convert the string representation to an actual tuple\u001B[39;00m\n\u001B[1;32m---> 22\u001B[0m         pubdates_tuple \u001B[38;5;241m=\u001B[39m ast\u001B[38;5;241m.\u001B[39mliteral_eval(pubdates)\n\u001B[0;32m     24\u001B[0m         \u001B[38;5;66;03m# Check if it's a tuple of integers\u001B[39;00m\n\u001B[0;32m     25\u001B[0m         \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28misinstance\u001B[39m(pubdates_tuple, \u001B[38;5;28mtuple\u001B[39m) \u001B[38;5;129;01mand\u001B[39;00m \u001B[38;5;28mall\u001B[39m(\u001B[38;5;28misinstance\u001B[39m(date, \u001B[38;5;28mint\u001B[39m) \u001B[38;5;28;01mfor\u001B[39;00m date \u001B[38;5;129;01min\u001B[39;00m pubdates_tuple):\n",
+      "\u001B[1;31mNameError\u001B[0m: name 'ast' is not defined"
+     ]
+    }
+   ],
+   "execution_count": 44
   },
   {
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:16:57.130912Z",
+     "start_time": "2024-09-24T16:16:55.858405Z"
+    }
+   },
    "cell_type": "code",
-   "execution_count": 534,
+   "source": "!pip install ast",
+   "id": "a1b713dc8797f5da",
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Collecting ast\n",
+      "  Using cached AST-0.0.2.tar.gz (19 kB)\n",
+      "  Preparing metadata (setup.py): started\n",
+      "  Preparing metadata (setup.py): finished with status 'error'\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "  error: subprocess-exited-with-error\n",
+      "  \n",
+      "  python setup.py egg_info did not run successfully.\n",
+      "  exit code: 1\n",
+      "  \n",
+      "  [8 lines of output]\n",
+      "  Traceback (most recent call last):\n",
+      "    File \"<string>\", line 2, in <module>\n",
+      "    File \"<pip-setuptools-caller>\", line 34, in <module>\n",
+      "    File \"C:\\Users\\bscag\\AppData\\Local\\Temp\\pip-install-8koxkphv\\ast_8ad88571dc2a45b99f51d06b243c01f7\\setup.py\", line 6, in <module>\n",
+      "      README = codecs.open(os.path.join(here, 'AST/README'), encoding='utf8').read()\n",
+      "               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
+      "    File \"<frozen codecs>\", line 918, in open\n",
+      "  FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\bscag\\\\AppData\\\\Local\\\\Temp\\\\pip-install-8koxkphv\\\\ast_8ad88571dc2a45b99f51d06b243c01f7\\\\AST/README'\n",
+      "  [end of output]\n",
+      "  \n",
+      "  note: This error originates from a subprocess, and is likely not a problem with pip.\n",
+      "error: metadata-generation-failed\n",
+      "\n",
+      "Encountered error while generating package metadata.\n",
+      "\n",
+      "See above for output.\n",
+      "\n",
+      "note: This is an issue with the package mentioned above, not pip.\n",
+      "hint: See above for details.\n"
+     ]
+    }
+   ],
+   "execution_count": 45
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 573,
    "id": "1983be3b-e5c0-4210-b4c8-7c5e1ac59d5a",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.080637400Z",
+     "start_time": "2024-09-23T20:31:54.774231Z"
+    }
+   },
    "outputs": [
     {
      "data": {
@@ -1466,7 +2093,7 @@
        "[811 rows x 13 columns]"
       ]
      },
-     "execution_count": 534,
+     "execution_count": 573,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1477,9 +2104,107 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 503,
-   "id": "ef46229a-2548-458c-932f-bfca8a4daa25",
-   "metadata": {},
+   "execution_count": 615,
+   "id": "a32fa7508a1d1f31",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.081637700Z",
+     "start_time": "2024-09-23T22:45:30.018083Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "df_notnull = df.loc[df['birth2maxdate'].notnull()]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 616,
+   "id": "c7230def9baf387d",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.081637700Z",
+     "start_time": "2024-09-23T22:45:38.553833Z"
+    }
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>birth2maxdate</th>\n",
+       "      <th>abs_birth2maxdate</th>\n",
+       "      <th>birth2mindate</th>\n",
+       "      <th>abs_birth2mindate</th>\n",
+       "      <th>negative_status</th>\n",
+       "      <th>title_length</th>\n",
+       "      <th>author_length</th>\n",
+       "      <th>S2_pubdates</th>\n",
+       "      <th>birthyear</th>\n",
+       "      <th>S2 titlelist</th>\n",
+       "      <th>...</th>\n",
+       "      <th>VIAF_embeddings</th>\n",
+       "      <th>S2_titlelist</th>\n",
+       "      <th>lemma_overlap</th>\n",
+       "      <th>overlapping_lemmas</th>\n",
+       "      <th>word_overlap_count</th>\n",
+       "      <th>overlapping_words</th>\n",
+       "      <th>mean_embedding</th>\n",
+       "      <th>VIAF_birthdate</th>\n",
+       "      <th>pub_age</th>\n",
+       "      <th>match?</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "<p>0 rows × 27 columns</p>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "Empty DataFrame\n",
+       "Columns: [birth2maxdate, abs_birth2maxdate, birth2mindate, abs_birth2mindate, negative_status, title_length, author_length, S2_pubdates, birthyear, S2 titlelist, VIAF_titlelist, selected_birthyear, author, avg_pubdate, publication_age, status, S2_embeddings, VIAF_embeddings, S2_titlelist, lemma_overlap, overlapping_lemmas, word_overlap_count, overlapping_words, mean_embedding, VIAF_birthdate, pub_age, match?]\n",
+       "Index: []\n",
+       "\n",
+       "[0 rows x 27 columns]"
+      ]
+     },
+     "execution_count": 616,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "df_notnull"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 574,
+   "id": "ef46229a-2548-458c-932f-bfca8a4daa25",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.081637700Z",
+     "start_time": "2024-09-23T20:31:55.025868Z"
+    }
+   },
    "outputs": [],
    "source": [
     "import pandas as pd\n",
@@ -1507,9 +2232,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 504,
+   "execution_count": 575,
    "id": "fd090a8e-fbb2-4718-973c-63abe3ff8230",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.082638Z",
+     "start_time": "2024-09-23T20:31:55.633132Z"
+    }
+   },
    "outputs": [],
    "source": [
     "#publication_age\n",
@@ -1518,9 +2248,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 535,
+   "execution_count": 576,
    "id": "31c3a502-404e-41c1-843c-c151cb2f2188",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.082638Z",
+     "start_time": "2024-09-23T20:31:55.699250Z"
+    }
+   },
    "outputs": [
     {
      "data": {
@@ -1556,6 +2291,8 @@
        "      <th>VIAF_titlelist</th>\n",
        "      <th>selected_birthyear</th>\n",
        "      <th>author</th>\n",
+       "      <th>avg_pubdate</th>\n",
+       "      <th>publication_age</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
@@ -1574,6 +2311,8 @@
        "      <td>['All men are brothers', 'All men are brothers...</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
@@ -1590,6 +2329,8 @@
        "      <td>['Adagio, clarinet, strings, D♭ major', 'Adieu...</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
@@ -1604,6 +2345,8 @@
        "      <td>1859</td>\n",
        "      <td>NaN</td>\n",
        "      <td>['Adventure of Black Peter', 'Adventure of Bla...</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
@@ -1622,6 +2365,8 @@
        "      <td>['10 letters of Sun Yat-Sen, 1914-1916', '30 J...</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
@@ -1636,6 +2381,8 @@
        "      <td>1864</td>\n",
        "      <td>NaN</td>\n",
        "      <td>['Alle guten Wünsche zum neuen Jahre sendet I...</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
@@ -1654,6 +2401,8 @@
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>806</th>\n",
@@ -1670,6 +2419,8 @@
        "      <td>['1375-1620', '1620-1789', '1789-1888', '476-1...</td>\n",
        "      <td>1932.0</td>\n",
        "      <td>Paul Alpers</td>\n",
+       "      <td>1984.375000</td>\n",
+       "      <td>43.375000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>807</th>\n",
@@ -1686,6 +2437,8 @@
        "      <td>['Afterlives of Pastoral : in memorian Paul Al...</td>\n",
        "      <td>1932.0</td>\n",
        "      <td>Paul Alpers</td>\n",
+       "      <td>1984.375000</td>\n",
+       "      <td>52.375000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>808</th>\n",
@@ -1702,6 +2455,8 @@
        "      <td>['Alte deutsche Schwänke', 'Celler Flurnamenb...</td>\n",
        "      <td>1932.0</td>\n",
        "      <td>Paul Alpers</td>\n",
+       "      <td>1984.375000</td>\n",
+       "      <td>97.375000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>809</th>\n",
@@ -1718,6 +2473,8 @@
        "      <td>['Between the Eagle and the Sun : traces of Ja...</td>\n",
        "      <td>1925.0</td>\n",
        "      <td>Ihab Hassan</td>\n",
+       "      <td>1985.000000</td>\n",
+       "      <td>60.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>810</th>\n",
@@ -1734,10 +2491,12 @@
        "      <td>['Allegorie und Didaxe in Konrads ›Büchlein v...</td>\n",
        "      <td>1965.0</td>\n",
        "      <td>Annette Volfing</td>\n",
+       "      <td>2007.923077</td>\n",
+       "      <td>42.923077</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
-       "<p>811 rows × 13 columns</p>\n",
+       "<p>811 rows × 15 columns</p>\n",
        "</div>"
       ],
       "text/plain": [
@@ -1806,23 +2565,23 @@
        "809  ['Between the Eagle and the Sun : traces of Ja...             1925.0   \n",
        "810  ['Allegorie und Didaxe in Konrads ›Büchlein v...             1965.0   \n",
        "\n",
-       "              author  \n",
-       "0                NaN  \n",
-       "1                NaN  \n",
-       "2                NaN  \n",
-       "3                NaN  \n",
-       "4                NaN  \n",
-       "..               ...  \n",
-       "806      Paul Alpers  \n",
-       "807      Paul Alpers  \n",
-       "808      Paul Alpers  \n",
-       "809      Ihab Hassan  \n",
-       "810  Annette Volfing  \n",
+       "              author  avg_pubdate  publication_age  \n",
+       "0                NaN          NaN              NaN  \n",
+       "1                NaN          NaN              NaN  \n",
+       "2                NaN          NaN              NaN  \n",
+       "3                NaN          NaN              NaN  \n",
+       "4                NaN          NaN              NaN  \n",
+       "..               ...          ...              ...  \n",
+       "806      Paul Alpers  1984.375000        43.375000  \n",
+       "807      Paul Alpers  1984.375000        52.375000  \n",
+       "808      Paul Alpers  1984.375000        97.375000  \n",
+       "809      Ihab Hassan  1985.000000        60.000000  \n",
+       "810  Annette Volfing  2007.923077        42.923077  \n",
        "\n",
-       "[811 rows x 13 columns]"
+       "[811 rows x 15 columns]"
       ]
      },
-     "execution_count": 535,
+     "execution_count": 576,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1833,9 +2592,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 506,
+   "execution_count": 577,
    "id": "acece9c0-1607-4008-b87a-e1bc13a99c17",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.082638Z",
+     "start_time": "2024-09-23T20:31:55.932007Z"
+    }
+   },
    "outputs": [],
    "source": [
     "df['publication_age'] = pd.to_numeric(df['publication_age'], errors='coerce')\n"
@@ -1851,9 +2615,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 507,
+   "execution_count": 578,
    "id": "36a936e1-1ae6-42fa-9518-477f14d5d967",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.082638Z",
+     "start_time": "2024-09-23T20:31:56.105221Z"
+    }
+   },
    "outputs": [],
    "source": [
     "df['status'] = \"\"\n",
@@ -1872,9 +2641,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 508,
+   "execution_count": 579,
    "id": "d3d39998-8559-4aaa-8f1f-a5fb6f43c347",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.082638Z",
+     "start_time": "2024-09-23T20:31:56.434898Z"
+    }
+   },
    "outputs": [
     {
      "data": {
@@ -2212,7 +2986,7 @@
        "[123 rows x 16 columns]"
       ]
      },
-     "execution_count": 508,
+     "execution_count": 579,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -2223,9 +2997,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 509,
+   "execution_count": 580,
    "id": "2b965caf-e5ef-4011-9e39-7ee4ac72d34a",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.083638100Z",
+     "start_time": "2024-09-23T20:31:57.106141Z"
+    }
+   },
    "outputs": [],
    "source": [
     "df['status'] = df['status'].str.replace('zombie', '1')\n",
@@ -2236,9 +3015,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 510,
+   "execution_count": 581,
    "id": "f605f9b3-bc60-4631-9956-cd6ff8dc3743",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.083638100Z",
+     "start_time": "2024-09-23T20:31:57.339745Z"
+    }
+   },
    "outputs": [],
    "source": [
     "# df.loc[df['status'] == '2']"
@@ -2254,9 +3038,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 511,
+   "execution_count": 582,
    "id": "3baace9a-74ee-4f23-b4ad-9230c92b8dc5",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.083638100Z",
+     "start_time": "2024-09-23T20:31:57.460153Z"
+    }
+   },
    "outputs": [],
    "source": [
     "#embeddings\n",
@@ -2280,9 +3069,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 512,
+   "execution_count": 583,
    "id": "82a1f78d-acd6-4e16-be41-c26754a098ba",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.084637700Z",
+     "start_time": "2024-09-23T20:34:18.643372Z"
+    }
+   },
    "outputs": [],
    "source": [
     "df['S2_titlelist'] = df['S2 titlelist']"
@@ -2290,9 +3084,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 513,
+   "execution_count": 584,
    "id": "55a67920-5b96-4105-8e40-2845be8e14aa",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.084637700Z",
+     "start_time": "2024-09-23T20:34:18.869084Z"
+    }
+   },
    "outputs": [],
    "source": [
     "# #parse embeddings\n",
@@ -2325,9 +3124,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 514,
+   "execution_count": 585,
    "id": "0f94bf09-f18b-4c35-918d-9c022ae22ec8",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.084637700Z",
+     "start_time": "2024-09-23T20:34:19.091449Z"
+    }
+   },
    "outputs": [],
    "source": [
     "df['S2_embeddings'] = df['S2_embeddings'].apply(np.mean)\n",
@@ -2336,9 +3140,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 515,
+   "execution_count": 586,
    "id": "0844a098-bca8-44ee-80c2-0dbafd31ff1f",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.114637300Z",
+     "start_time": "2024-09-23T20:34:19.537435Z"
+    }
+   },
    "outputs": [],
    "source": [
     "#get overlapping words and overlapping lemmas:\n",
@@ -2368,9 +3177,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 516,
+   "execution_count": 587,
    "id": "19b646ca-2f50-46e4-85c9-443f64eb4e59",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.114637300Z",
+     "start_time": "2024-09-23T20:36:45.787384Z"
+    }
+   },
    "outputs": [
     {
      "name": "stderr",
@@ -2431,9 +3245,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 517,
+   "execution_count": 588,
    "id": "38814ed3-b3c0-47ba-8edd-1887437d4b81",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.114637300Z",
+     "start_time": "2024-09-23T20:36:46.166532Z"
+    }
+   },
    "outputs": [],
    "source": [
     "#embed overlapping word meaning\n",
@@ -2456,9 +3275,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 518,
+   "execution_count": 589,
    "id": "58692c9a-e7a0-4ec8-b190-b9dd7b2e056c",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.115637600Z",
+     "start_time": "2024-09-23T20:36:47.054608Z"
+    }
+   },
    "outputs": [],
    "source": [
     "#rename to keep track of where birthdate data came from\n",
@@ -2468,9 +3292,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 519,
+   "execution_count": 590,
    "id": "7bfa2a40-eadd-429e-afb6-ad8514d48012",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.115637600Z",
+     "start_time": "2024-09-23T20:36:47.279256Z"
+    }
+   },
    "outputs": [],
    "source": [
     "#store the metadata to examine later with the probabilities\n",
@@ -2482,9 +3311,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 520,
+   "execution_count": 591,
    "id": "2ca34192-3c70-44ec-b6b8-e9d90e1e9e46",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.115637600Z",
+     "start_time": "2024-09-23T20:36:47.502787Z"
+    }
+   },
    "outputs": [],
    "source": [
     "df['status'] = df['status'].apply(pd.to_numeric)\n"
@@ -2492,9 +3326,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 528,
+   "execution_count": 592,
    "id": "51c504b5-84e7-45d6-8536-c960b09b0b4d",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.115637600Z",
+     "start_time": "2024-09-23T20:36:47.786818Z"
+    }
+   },
    "outputs": [
     {
      "data": {
@@ -2528,6 +3367,7 @@
        "      <th>birthyear</th>\n",
        "      <th>S2 titlelist</th>\n",
        "      <th>...</th>\n",
+       "      <th>S2_embeddings</th>\n",
        "      <th>VIAF_embeddings</th>\n",
        "      <th>S2_titlelist</th>\n",
        "      <th>lemma_overlap</th>\n",
@@ -2537,7 +3377,6 @@
        "      <th>mean_embedding</th>\n",
        "      <th>VIAF_birthdate</th>\n",
        "      <th>pub_age</th>\n",
-       "      <th>match?</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
@@ -2554,6 +3393,7 @@
        "      <td>1869</td>\n",
        "      <td>NaN</td>\n",
        "      <td>...</td>\n",
+       "      <td>0.001638</td>\n",
        "      <td>-0.001305</td>\n",
        "      <td>NaN</td>\n",
        "      <td>0</td>\n",
@@ -2563,7 +3403,6 @@
        "      <td>[]</td>\n",
        "      <td>1869</td>\n",
        "      <td>NaN</td>\n",
-       "      <td>0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
@@ -2578,6 +3417,7 @@
        "      <td>1813</td>\n",
        "      <td>NaN</td>\n",
        "      <td>...</td>\n",
+       "      <td>0.001638</td>\n",
        "      <td>-0.000812</td>\n",
        "      <td>NaN</td>\n",
        "      <td>0</td>\n",
@@ -2587,7 +3427,6 @@
        "      <td>[]</td>\n",
        "      <td>1813</td>\n",
        "      <td>NaN</td>\n",
-       "      <td>0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
@@ -2602,6 +3441,7 @@
        "      <td>1859</td>\n",
        "      <td>NaN</td>\n",
        "      <td>...</td>\n",
+       "      <td>0.001638</td>\n",
        "      <td>-0.000511</td>\n",
        "      <td>NaN</td>\n",
        "      <td>0</td>\n",
@@ -2611,7 +3451,6 @@
        "      <td>[]</td>\n",
        "      <td>1859</td>\n",
        "      <td>NaN</td>\n",
-       "      <td>0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
@@ -2626,6 +3465,7 @@
        "      <td>1866</td>\n",
        "      <td>NaN</td>\n",
        "      <td>...</td>\n",
+       "      <td>0.001638</td>\n",
        "      <td>-0.001297</td>\n",
        "      <td>NaN</td>\n",
        "      <td>0</td>\n",
@@ -2635,7 +3475,6 @@
        "      <td>[]</td>\n",
        "      <td>1866</td>\n",
        "      <td>NaN</td>\n",
-       "      <td>0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
@@ -2650,6 +3489,7 @@
        "      <td>1864</td>\n",
        "      <td>NaN</td>\n",
        "      <td>...</td>\n",
+       "      <td>0.001638</td>\n",
        "      <td>-0.001834</td>\n",
        "      <td>NaN</td>\n",
        "      <td>0</td>\n",
@@ -2659,7 +3499,6 @@
        "      <td>[]</td>\n",
        "      <td>1864</td>\n",
        "      <td>NaN</td>\n",
-       "      <td>0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>...</th>\n",
@@ -2698,6 +3537,7 @@
        "      <td>1941</td>\n",
        "      <td>convening and convention in pastoral poetry, t...</td>\n",
        "      <td>...</td>\n",
+       "      <td>-0.000664</td>\n",
        "      <td>-0.001304</td>\n",
        "      <td>convening and convention in pastoral poetry, t...</td>\n",
        "      <td>1</td>\n",
@@ -2707,7 +3547,6 @@
        "      <td>[]</td>\n",
        "      <td>1941</td>\n",
        "      <td>43.375000</td>\n",
-       "      <td>0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>807</th>\n",
@@ -2722,16 +3561,16 @@
        "      <td>1932</td>\n",
        "      <td>convening and convention in pastoral poetry, t...</td>\n",
        "      <td>...</td>\n",
+       "      <td>-0.000664</td>\n",
        "      <td>-0.001322</td>\n",
        "      <td>convening and convention in pastoral poetry, t...</td>\n",
        "      <td>3</td>\n",
-       "      <td>{poetry, pastoral, queene}</td>\n",
+       "      <td>{poetry, queene, pastoral}</td>\n",
        "      <td>0</td>\n",
        "      <td>[]</td>\n",
        "      <td>[]</td>\n",
        "      <td>1932</td>\n",
        "      <td>52.375000</td>\n",
-       "      <td>1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>808</th>\n",
@@ -2746,6 +3585,7 @@
        "      <td>1887</td>\n",
        "      <td>convening and convention in pastoral poetry, t...</td>\n",
        "      <td>...</td>\n",
+       "      <td>-0.000664</td>\n",
        "      <td>-0.001751</td>\n",
        "      <td>convening and convention in pastoral poetry, t...</td>\n",
        "      <td>0</td>\n",
@@ -2755,7 +3595,6 @@
        "      <td>[]</td>\n",
        "      <td>1887</td>\n",
        "      <td>97.375000</td>\n",
-       "      <td>0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>809</th>\n",
@@ -2770,16 +3609,16 @@
        "      <td>1925</td>\n",
        "      <td>criticism in our clime parables of american ac...</td>\n",
        "      <td>...</td>\n",
+       "      <td>-0.000870</td>\n",
        "      <td>-0.001676</td>\n",
        "      <td>criticism in our clime parables of american ac...</td>\n",
        "      <td>5</td>\n",
-       "      <td>{literature, american, perspective, criticism,...</td>\n",
+       "      <td>{american, literature, perspective, postmodern...</td>\n",
        "      <td>0</td>\n",
        "      <td>[]</td>\n",
        "      <td>[]</td>\n",
        "      <td>1925</td>\n",
        "      <td>60.000000</td>\n",
-       "      <td>1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>810</th>\n",
@@ -2794,20 +3633,20 @@
        "      <td>1965</td>\n",
        "      <td>imagination und deixis studien zur wahrnehmung...</td>\n",
        "      <td>...</td>\n",
+       "      <td>-0.001646</td>\n",
        "      <td>-0.001114</td>\n",
        "      <td>imagination und deixis studien zur wahrnehmung...</td>\n",
        "      <td>4</td>\n",
-       "      <td>{german, high, deutschen, und}</td>\n",
+       "      <td>{und, deutschen, high, german}</td>\n",
        "      <td>0</td>\n",
        "      <td>[]</td>\n",
        "      <td>[]</td>\n",
        "      <td>1965</td>\n",
        "      <td>42.923077</td>\n",
-       "      <td>1</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
-       "<p>811 rows × 27 columns</p>\n",
+       "<p>811 rows × 26 columns</p>\n",
        "</div>"
       ],
       "text/plain": [
@@ -2850,62 +3689,75 @@
        "809         (1994, 1971, 1976, 1987, 1986, 1988, 1993)       1925   \n",
        "810  (2008, 2014, 2008, 2006, 2015, 2013, 2004, 200...       1965   \n",
        "\n",
-       "                                          S2 titlelist  ... VIAF_embeddings  \\\n",
-       "0                                                  NaN  ...       -0.001305   \n",
-       "1                                                  NaN  ...       -0.000812   \n",
-       "2                                                  NaN  ...       -0.000511   \n",
-       "3                                                  NaN  ...       -0.001297   \n",
-       "4                                                  NaN  ...       -0.001834   \n",
-       "..                                                 ...  ...             ...   \n",
-       "806  convening and convention in pastoral poetry, t...  ...       -0.001304   \n",
-       "807  convening and convention in pastoral poetry, t...  ...       -0.001322   \n",
-       "808  convening and convention in pastoral poetry, t...  ...       -0.001751   \n",
-       "809  criticism in our clime parables of american ac...  ...       -0.001676   \n",
-       "810  imagination und deixis studien zur wahrnehmung...  ...       -0.001114   \n",
+       "                                          S2 titlelist  ... S2_embeddings  \\\n",
+       "0                                                  NaN  ...      0.001638   \n",
+       "1                                                  NaN  ...      0.001638   \n",
+       "2                                                  NaN  ...      0.001638   \n",
+       "3                                                  NaN  ...      0.001638   \n",
+       "4                                                  NaN  ...      0.001638   \n",
+       "..                                                 ...  ...           ...   \n",
+       "806  convening and convention in pastoral poetry, t...  ...     -0.000664   \n",
+       "807  convening and convention in pastoral poetry, t...  ...     -0.000664   \n",
+       "808  convening and convention in pastoral poetry, t...  ...     -0.000664   \n",
+       "809  criticism in our clime parables of american ac...  ...     -0.000870   \n",
+       "810  imagination und deixis studien zur wahrnehmung...  ...     -0.001646   \n",
        "\n",
-       "                                          S2_titlelist lemma_overlap  \\\n",
-       "0                                                  NaN             0   \n",
-       "1                                                  NaN             0   \n",
-       "2                                                  NaN             0   \n",
-       "3                                                  NaN             0   \n",
-       "4                                                  NaN             0   \n",
-       "..                                                 ...           ...   \n",
-       "806  convening and convention in pastoral poetry, t...             1   \n",
-       "807  convening and convention in pastoral poetry, t...             3   \n",
-       "808  convening and convention in pastoral poetry, t...             0   \n",
-       "809  criticism in our clime parables of american ac...             5   \n",
-       "810  imagination und deixis studien zur wahrnehmung...             4   \n",
+       "    VIAF_embeddings                                       S2_titlelist  \\\n",
+       "0         -0.001305                                                NaN   \n",
+       "1         -0.000812                                                NaN   \n",
+       "2         -0.000511                                                NaN   \n",
+       "3         -0.001297                                                NaN   \n",
+       "4         -0.001834                                                NaN   \n",
+       "..              ...                                                ...   \n",
+       "806       -0.001304  convening and convention in pastoral poetry, t...   \n",
+       "807       -0.001322  convening and convention in pastoral poetry, t...   \n",
+       "808       -0.001751  convening and convention in pastoral poetry, t...   \n",
+       "809       -0.001676  criticism in our clime parables of american ac...   \n",
+       "810       -0.001114  imagination und deixis studien zur wahrnehmung...   \n",
        "\n",
-       "                                    overlapping_lemmas  word_overlap_count  \\\n",
-       "0                                                   {}                   0   \n",
-       "1                                                   {}                   0   \n",
-       "2                                                   {}                   0   \n",
-       "3                                                   {}                   0   \n",
-       "4                                                   {}                   0   \n",
-       "..                                                 ...                 ...   \n",
-       "806                                           {modern}                   0   \n",
-       "807                         {poetry, pastoral, queene}                   0   \n",
-       "808                                                 {}                   0   \n",
-       "809  {literature, american, perspective, criticism,...                   0   \n",
-       "810                     {german, high, deutschen, und}                   0   \n",
+       "     lemma_overlap                                 overlapping_lemmas  \\\n",
+       "0                0                                                 {}   \n",
+       "1                0                                                 {}   \n",
+       "2                0                                                 {}   \n",
+       "3                0                                                 {}   \n",
+       "4                0                                                 {}   \n",
+       "..             ...                                                ...   \n",
+       "806              1                                           {modern}   \n",
+       "807              3                         {poetry, queene, pastoral}   \n",
+       "808              0                                                 {}   \n",
+       "809              5  {american, literature, perspective, postmodern...   \n",
+       "810              4                     {und, deutschen, high, german}   \n",
        "\n",
-       "     overlapping_words  mean_embedding  VIAF_birthdate    pub_age  match?  \n",
-       "0                   []              []            1869        NaN       0  \n",
-       "1                   []              []            1813        NaN       0  \n",
-       "2                   []              []            1859        NaN       0  \n",
-       "3                   []              []            1866        NaN       0  \n",
-       "4                   []              []            1864        NaN       0  \n",
-       "..                 ...             ...             ...        ...     ...  \n",
-       "806                 []              []            1941  43.375000       0  \n",
-       "807                 []              []            1932  52.375000       1  \n",
-       "808                 []              []            1887  97.375000       0  \n",
-       "809                 []              []            1925  60.000000       1  \n",
-       "810                 []              []            1965  42.923077       1  \n",
+       "     word_overlap_count  overlapping_words  mean_embedding VIAF_birthdate  \\\n",
+       "0                     0                 []              []           1869   \n",
+       "1                     0                 []              []           1813   \n",
+       "2                     0                 []              []           1859   \n",
+       "3                     0                 []              []           1866   \n",
+       "4                     0                 []              []           1864   \n",
+       "..                  ...                ...             ...            ...   \n",
+       "806                   0                 []              []           1941   \n",
+       "807                   0                 []              []           1932   \n",
+       "808                   0                 []              []           1887   \n",
+       "809                   0                 []              []           1925   \n",
+       "810                   0                 []              []           1965   \n",
+       "\n",
+       "       pub_age  \n",
+       "0          NaN  \n",
+       "1          NaN  \n",
+       "2          NaN  \n",
+       "3          NaN  \n",
+       "4          NaN  \n",
+       "..         ...  \n",
+       "806  43.375000  \n",
+       "807  52.375000  \n",
+       "808  97.375000  \n",
+       "809  60.000000  \n",
+       "810  42.923077  \n",
        "\n",
-       "[811 rows x 27 columns]"
+       "[811 rows x 26 columns]"
       ]
      },
-     "execution_count": 528,
+     "execution_count": 592,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -2916,9 +3768,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 522,
+   "execution_count": 593,
    "id": "c30c9255-4cda-48e8-8c0c-8fe2e947746e",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.116638400Z",
+     "start_time": "2024-09-23T20:36:48.095119Z"
+    }
+   },
    "outputs": [
     {
      "data": {
@@ -3293,7 +4150,7 @@
        "[811 rows x 18 columns]"
       ]
      },
-     "execution_count": 522,
+     "execution_count": 593,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -3304,9 +4161,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 523,
+   "execution_count": 594,
    "id": "4d6abe89-4332-4a07-8035-8a0f985edd4a",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.116638400Z",
+     "start_time": "2024-09-23T20:36:48.592976Z"
+    }
+   },
    "outputs": [],
    "source": [
     "#in this case, I had done the true labels by hand, so let's add them in here\n",
@@ -3316,9 +4178,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 525,
+   "execution_count": 595,
    "id": "fa45e3f3-3132-40d3-a7e0-5351541d08a8",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.116638400Z",
+     "start_time": "2024-09-23T20:36:49.598399Z"
+    }
+   },
    "outputs": [],
    "source": [
     "import pandas as pd\n",
@@ -3330,7 +4197,9 @@
     "import matplotlib.pyplot as plt\n",
     "\n",
     "\n",
-    "X = df.drop(columns=['author','VIAF_titlelist','S2_titlelist','overlapping_words','selected_birthyear','overlapping_lemmas'])  # Drop the label and metadata columns\n",
+    "# X = df.drop(columns=['author','VIAF_titlelist','S2_titlelist','overlapping_words','selected_birthyear','overlapping_lemmas','mean_embedding','matched_title?','match','match?','title_list','record_enumerated_titles','S2titles','matched_title_list','normalized_author','common_words','S2_Author','notes','S2_pubdates','S2_Titlelist','selected_birthyear'])  # Drop the label and metadata columns\n",
+    "\n",
+    "X = df.drop(columns=['author','VIAF_titlelist','S2_titlelist','overlapping_words','selected_birthyear','overlapping_lemmas','mean_embedding','match?','S2_pubdates','selected_birthyear','negative_status', 'S2 titlelist'])\n",
     "y = df['match?']\n",
     "\n",
     "# Optional: If you want to split into training and test sets first\n",
@@ -3341,9 +4210,29 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 527,
+   "execution_count": 596,
+   "id": "647ab0121bbaabd9",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.117638200Z",
+     "start_time": "2024-09-23T20:36:50.318033Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    " # df[['birthdate','standard_birthdate','VIAF_birthdate']]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 597,
    "id": "5e4e637e-2023-4805-94f3-cf9e268c2d95",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.117638200Z",
+     "start_time": "2024-09-23T20:36:50.822080Z"
+    }
+   },
    "outputs": [
     {
      "name": "stdout",
@@ -3355,12 +4244,9 @@
       "abs_birth2maxdate      object\n",
       "birth2mindate          object\n",
       "abs_birth2mindate      object\n",
-      "negative_status        object\n",
       "title_length            int64\n",
       "author_length           int64\n",
-      "S2_pubdates            object\n",
       "birthyear               int64\n",
-      "S2 titlelist           object\n",
       "avg_pubdate           float64\n",
       "publication_age       float64\n",
       "status                  int64\n",
@@ -3368,10 +4254,8 @@
       "VIAF_embeddings       float32\n",
       "lemma_overlap           int64\n",
       "word_overlap_count      int64\n",
-      "mean_embedding         object\n",
       "VIAF_birthdate          int64\n",
       "pub_age               float64\n",
-      "match?                  int64\n",
       "dtype: object\n",
       "\n",
       "Data types in y_train:\n",
@@ -3389,9 +4273,533 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 526,
+   "execution_count": 598,
+   "id": "623ab00f7d171c29",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.117638200Z",
+     "start_time": "2024-09-23T20:36:50.888156Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "\n",
+    "\n",
+    "\n",
+    "X['birth2mindate'] = pd.to_numeric(X['birth2mindate'], errors= 'coerce')\n",
+    "X['birth2maxdate'] = pd.to_numeric(X['birth2maxdate'], errors= 'coerce')\n",
+    "\n",
+    "X['abs_birth2mindate'] = pd.to_numeric(X['abs_birth2mindate'], errors= 'coerce')\n",
+    "\n",
+    "X['abs_birth2maxdate'] = pd.to_numeric(X['abs_birth2maxdate'], errors= 'coerce')\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 599,
+   "id": "941150ea65754182",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.117638200Z",
+     "start_time": "2024-09-23T20:36:51.117997Z"
+    }
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "0     NaN\n",
+       "1     NaN\n",
+       "2     NaN\n",
+       "3     NaN\n",
+       "4     NaN\n",
+       "       ..\n",
+       "806   NaN\n",
+       "807   NaN\n",
+       "808   NaN\n",
+       "809   NaN\n",
+       "810   NaN\n",
+       "Name: birth2mindate, Length: 811, dtype: float64"
+      ]
+     },
+     "execution_count": 599,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "pd.to_numeric(X['birth2mindate'], errors= 'coerce')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 600,
+   "id": "74629a60269d999c",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.117638200Z",
+     "start_time": "2024-09-23T20:36:51.398399Z"
+    }
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "0     NaN\n",
+       "1     NaN\n",
+       "2     NaN\n",
+       "3     NaN\n",
+       "4     NaN\n",
+       "       ..\n",
+       "806   NaN\n",
+       "807   NaN\n",
+       "808   NaN\n",
+       "809   NaN\n",
+       "810   NaN\n",
+       "Name: birth2mindate, Length: 811, dtype: float64"
+      ]
+     },
+     "execution_count": 600,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "pd.to_numeric(X['birth2mindate'], errors= 'coerce')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 601,
+   "id": "ff375e44f3769750",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.117638200Z",
+     "start_time": "2024-09-23T20:36:51.543810Z"
+    }
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "     birth2maxdate  abs_birth2maxdate  birth2mindate  abs_birth2mindate  \\\n",
+      "0              NaN                NaN            NaN                NaN   \n",
+      "1              NaN                NaN            NaN                NaN   \n",
+      "2              NaN                NaN            NaN                NaN   \n",
+      "3              NaN                NaN            NaN                NaN   \n",
+      "4              NaN                NaN            NaN                NaN   \n",
+      "..             ...                ...            ...                ...   \n",
+      "806            NaN                NaN            NaN                NaN   \n",
+      "807            NaN                NaN            NaN                NaN   \n",
+      "808            NaN                NaN            NaN                NaN   \n",
+      "809            NaN                NaN            NaN                NaN   \n",
+      "810            NaN                NaN            NaN                NaN   \n",
+      "\n",
+      "     title_length  author_length  birthyear  avg_pubdate  publication_age  \\\n",
+      "0               0              3       1869          NaN              NaN   \n",
+      "1               0              3       1813          NaN              NaN   \n",
+      "2               0              3       1859          NaN              NaN   \n",
+      "3               0              3       1866          NaN              NaN   \n",
+      "4               0              3       1864          NaN              NaN   \n",
+      "..            ...            ...        ...          ...              ...   \n",
+      "806             0             11       1941  1984.375000        43.375000   \n",
+      "807             0             11       1932  1984.375000        52.375000   \n",
+      "808             0             11       1887  1984.375000        97.375000   \n",
+      "809             0             11       1925  1985.000000        60.000000   \n",
+      "810             0             15       1965  2007.923077        42.923077   \n",
+      "\n",
+      "     status  S2_embeddings  VIAF_embeddings  lemma_overlap  \\\n",
+      "0         0       0.001638        -0.001305              0   \n",
+      "1         0       0.001638        -0.000812              0   \n",
+      "2         0       0.001638        -0.000511              0   \n",
+      "3         0       0.001638        -0.001297              0   \n",
+      "4         0       0.001638        -0.001834              0   \n",
+      "..      ...            ...              ...            ...   \n",
+      "806       0      -0.000664        -0.001304              1   \n",
+      "807       0      -0.000664        -0.001322              3   \n",
+      "808       0      -0.000664        -0.001751              0   \n",
+      "809       0      -0.000870        -0.001676              5   \n",
+      "810       0      -0.001646        -0.001114              4   \n",
+      "\n",
+      "     word_overlap_count  VIAF_birthdate    pub_age  \n",
+      "0                     0            1869        NaN  \n",
+      "1                     0            1813        NaN  \n",
+      "2                     0            1859        NaN  \n",
+      "3                     0            1866        NaN  \n",
+      "4                     0            1864        NaN  \n",
+      "..                  ...             ...        ...  \n",
+      "806                   0            1941  43.375000  \n",
+      "807                   0            1932  52.375000  \n",
+      "808                   0            1887  97.375000  \n",
+      "809                   0            1925  60.000000  \n",
+      "810                   0            1965  42.923077  \n",
+      "\n",
+      "[811 rows x 16 columns]\n"
+     ]
+    }
+   ],
+   "source": [
+    "print(X)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 602,
+   "id": "114cfde3be9d2f23",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.118637500Z",
+     "start_time": "2024-09-23T20:36:51.686457Z"
+    }
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "\n",
+      "Data types in X:\n",
+      "birth2maxdate         float64\n",
+      "abs_birth2maxdate     float64\n",
+      "birth2mindate         float64\n",
+      "abs_birth2mindate     float64\n",
+      "title_length            int64\n",
+      "author_length           int64\n",
+      "birthyear               int64\n",
+      "avg_pubdate           float64\n",
+      "publication_age       float64\n",
+      "status                  int64\n",
+      "S2_embeddings         float32\n",
+      "VIAF_embeddings       float32\n",
+      "lemma_overlap           int64\n",
+      "word_overlap_count      int64\n",
+      "VIAF_birthdate          int64\n",
+      "pub_age               float64\n",
+      "dtype: object\n",
+      "\n",
+      "Data types in y:\n",
+      "int64\n"
+     ]
+    }
+   ],
+   "source": [
+    "# For DataFrames and Series, you can also check the data types of columns\n",
+    "print(\"\\nData types in X:\")\n",
+    "print(X.dtypes)\n",
+    "print(\"\\nData types in y:\")\n",
+    "print(y.dtype)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 603,
+   "id": "ba0f1e8ef110c875",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.118637500Z",
+     "start_time": "2024-09-23T20:36:51.834486Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "#filter methods of feature selection\n",
+    "#correlations\n",
+    "corr_matrix = X.corr()  # Default is Pearson correlation\n",
+    "\n",
+    "\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 604,
+   "id": "53ef66a09afd3385",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.118637500Z",
+     "start_time": "2024-09-23T20:36:52.163043Z"
+    }
+   },
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 1000x800 with 2 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "plt.figure(figsize=(10, 8))  # Set the figure size\n",
+    "sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)\n",
+    "plt.title('Correlation Heatmap')\n",
+    "plt.show()\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 605,
+   "id": "47e60e31a9ba254",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.118637500Z",
+     "start_time": "2024-09-23T20:36:53.320154Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "# #coefficents\n",
+    "# print(model.intercept_,model.coef_)\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 606,
+   "id": "3de107cfbc3e72e0",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.118637500Z",
+     "start_time": "2024-09-23T20:36:53.575294Z"
+    }
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "pandas.core.frame.DataFrame"
+      ]
+     },
+     "execution_count": 606,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "type(X)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 607,
+   "id": "b2eebfb9161de184",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.118637500Z",
+     "start_time": "2024-09-23T20:36:54.336325Z"
+    }
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "birth2maxdate         float64\n",
+       "abs_birth2maxdate     float64\n",
+       "birth2mindate         float64\n",
+       "abs_birth2mindate     float64\n",
+       "title_length            int64\n",
+       "author_length           int64\n",
+       "birthyear               int64\n",
+       "avg_pubdate           float64\n",
+       "publication_age       float64\n",
+       "status                  int64\n",
+       "S2_embeddings         float32\n",
+       "VIAF_embeddings       float32\n",
+       "lemma_overlap           int64\n",
+       "word_overlap_count      int64\n",
+       "VIAF_birthdate          int64\n",
+       "pub_age               float64\n",
+       "dtype: object"
+      ]
+     },
+     "execution_count": 607,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "X.dtypes\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 610,
+   "id": "3984257e3f18e706",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.119637800Z",
+     "start_time": "2024-09-23T22:38:40.812055Z"
+    }
+   },
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/feature_selection/_variance_threshold.py:112: RuntimeWarning: Degrees of freedom <= 0 for slice.\n",
+      "  self.variances_ = np.nanvar(X, axis=0)\n"
+     ]
+    },
+    {
+     "ename": "IndexError",
+     "evalue": "boolean index did not match indexed array along dimension 0; dimension is 27 but corresponding boolean dimension is 16",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[0;31mIndexError\u001B[0m                                Traceback (most recent call last)",
+      "Cell \u001B[0;32mIn[610], line 15\u001B[0m\n\u001B[1;32m     12\u001B[0m X_reduced \u001B[38;5;241m=\u001B[39m selector\u001B[38;5;241m.\u001B[39mfit_transform(X)\n\u001B[1;32m     14\u001B[0m \u001B[38;5;66;03m# Get the names of the remaining features\u001B[39;00m\n\u001B[0;32m---> 15\u001B[0m remaining_features \u001B[38;5;241m=\u001B[39m \u001B[43mdf\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mcolumns\u001B[49m\u001B[43m[\u001B[49m\u001B[43mselector\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mget_support\u001B[49m\u001B[43m(\u001B[49m\u001B[43m)\u001B[49m\u001B[43m]\u001B[49m\n\u001B[1;32m     17\u001B[0m \u001B[38;5;66;03m# Convert the reduced data back to a DataFrame with the selected features\u001B[39;00m\n\u001B[1;32m     18\u001B[0m df_reduced \u001B[38;5;241m=\u001B[39m pd\u001B[38;5;241m.\u001B[39mDataFrame(X_reduced, columns\u001B[38;5;241m=\u001B[39mremaining_features)\n",
+      "File \u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/indexes/base.py:5416\u001B[0m, in \u001B[0;36mIndex.__getitem__\u001B[0;34m(self, key)\u001B[0m\n\u001B[1;32m   5407\u001B[0m         \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mlen\u001B[39m(key) \u001B[38;5;241m==\u001B[39m \u001B[38;5;241m0\u001B[39m \u001B[38;5;129;01mand\u001B[39;00m \u001B[38;5;28mlen\u001B[39m(key) \u001B[38;5;241m!=\u001B[39m \u001B[38;5;28mlen\u001B[39m(\u001B[38;5;28mself\u001B[39m):\n\u001B[1;32m   5408\u001B[0m             warnings\u001B[38;5;241m.\u001B[39mwarn(\n\u001B[1;32m   5409\u001B[0m                 \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mUsing a boolean indexer with length 0 on an Index with \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m   5410\u001B[0m                 \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mlength greater than 0 is deprecated and will raise in a \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m   5413\u001B[0m                 stacklevel\u001B[38;5;241m=\u001B[39mfind_stack_level(),\n\u001B[1;32m   5414\u001B[0m             )\n\u001B[0;32m-> 5416\u001B[0m result \u001B[38;5;241m=\u001B[39m \u001B[43mgetitem\u001B[49m\u001B[43m(\u001B[49m\u001B[43mkey\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   5417\u001B[0m \u001B[38;5;66;03m# Because we ruled out integer above, we always get an arraylike here\u001B[39;00m\n\u001B[1;32m   5418\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m result\u001B[38;5;241m.\u001B[39mndim \u001B[38;5;241m>\u001B[39m \u001B[38;5;241m1\u001B[39m:\n",
+      "\u001B[0;31mIndexError\u001B[0m: boolean index did not match indexed array along dimension 0; dimension is 27 but corresponding boolean dimension is 16"
+     ]
+    }
+   ],
+   "source": [
+    "#threshold variance\n",
+    "import pandas as pd\n",
+    "from sklearn.feature_selection import VarianceThreshold\n",
+    "\n",
+    "# Convert DataFrame to NumPy array\n",
+    "# X = X.values\n",
+    "# Initialize VarianceThreshold, threshold can be customized (e.g., 0.1 or 0.5)\n",
+    "threshold = 0.1\n",
+    "selector = VarianceThreshold(threshold=threshold)\n",
+    "\n",
+    "# Apply the variance threshold\n",
+    "X_reduced = selector.fit_transform(X)\n",
+    "\n",
+    "# Get the names of the remaining features\n",
+    "remaining_features = df.columns[selector.get_support()]\n",
+    "\n",
+    "# Convert the reduced data back to a DataFrame with the selected features\n",
+    "df_reduced = pd.DataFrame(X_reduced, columns=remaining_features)\n",
+    "\n",
+    "print(\"Original Features:\\n\", df)\n",
+    "print(\"\\nSelected Features (with variance threshold = {}):\\n\".format(threshold), df_reduced)\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 470,
    "id": "814afd58-aaa1-4a86-a3ad-97eb4822dadb",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.119637800Z",
+     "start_time": "2024-09-23T20:08:15.063118Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "# Initialize the Random Forest model\n",
+    "model = RandomForestClassifier(n_estimators=100, random_state=42, class_weight='balanced_subsample')\n",
+    "\n",
+    "# Perform cross-validation\n",
+    "# model = RandomForestClassifier()\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 546,
+   "id": "1bbde4d8be12052a",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.119637800Z",
+     "start_time": "2024-09-23T20:29:17.608622Z"
+    }
+   },
+   "outputs": [
+    {
+     "ename": "ModuleNotFoundError",
+     "evalue": "No module named 'statsmodels'",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[0;31mModuleNotFoundError\u001B[0m                       Traceback (most recent call last)",
+      "Cell \u001B[0;32mIn[546], line 3\u001B[0m\n\u001B[1;32m      1\u001B[0m \u001B[38;5;28;01mimport\u001B[39;00m \u001B[38;5;21;01mpandas\u001B[39;00m \u001B[38;5;28;01mas\u001B[39;00m \u001B[38;5;21;01mpd\u001B[39;00m\n\u001B[1;32m      2\u001B[0m \u001B[38;5;28;01mimport\u001B[39;00m \u001B[38;5;21;01mnumpy\u001B[39;00m \u001B[38;5;28;01mas\u001B[39;00m \u001B[38;5;21;01mnp\u001B[39;00m\n\u001B[0;32m----> 3\u001B[0m \u001B[38;5;28;01mimport\u001B[39;00m \u001B[38;5;21;01mstatsmodels\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mapi\u001B[39;00m \u001B[38;5;28;01mas\u001B[39;00m \u001B[38;5;21;01msm\u001B[39;00m\n\u001B[1;32m      4\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01msklearn\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mdatasets\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m make_regression\n\u001B[1;32m      6\u001B[0m \u001B[38;5;66;03m# Create a sample dataset (or load your dataset)\u001B[39;00m\n",
+      "\u001B[0;31mModuleNotFoundError\u001B[0m: No module named 'statsmodels'"
+     ]
+    }
+   ],
+   "source": [
+    "import pandas as pd\n",
+    "import numpy as np\n",
+    "import statsmodels.api as sm\n",
+    "from sklearn.datasets import make_regression\n",
+    "\n",
+    "# Create a sample dataset (or load your dataset)\n",
+    "X, y = make_regression(n_samples=100, n_features=10, noise=0.1)\n",
+    "df = pd.DataFrame(X, columns=[f'Feature_{i}' for i in range(X.shape[1])])\n",
+    "df['Target'] = y\n",
+    "\n",
+    "# Forward Selection Function\n",
+    "def forward_selection(data, target):\n",
+    "    initial_features = []\n",
+    "    best_features = initial_features.copy()\n",
+    "    while True:\n",
+    "        remaining_features = list(set(data.columns) - set(best_features))\n",
+    "        best_pval = float('inf')\n",
+    "        best_feature = None\n",
+    "        \n",
+    "        for feature in remaining_features:\n",
+    "            model = sm.OLS(data[target], sm.add_constant(data[best_features + [feature]])).fit()\n",
+    "            pval = model.pvalues[feature]\n",
+    "            if pval < best_pval:\n",
+    "                best_pval = pval\n",
+    "                best_feature = feature\n",
+    "                \n",
+    "        if best_pval < 0.05:  # Adjust p-value threshold as needed\n",
+    "            best_features.append(best_feature)\n",
+    "        else:\n",
+    "            break\n",
+    "            \n",
+    "    return best_features\n",
+    "\n",
+    "# Backward Selection Function\n",
+    "def backward_selection(data, target):\n",
+    "    features = data.columns.tolist()\n",
+    "    while True:\n",
+    "        model = sm.OLS(data[target], sm.add_constant(data[features])).fit()\n",
+    "        pvals = model.pvalues.iloc[1:]  # Exclude the intercept\n",
+    "        worst_pval = pvals.max()\n",
+    "        \n",
+    "        if worst_pval >= 0.05:  # Adjust p-value threshold as needed\n",
+    "            worst_feature = pvals.idxmax()\n",
+    "            features.remove(worst_feature)\n",
+    "        else:\n",
+    "            break\n",
+    "            \n",
+    "    return features\n",
+    "\n",
+    "# Applying Forward Selection\n",
+    "forward_selected_features = forward_selection(df.drop(columns='Target'), 'Target')\n",
+    "print(\"Forward Selected Features:\", forward_selected_features)\n",
+    "\n",
+    "# Applying Backward Selection\n",
+    "backward_selected_features = backward_selection(df.drop(columns='Target'), 'Target')\n",
+    "print(\"Backward Selected Features:\", backward_selected_features)\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "73ea843cfbcbefa2",
    "metadata": {},
+   "outputs": [],
+   "source": [
+    "#forward and backwards selectio nmethods "
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 471,
+   "id": "ca884c92-4fe1-4d3c-9c5f-e95c9fa3bfac",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.119637800Z",
+     "start_time": "2024-09-23T20:08:17.311679Z"
+    }
+   },
    "outputs": [
     {
      "ename": "ValueError",
@@ -3403,31 +4811,162 @@
       "\u001B[0;31mTypeError\u001B[0m: float() argument must be a string or a real number, not 'tuple'",
       "\nThe above exception was the direct cause of the following exception:\n",
       "\u001B[0;31mValueError\u001B[0m                                Traceback (most recent call last)",
-      "\u001B[0;32m/var/folders/b7/sfhbbfm5637g6g4dl2gs5bjw0000gn/T/ipykernel_13452/4207874261.py\u001B[0m in \u001B[0;36m?\u001B[0;34m()\u001B[0m\n\u001B[1;32m      2\u001B[0m \u001B[0mmodel\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mRandomForestClassifier\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mn_estimators\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;36m100\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mrandom_state\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;36m42\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      3\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      4\u001B[0m \u001B[0;31m# Perform cross-validation\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      5\u001B[0m \u001B[0mmodel\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mRandomForestClassifier\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m----> 6\u001B[0;31m \u001B[0my_pred_proba\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mcross_val_predict\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mmodel\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mX\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0my\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mcv\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;36m5\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mmethod\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;34m'predict_proba'\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m      7\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      8\u001B[0m \u001B[0;31m# Store predictions with original indices\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      9\u001B[0m \u001B[0mpredictions_df\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mpd\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mDataFrame\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0my_pred_proba\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mindex\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0moriginal_indices\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mcolumns\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0;34m'Class_0_Proba'\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m'Class_1_Proba'\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/_param_validation.py\u001B[0m in \u001B[0;36m?\u001B[0;34m(*args, **kwargs)\u001B[0m\n\u001B[1;32m    210\u001B[0m                         \u001B[0mprefer_skip_nested_validation\u001B[0m \u001B[0;32mor\u001B[0m \u001B[0mglobal_skip_validation\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    211\u001B[0m                     \u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    212\u001B[0m                 \u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    213\u001B[0m                     \u001B[0;32mreturn\u001B[0m \u001B[0mfunc\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m*\u001B[0m\u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mkwargs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 214\u001B[0;31m             \u001B[0;32mexcept\u001B[0m \u001B[0mInvalidParameterError\u001B[0m \u001B[0;32mas\u001B[0m \u001B[0me\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    215\u001B[0m                 \u001B[0;31m# When the function is just a wrapper around an estimator, we allow\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    216\u001B[0m                 \u001B[0;31m# the function to delegate validation to the estimator, but we replace\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    217\u001B[0m                 \u001B[0;31m# the name of the estimator by the name of the function in the error\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/model_selection/_validation.py\u001B[0m in \u001B[0;36m?\u001B[0;34m(estimator, X, y, groups, cv, n_jobs, verbose, fit_params, params, pre_dispatch, method)\u001B[0m\n\u001B[1;32m   1278\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1279\u001B[0m     \u001B[0;31m# We clone the estimator to make sure that all the folds are\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1280\u001B[0m     \u001B[0;31m# independent, and that it is pickle-able.\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1281\u001B[0m     \u001B[0mparallel\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mParallel\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mn_jobs\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mn_jobs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mverbose\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mverbose\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mpre_dispatch\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mpre_dispatch\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 1282\u001B[0;31m     predictions = parallel(\n\u001B[0m\u001B[1;32m   1283\u001B[0m         delayed(_fit_and_predict)(\n\u001B[1;32m   1284\u001B[0m             \u001B[0mclone\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mestimator\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1285\u001B[0m             \u001B[0mX\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/parallel.py\u001B[0m in \u001B[0;36m?\u001B[0;34m(self, iterable)\u001B[0m\n\u001B[1;32m     70\u001B[0m         iterable_with_config = (\n\u001B[1;32m     71\u001B[0m             \u001B[0;34m(\u001B[0m\u001B[0m_with_config\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mdelayed_func\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mconfig\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mkwargs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     72\u001B[0m             \u001B[0;32mfor\u001B[0m \u001B[0mdelayed_func\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mkwargs\u001B[0m \u001B[0;32min\u001B[0m \u001B[0miterable\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     73\u001B[0m         \u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m---> 74\u001B[0;31m         \u001B[0;32mreturn\u001B[0m \u001B[0msuper\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m__call__\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0miterable_with_config\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m",
-      "\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/joblib/parallel.py\u001B[0m in \u001B[0;36m?\u001B[0;34m(self, iterable)\u001B[0m\n\u001B[1;32m   1914\u001B[0m             \u001B[0;31m# If n_jobs==1, run the computation sequentially and return\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1915\u001B[0m             \u001B[0;31m# immediately to avoid overheads.\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1916\u001B[0m             \u001B[0moutput\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_get_sequential_output\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0miterable\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1917\u001B[0m             \u001B[0mnext\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0moutput\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 1918\u001B[0;31m             \u001B[0;32mreturn\u001B[0m \u001B[0moutput\u001B[0m \u001B[0;32mif\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mreturn_generator\u001B[0m \u001B[0;32melse\u001B[0m \u001B[0mlist\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0moutput\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   1919\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1920\u001B[0m         \u001B[0;31m# Let's create an ID that uniquely identifies the current call. If the\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1921\u001B[0m         \u001B[0;31m# call is interrupted early and that the same instance is immediately\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/joblib/parallel.py\u001B[0m in \u001B[0;36m?\u001B[0;34m(self, iterable)\u001B[0m\n\u001B[1;32m   1857\u001B[0m         \u001B[0;32mfinally\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1858\u001B[0m             \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mprint_progress\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1859\u001B[0m             \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_running\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0;32mFalse\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1860\u001B[0m             \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_iterating\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0;32mFalse\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 1861\u001B[0;31m             \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_original_iterator\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0;32mNone\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m",
-      "\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/parallel.py\u001B[0m in \u001B[0;36m?\u001B[0;34m(self, *args, **kwargs)\u001B[0m\n\u001B[1;32m    132\u001B[0m                 \u001B[0mUserWarning\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    133\u001B[0m             \u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    134\u001B[0m             \u001B[0mconfig\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0;34m{\u001B[0m\u001B[0;34m}\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    135\u001B[0m         \u001B[0;32mwith\u001B[0m \u001B[0mconfig_context\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m**\u001B[0m\u001B[0mconfig\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 136\u001B[0;31m             \u001B[0;32mreturn\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mfunction\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m*\u001B[0m\u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mkwargs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m",
-      "\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/model_selection/_validation.py\u001B[0m in \u001B[0;36m?\u001B[0;34m(estimator, X, y, train, test, fit_params, method)\u001B[0m\n\u001B[1;32m   1363\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1364\u001B[0m     \u001B[0;32mif\u001B[0m \u001B[0my_train\u001B[0m \u001B[0;32mis\u001B[0m \u001B[0;32mNone\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1365\u001B[0m         \u001B[0mestimator\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mfit\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mX_train\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mfit_params\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1366\u001B[0m     \u001B[0;32melse\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 1367\u001B[0;31m         \u001B[0mestimator\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mfit\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mX_train\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0my_train\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mfit_params\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   1368\u001B[0m     \u001B[0mfunc\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mgetattr\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mestimator\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mmethod\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1369\u001B[0m     \u001B[0mpredictions\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mfunc\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mX_test\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1370\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/base.py\u001B[0m in \u001B[0;36m?\u001B[0;34m(estimator, *args, **kwargs)\u001B[0m\n\u001B[1;32m   1469\u001B[0m                 skip_parameter_validation=(\n\u001B[1;32m   1470\u001B[0m                     \u001B[0mprefer_skip_nested_validation\u001B[0m \u001B[0;32mor\u001B[0m \u001B[0mglobal_skip_validation\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1471\u001B[0m                 \u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1472\u001B[0m             \u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 1473\u001B[0;31m                 \u001B[0;32mreturn\u001B[0m \u001B[0mfit_method\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mestimator\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m*\u001B[0m\u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mkwargs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m",
-      "\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/ensemble/_forest.py\u001B[0m in \u001B[0;36m?\u001B[0;34m(self, X, y, sample_weight)\u001B[0m\n\u001B[1;32m    359\u001B[0m         \u001B[0;31m# Validate or convert input data\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    360\u001B[0m         \u001B[0;32mif\u001B[0m \u001B[0missparse\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0my\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    361\u001B[0m             \u001B[0;32mraise\u001B[0m \u001B[0mValueError\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m\"sparse multilabel-indicator for y is not supported.\"\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    362\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 363\u001B[0;31m         X, y = self._validate_data(\n\u001B[0m\u001B[1;32m    364\u001B[0m             \u001B[0mX\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    365\u001B[0m             \u001B[0my\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    366\u001B[0m             \u001B[0mmulti_output\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;32mTrue\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/base.py\u001B[0m in \u001B[0;36m?\u001B[0;34m(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)\u001B[0m\n\u001B[1;32m    646\u001B[0m                 \u001B[0;32mif\u001B[0m \u001B[0;34m\"estimator\"\u001B[0m \u001B[0;32mnot\u001B[0m \u001B[0;32min\u001B[0m \u001B[0mcheck_y_params\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    647\u001B[0m                     \u001B[0mcheck_y_params\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0;34m{\u001B[0m\u001B[0;34m**\u001B[0m\u001B[0mdefault_check_params\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mcheck_y_params\u001B[0m\u001B[0;34m}\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    648\u001B[0m                 \u001B[0my\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mcheck_array\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0my\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0minput_name\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;34m\"y\"\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mcheck_y_params\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    649\u001B[0m             \u001B[0;32melse\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 650\u001B[0;31m                 \u001B[0mX\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0my\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mcheck_X_y\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mX\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0my\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mcheck_params\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    651\u001B[0m             \u001B[0mout\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mX\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0my\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    652\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    653\u001B[0m         \u001B[0;32mif\u001B[0m \u001B[0;32mnot\u001B[0m \u001B[0mno_val_X\u001B[0m \u001B[0;32mand\u001B[0m \u001B[0mcheck_params\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mget\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m\"ensure_2d\"\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;32mTrue\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/validation.py\u001B[0m in \u001B[0;36m?\u001B[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001B[0m\n\u001B[1;32m   1297\u001B[0m         raise ValueError(\n\u001B[1;32m   1298\u001B[0m             \u001B[0;34mf\"\u001B[0m\u001B[0;34m{\u001B[0m\u001B[0mestimator_name\u001B[0m\u001B[0;34m}\u001B[0m\u001B[0;34m requires y to be passed, but the target y is None\u001B[0m\u001B[0;34m\"\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1299\u001B[0m         \u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1300\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 1301\u001B[0;31m     X = check_array(\n\u001B[0m\u001B[1;32m   1302\u001B[0m         \u001B[0mX\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1303\u001B[0m         \u001B[0maccept_sparse\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0maccept_sparse\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1304\u001B[0m         \u001B[0maccept_large_sparse\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0maccept_large_sparse\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/validation.py\u001B[0m in \u001B[0;36m?\u001B[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001B[0m\n\u001B[1;32m   1009\u001B[0m                         \u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1010\u001B[0m                     \u001B[0marray\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mxp\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mastype\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0marray\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mdtype\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mcopy\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;32mFalse\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1011\u001B[0m                 \u001B[0;32melse\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1012\u001B[0m                     \u001B[0marray\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0m_asarray_with_order\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0marray\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0morder\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0morder\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mdtype\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mdtype\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mxp\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mxp\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 1013\u001B[0;31m             \u001B[0;32mexcept\u001B[0m \u001B[0mComplexWarning\u001B[0m \u001B[0;32mas\u001B[0m \u001B[0mcomplex_warning\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   1014\u001B[0m                 raise ValueError(\n\u001B[1;32m   1015\u001B[0m                     \u001B[0;34m\"Complex data not supported\\n{}\\n\"\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mformat\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0marray\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1016\u001B[0m                 \u001B[0;34m)\u001B[0m \u001B[0;32mfrom\u001B[0m \u001B[0mcomplex_warning\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/_array_api.py\u001B[0m in \u001B[0;36m?\u001B[0;34m(array, dtype, order, copy, xp, device)\u001B[0m\n\u001B[1;32m    747\u001B[0m         \u001B[0;31m# Use NumPy API to support order\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    748\u001B[0m         \u001B[0;32mif\u001B[0m \u001B[0mcopy\u001B[0m \u001B[0;32mis\u001B[0m \u001B[0;32mTrue\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    749\u001B[0m             \u001B[0marray\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mnumpy\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0marray\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0marray\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0morder\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0morder\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mdtype\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mdtype\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    750\u001B[0m         \u001B[0;32melse\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 751\u001B[0;31m             \u001B[0marray\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mnumpy\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0masarray\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0marray\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0morder\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0morder\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mdtype\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mdtype\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    752\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    753\u001B[0m         \u001B[0;31m# At this point array is a NumPy ndarray. We convert it to an array\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    754\u001B[0m         \u001B[0;31m# container that is consistent with the input's namespace.\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
-      "\u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/generic.py\u001B[0m in \u001B[0;36m?\u001B[0;34m(self, dtype, copy)\u001B[0m\n\u001B[1;32m   2149\u001B[0m     def __array__(\n\u001B[1;32m   2150\u001B[0m         \u001B[0mself\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mdtype\u001B[0m\u001B[0;34m:\u001B[0m \u001B[0mnpt\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mDTypeLike\u001B[0m \u001B[0;34m|\u001B[0m \u001B[0;32mNone\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0;32mNone\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mcopy\u001B[0m\u001B[0;34m:\u001B[0m \u001B[0mbool_t\u001B[0m \u001B[0;34m|\u001B[0m \u001B[0;32mNone\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0;32mNone\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   2151\u001B[0m     \u001B[0;34m)\u001B[0m \u001B[0;34m->\u001B[0m \u001B[0mnp\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mndarray\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   2152\u001B[0m         \u001B[0mvalues\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_values\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 2153\u001B[0;31m         \u001B[0marr\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mnp\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0masarray\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mvalues\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mdtype\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mdtype\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   2154\u001B[0m         if (\n\u001B[1;32m   2155\u001B[0m             \u001B[0mastype_is_view\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mvalues\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mdtype\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0marr\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mdtype\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   2156\u001B[0m             \u001B[0;32mand\u001B[0m \u001B[0musing_copy_on_write\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
+      "Cell \u001B[0;32mIn[471], line 1\u001B[0m\n\u001B[0;32m----> 1\u001B[0m y_pred_proba \u001B[38;5;241m=\u001B[39m \u001B[43mcross_val_predict\u001B[49m\u001B[43m(\u001B[49m\u001B[43mmodel\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mX\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43my\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mcv\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;241;43m5\u001B[39;49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mmethod\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43mpredict_proba\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m)\u001B[49m\n\u001B[1;32m      3\u001B[0m \u001B[38;5;66;03m# Store predictions with original indices\u001B[39;00m\n\u001B[1;32m      4\u001B[0m predictions_df \u001B[38;5;241m=\u001B[39m pd\u001B[38;5;241m.\u001B[39mDataFrame(y_pred_proba, index\u001B[38;5;241m=\u001B[39moriginal_indices, columns\u001B[38;5;241m=\u001B[39m[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mClass_0_Proba\u001B[39m\u001B[38;5;124m'\u001B[39m, \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mClass_1_Proba\u001B[39m\u001B[38;5;124m'\u001B[39m])\n",
+      "File \u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/_param_validation.py:213\u001B[0m, in \u001B[0;36mvalidate_params.<locals>.decorator.<locals>.wrapper\u001B[0;34m(*args, **kwargs)\u001B[0m\n\u001B[1;32m    207\u001B[0m \u001B[38;5;28;01mtry\u001B[39;00m:\n\u001B[1;32m    208\u001B[0m     \u001B[38;5;28;01mwith\u001B[39;00m config_context(\n\u001B[1;32m    209\u001B[0m         skip_parameter_validation\u001B[38;5;241m=\u001B[39m(\n\u001B[1;32m    210\u001B[0m             prefer_skip_nested_validation \u001B[38;5;129;01mor\u001B[39;00m global_skip_validation\n\u001B[1;32m    211\u001B[0m         )\n\u001B[1;32m    212\u001B[0m     ):\n\u001B[0;32m--> 213\u001B[0m         \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mfunc\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    214\u001B[0m \u001B[38;5;28;01mexcept\u001B[39;00m InvalidParameterError \u001B[38;5;28;01mas\u001B[39;00m e:\n\u001B[1;32m    215\u001B[0m     \u001B[38;5;66;03m# When the function is just a wrapper around an estimator, we allow\u001B[39;00m\n\u001B[1;32m    216\u001B[0m     \u001B[38;5;66;03m# the function to delegate validation to the estimator, but we replace\u001B[39;00m\n\u001B[1;32m    217\u001B[0m     \u001B[38;5;66;03m# the name of the estimator by the name of the function in the error\u001B[39;00m\n\u001B[1;32m    218\u001B[0m     \u001B[38;5;66;03m# message to avoid confusion.\u001B[39;00m\n\u001B[1;32m    219\u001B[0m     msg \u001B[38;5;241m=\u001B[39m re\u001B[38;5;241m.\u001B[39msub(\n\u001B[1;32m    220\u001B[0m         \u001B[38;5;124mr\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mparameter of \u001B[39m\u001B[38;5;124m\\\u001B[39m\u001B[38;5;124mw+ must be\u001B[39m\u001B[38;5;124m\"\u001B[39m,\n\u001B[1;32m    221\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mparameter of \u001B[39m\u001B[38;5;132;01m{\u001B[39;00mfunc\u001B[38;5;241m.\u001B[39m\u001B[38;5;18m__qualname__\u001B[39m\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m must be\u001B[39m\u001B[38;5;124m\"\u001B[39m,\n\u001B[1;32m    222\u001B[0m         \u001B[38;5;28mstr\u001B[39m(e),\n\u001B[1;32m    223\u001B[0m     )\n",
+      "File \u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/model_selection/_validation.py:1282\u001B[0m, in \u001B[0;36mcross_val_predict\u001B[0;34m(estimator, X, y, groups, cv, n_jobs, verbose, fit_params, params, pre_dispatch, method)\u001B[0m\n\u001B[1;32m   1279\u001B[0m \u001B[38;5;66;03m# We clone the estimator to make sure that all the folds are\u001B[39;00m\n\u001B[1;32m   1280\u001B[0m \u001B[38;5;66;03m# independent, and that it is pickle-able.\u001B[39;00m\n\u001B[1;32m   1281\u001B[0m parallel \u001B[38;5;241m=\u001B[39m Parallel(n_jobs\u001B[38;5;241m=\u001B[39mn_jobs, verbose\u001B[38;5;241m=\u001B[39mverbose, pre_dispatch\u001B[38;5;241m=\u001B[39mpre_dispatch)\n\u001B[0;32m-> 1282\u001B[0m predictions \u001B[38;5;241m=\u001B[39m \u001B[43mparallel\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m   1283\u001B[0m \u001B[43m    \u001B[49m\u001B[43mdelayed\u001B[49m\u001B[43m(\u001B[49m\u001B[43m_fit_and_predict\u001B[49m\u001B[43m)\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m   1284\u001B[0m \u001B[43m        \u001B[49m\u001B[43mclone\u001B[49m\u001B[43m(\u001B[49m\u001B[43mestimator\u001B[49m\u001B[43m)\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1285\u001B[0m \u001B[43m        \u001B[49m\u001B[43mX\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1286\u001B[0m \u001B[43m        \u001B[49m\u001B[43my\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1287\u001B[0m \u001B[43m        \u001B[49m\u001B[43mtrain\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1288\u001B[0m \u001B[43m        \u001B[49m\u001B[43mtest\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1289\u001B[0m \u001B[43m        \u001B[49m\u001B[43mrouted_params\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mestimator\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mfit\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1290\u001B[0m \u001B[43m        \u001B[49m\u001B[43mmethod\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1291\u001B[0m \u001B[43m    \u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1292\u001B[0m \u001B[43m    \u001B[49m\u001B[38;5;28;43;01mfor\u001B[39;49;00m\u001B[43m \u001B[49m\u001B[43mtrain\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mtest\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;129;43;01min\u001B[39;49;00m\u001B[43m \u001B[49m\u001B[43msplits\u001B[49m\n\u001B[1;32m   1293\u001B[0m \u001B[43m\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1295\u001B[0m inv_test_indices \u001B[38;5;241m=\u001B[39m np\u001B[38;5;241m.\u001B[39mempty(\u001B[38;5;28mlen\u001B[39m(test_indices), dtype\u001B[38;5;241m=\u001B[39m\u001B[38;5;28mint\u001B[39m)\n\u001B[1;32m   1296\u001B[0m inv_test_indices[test_indices] \u001B[38;5;241m=\u001B[39m np\u001B[38;5;241m.\u001B[39marange(\u001B[38;5;28mlen\u001B[39m(test_indices))\n",
+      "File \u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/parallel.py:74\u001B[0m, in \u001B[0;36mParallel.__call__\u001B[0;34m(self, iterable)\u001B[0m\n\u001B[1;32m     69\u001B[0m config \u001B[38;5;241m=\u001B[39m get_config()\n\u001B[1;32m     70\u001B[0m iterable_with_config \u001B[38;5;241m=\u001B[39m (\n\u001B[1;32m     71\u001B[0m     (_with_config(delayed_func, config), args, kwargs)\n\u001B[1;32m     72\u001B[0m     \u001B[38;5;28;01mfor\u001B[39;00m delayed_func, args, kwargs \u001B[38;5;129;01min\u001B[39;00m iterable\n\u001B[1;32m     73\u001B[0m )\n\u001B[0;32m---> 74\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28;43msuper\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43m)\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[38;5;21;43m__call__\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43miterable_with_config\u001B[49m\u001B[43m)\u001B[49m\n",
+      "File \u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/joblib/parallel.py:1918\u001B[0m, in \u001B[0;36mParallel.__call__\u001B[0;34m(self, iterable)\u001B[0m\n\u001B[1;32m   1916\u001B[0m     output \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_get_sequential_output(iterable)\n\u001B[1;32m   1917\u001B[0m     \u001B[38;5;28mnext\u001B[39m(output)\n\u001B[0;32m-> 1918\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m output \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mreturn_generator \u001B[38;5;28;01melse\u001B[39;00m \u001B[38;5;28;43mlist\u001B[39;49m\u001B[43m(\u001B[49m\u001B[43moutput\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1920\u001B[0m \u001B[38;5;66;03m# Let's create an ID that uniquely identifies the current call. If the\u001B[39;00m\n\u001B[1;32m   1921\u001B[0m \u001B[38;5;66;03m# call is interrupted early and that the same instance is immediately\u001B[39;00m\n\u001B[1;32m   1922\u001B[0m \u001B[38;5;66;03m# re-used, this id will be used to prevent workers that were\u001B[39;00m\n\u001B[1;32m   1923\u001B[0m \u001B[38;5;66;03m# concurrently finalizing a task from the previous call to run the\u001B[39;00m\n\u001B[1;32m   1924\u001B[0m \u001B[38;5;66;03m# callback.\u001B[39;00m\n\u001B[1;32m   1925\u001B[0m \u001B[38;5;28;01mwith\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_lock:\n",
+      "File \u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/joblib/parallel.py:1847\u001B[0m, in \u001B[0;36mParallel._get_sequential_output\u001B[0;34m(self, iterable)\u001B[0m\n\u001B[1;32m   1845\u001B[0m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mn_dispatched_batches \u001B[38;5;241m+\u001B[39m\u001B[38;5;241m=\u001B[39m \u001B[38;5;241m1\u001B[39m\n\u001B[1;32m   1846\u001B[0m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mn_dispatched_tasks \u001B[38;5;241m+\u001B[39m\u001B[38;5;241m=\u001B[39m \u001B[38;5;241m1\u001B[39m\n\u001B[0;32m-> 1847\u001B[0m res \u001B[38;5;241m=\u001B[39m \u001B[43mfunc\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1848\u001B[0m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mn_completed_tasks \u001B[38;5;241m+\u001B[39m\u001B[38;5;241m=\u001B[39m \u001B[38;5;241m1\u001B[39m\n\u001B[1;32m   1849\u001B[0m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mprint_progress()\n",
+      "File \u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/parallel.py:136\u001B[0m, in \u001B[0;36m_FuncWrapper.__call__\u001B[0;34m(self, *args, **kwargs)\u001B[0m\n\u001B[1;32m    134\u001B[0m     config \u001B[38;5;241m=\u001B[39m {}\n\u001B[1;32m    135\u001B[0m \u001B[38;5;28;01mwith\u001B[39;00m config_context(\u001B[38;5;241m*\u001B[39m\u001B[38;5;241m*\u001B[39mconfig):\n\u001B[0;32m--> 136\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mfunction\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n",
+      "File \u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/model_selection/_validation.py:1367\u001B[0m, in \u001B[0;36m_fit_and_predict\u001B[0;34m(estimator, X, y, train, test, fit_params, method)\u001B[0m\n\u001B[1;32m   1365\u001B[0m     estimator\u001B[38;5;241m.\u001B[39mfit(X_train, \u001B[38;5;241m*\u001B[39m\u001B[38;5;241m*\u001B[39mfit_params)\n\u001B[1;32m   1366\u001B[0m \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[0;32m-> 1367\u001B[0m     \u001B[43mestimator\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mfit\u001B[49m\u001B[43m(\u001B[49m\u001B[43mX_train\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43my_train\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mfit_params\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1368\u001B[0m func \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mgetattr\u001B[39m(estimator, method)\n\u001B[1;32m   1369\u001B[0m predictions \u001B[38;5;241m=\u001B[39m func(X_test)\n",
+      "File \u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/base.py:1473\u001B[0m, in \u001B[0;36m_fit_context.<locals>.decorator.<locals>.wrapper\u001B[0;34m(estimator, *args, **kwargs)\u001B[0m\n\u001B[1;32m   1466\u001B[0m     estimator\u001B[38;5;241m.\u001B[39m_validate_params()\n\u001B[1;32m   1468\u001B[0m \u001B[38;5;28;01mwith\u001B[39;00m config_context(\n\u001B[1;32m   1469\u001B[0m     skip_parameter_validation\u001B[38;5;241m=\u001B[39m(\n\u001B[1;32m   1470\u001B[0m         prefer_skip_nested_validation \u001B[38;5;129;01mor\u001B[39;00m global_skip_validation\n\u001B[1;32m   1471\u001B[0m     )\n\u001B[1;32m   1472\u001B[0m ):\n\u001B[0;32m-> 1473\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mfit_method\u001B[49m\u001B[43m(\u001B[49m\u001B[43mestimator\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43margs\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mkwargs\u001B[49m\u001B[43m)\u001B[49m\n",
+      "File \u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/ensemble/_forest.py:363\u001B[0m, in \u001B[0;36mBaseForest.fit\u001B[0;34m(self, X, y, sample_weight)\u001B[0m\n\u001B[1;32m    360\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m issparse(y):\n\u001B[1;32m    361\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124msparse multilabel-indicator for y is not supported.\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n\u001B[0;32m--> 363\u001B[0m X, y \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43m_validate_data\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m    364\u001B[0m \u001B[43m    \u001B[49m\u001B[43mX\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    365\u001B[0m \u001B[43m    \u001B[49m\u001B[43my\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    366\u001B[0m \u001B[43m    \u001B[49m\u001B[43mmulti_output\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;28;43;01mTrue\u001B[39;49;00m\u001B[43m,\u001B[49m\n\u001B[1;32m    367\u001B[0m \u001B[43m    \u001B[49m\u001B[43maccept_sparse\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mcsc\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m,\u001B[49m\n\u001B[1;32m    368\u001B[0m \u001B[43m    \u001B[49m\u001B[43mdtype\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mDTYPE\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m    369\u001B[0m \u001B[43m    \u001B[49m\u001B[43mforce_all_finite\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;28;43;01mFalse\u001B[39;49;00m\u001B[43m,\u001B[49m\n\u001B[1;32m    370\u001B[0m \u001B[43m\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    371\u001B[0m \u001B[38;5;66;03m# _compute_missing_values_in_feature_mask checks if X has missing values and\u001B[39;00m\n\u001B[1;32m    372\u001B[0m \u001B[38;5;66;03m# will raise an error if the underlying tree base estimator can't handle missing\u001B[39;00m\n\u001B[1;32m    373\u001B[0m \u001B[38;5;66;03m# values. Only the criterion is required to determine if the tree supports\u001B[39;00m\n\u001B[1;32m    374\u001B[0m \u001B[38;5;66;03m# missing values.\u001B[39;00m\n\u001B[1;32m    375\u001B[0m estimator \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mtype\u001B[39m(\u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mestimator)(criterion\u001B[38;5;241m=\u001B[39m\u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mcriterion)\n",
+      "File \u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/base.py:650\u001B[0m, in \u001B[0;36mBaseEstimator._validate_data\u001B[0;34m(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)\u001B[0m\n\u001B[1;32m    648\u001B[0m         y \u001B[38;5;241m=\u001B[39m check_array(y, input_name\u001B[38;5;241m=\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124my\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;241m*\u001B[39m\u001B[38;5;241m*\u001B[39mcheck_y_params)\n\u001B[1;32m    649\u001B[0m     \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[0;32m--> 650\u001B[0m         X, y \u001B[38;5;241m=\u001B[39m \u001B[43mcheck_X_y\u001B[49m\u001B[43m(\u001B[49m\u001B[43mX\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43my\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[38;5;241;43m*\u001B[39;49m\u001B[43mcheck_params\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    651\u001B[0m     out \u001B[38;5;241m=\u001B[39m X, y\n\u001B[1;32m    653\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m no_val_X \u001B[38;5;129;01mand\u001B[39;00m check_params\u001B[38;5;241m.\u001B[39mget(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mensure_2d\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;28;01mTrue\u001B[39;00m):\n",
+      "File \u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/validation.py:1301\u001B[0m, in \u001B[0;36mcheck_X_y\u001B[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001B[0m\n\u001B[1;32m   1296\u001B[0m         estimator_name \u001B[38;5;241m=\u001B[39m _check_estimator_name(estimator)\n\u001B[1;32m   1297\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\n\u001B[1;32m   1298\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;132;01m{\u001B[39;00mestimator_name\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m requires y to be passed, but the target y is None\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m   1299\u001B[0m     )\n\u001B[0;32m-> 1301\u001B[0m X \u001B[38;5;241m=\u001B[39m \u001B[43mcheck_array\u001B[49m\u001B[43m(\u001B[49m\n\u001B[1;32m   1302\u001B[0m \u001B[43m    \u001B[49m\u001B[43mX\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1303\u001B[0m \u001B[43m    \u001B[49m\u001B[43maccept_sparse\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43maccept_sparse\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1304\u001B[0m \u001B[43m    \u001B[49m\u001B[43maccept_large_sparse\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43maccept_large_sparse\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1305\u001B[0m \u001B[43m    \u001B[49m\u001B[43mdtype\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mdtype\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1306\u001B[0m \u001B[43m    \u001B[49m\u001B[43morder\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43morder\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1307\u001B[0m \u001B[43m    \u001B[49m\u001B[43mcopy\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mcopy\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1308\u001B[0m \u001B[43m    \u001B[49m\u001B[43mforce_writeable\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mforce_writeable\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1309\u001B[0m \u001B[43m    \u001B[49m\u001B[43mforce_all_finite\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mforce_all_finite\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1310\u001B[0m \u001B[43m    \u001B[49m\u001B[43mensure_2d\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mensure_2d\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1311\u001B[0m \u001B[43m    \u001B[49m\u001B[43mallow_nd\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mallow_nd\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1312\u001B[0m \u001B[43m    \u001B[49m\u001B[43mensure_min_samples\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mensure_min_samples\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1313\u001B[0m \u001B[43m    \u001B[49m\u001B[43mensure_min_features\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mensure_min_features\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1314\u001B[0m \u001B[43m    \u001B[49m\u001B[43mestimator\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mestimator\u001B[49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1315\u001B[0m \u001B[43m    \u001B[49m\u001B[43minput_name\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[38;5;124;43mX\u001B[39;49m\u001B[38;5;124;43m\"\u001B[39;49m\u001B[43m,\u001B[49m\n\u001B[1;32m   1316\u001B[0m \u001B[43m\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1318\u001B[0m y \u001B[38;5;241m=\u001B[39m _check_y(y, multi_output\u001B[38;5;241m=\u001B[39mmulti_output, y_numeric\u001B[38;5;241m=\u001B[39my_numeric, estimator\u001B[38;5;241m=\u001B[39mestimator)\n\u001B[1;32m   1320\u001B[0m check_consistent_length(X, y)\n",
+      "File \u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/validation.py:1012\u001B[0m, in \u001B[0;36mcheck_array\u001B[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001B[0m\n\u001B[1;32m   1010\u001B[0m         array \u001B[38;5;241m=\u001B[39m xp\u001B[38;5;241m.\u001B[39mastype(array, dtype, copy\u001B[38;5;241m=\u001B[39m\u001B[38;5;28;01mFalse\u001B[39;00m)\n\u001B[1;32m   1011\u001B[0m     \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[0;32m-> 1012\u001B[0m         array \u001B[38;5;241m=\u001B[39m \u001B[43m_asarray_with_order\u001B[49m\u001B[43m(\u001B[49m\u001B[43marray\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43morder\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43morder\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mdtype\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mdtype\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mxp\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mxp\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m   1013\u001B[0m \u001B[38;5;28;01mexcept\u001B[39;00m ComplexWarning \u001B[38;5;28;01mas\u001B[39;00m complex_warning:\n\u001B[1;32m   1014\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mValueError\u001B[39;00m(\n\u001B[1;32m   1015\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mComplex data not supported\u001B[39m\u001B[38;5;130;01m\\n\u001B[39;00m\u001B[38;5;132;01m{}\u001B[39;00m\u001B[38;5;130;01m\\n\u001B[39;00m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;241m.\u001B[39mformat(array)\n\u001B[1;32m   1016\u001B[0m     ) \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mcomplex_warning\u001B[39;00m\n",
+      "File \u001B[0;32m/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/sklearn/utils/_array_api.py:751\u001B[0m, in \u001B[0;36m_asarray_with_order\u001B[0;34m(array, dtype, order, copy, xp, device)\u001B[0m\n\u001B[1;32m    749\u001B[0m     array \u001B[38;5;241m=\u001B[39m numpy\u001B[38;5;241m.\u001B[39marray(array, order\u001B[38;5;241m=\u001B[39morder, dtype\u001B[38;5;241m=\u001B[39mdtype)\n\u001B[1;32m    750\u001B[0m \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[0;32m--> 751\u001B[0m     array \u001B[38;5;241m=\u001B[39m \u001B[43mnumpy\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43masarray\u001B[49m\u001B[43m(\u001B[49m\u001B[43marray\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43morder\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43morder\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mdtype\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mdtype\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    753\u001B[0m \u001B[38;5;66;03m# At this point array is a NumPy ndarray. We convert it to an array\u001B[39;00m\n\u001B[1;32m    754\u001B[0m \u001B[38;5;66;03m# container that is consistent with the input's namespace.\u001B[39;00m\n\u001B[1;32m    755\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m xp\u001B[38;5;241m.\u001B[39masarray(array)\n",
       "\u001B[0;31mValueError\u001B[0m: setting an array element with a sequence."
      ]
     }
    ],
    "source": [
-    "# Initialize the Random Forest model\n",
-    "model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
+    "y_pred_proba = cross_val_predict(model, X, y, cv=5, method='predict_proba')\n",
+    "\n",
+    "# Store predictions with original indices\n",
+    "predictions_df = pd.DataFrame(y_pred_proba, index=original_indices, columns=['Class_0_Proba', 'Class_1_Proba'])\n",
+    "\n",
+    "# Merge the metadata back\n",
+    "results_df = pd.concat([original_metadata, predictions_df], axis=1)\n",
+    "results_df['True_Label'] = y.loc[results_df.index]\n",
+    "\n",
+    "# Now you have a DataFrame with metadata and predictions\n",
+    "print(results_df.head())"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 472,
+   "id": "5e1d443cf7e8319a",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.119637800Z",
+     "start_time": "2024-09-23T20:08:19.721555Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "# y_pred_proba = cross_val_predict(model, X_train, y_train, cv=5, method='predict_proba')\n",
+    "# \n",
+    "# # Store predictions with original indices\n",
+    "# predictions_df = pd.DataFrame(y_pred_proba, index=original_indices, columns=['Class_0_Proba', 'Class_1_Proba'])\n",
+    "# \n",
+    "# # Merge the metadata back\n",
+    "# results_df = pd.concat([original_metadata, predictions_df], axis=1)\n",
+    "# results_df['True_Label'] = y.loc[results_df.index]\n",
+    "# \n",
+    "# # Now you have a DataFrame with metadata and predictions\n",
+    "# print(results_df.head())"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 395,
+   "id": "16b1b5b7a3add1a2",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.121637400Z",
+     "start_time": "2024-09-23T16:38:16.637862Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "# #including the testing and training sets\n",
+    "# \n",
+    "# predictions_df = pd.DataFrame(y_pred_proba, index=X_train.index, columns=['Class_0_Proba', 'Class_1_Proba'])\n",
+    "# \n",
+    "# # Merge the metadata with predictions using original indices\n",
+    "# results_df = pd.concat([original_metadata.loc[X_train.index], predictions_df], axis=1)\n",
+    "# \n",
+    "# # Add the true labels to the DataFrame\n",
+    "# results_df['True_Label'] = y_train\n",
+    "# \n",
+    "# # Display the first few rows of the DataFrame\n",
+    "# print(results_df.head())\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 396,
+   "id": "7b1dc391dd14f3ae",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.121637400Z",
+     "start_time": "2024-09-23T16:38:18.062511Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "# from sklearn.metrics import classification_report\n",
+    "# \n",
+    "# # Convert predicted probabilities to class labels (0 or 1 based on threshold 0.5)\n",
+    "# y_pred = (y_pred_proba[:, 1] >= 0.5).astype(int)\n",
+    "# \n",
+    "# \n",
+    "# # Generate classification report based on the true labels (y_train) and predicted labels (y_pred)\n",
+    "# report = classification_report(y_train, y_pred)\n",
+    "# \n",
+    "# # Print the classification report\n",
+    "# print(report)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 397,
+   "id": "b405ecd7c775a18e",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.122637900Z",
+     "start_time": "2024-09-23T16:38:19.510780Z"
+    }
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "                                      VIAF_titlelist selected_birthyear  \\\n",
+      "0  ['All men are brothers', 'All men are brothers...                NaN   \n",
+      "1  ['Adagio, clarinet, strings, D♭ major', 'Adieu...                NaN   \n",
+      "2  ['Adventure of Black Peter', 'Adventure of Bla...                NaN   \n",
+      "3  ['10 letters of Sun Yat-Sen, 1914-1916', '30 J...                NaN   \n",
+      "4  ['Alle guten Wünsche zum neuen Jahre sendet I...                NaN   \n",
+      "\n",
+      "  author S2_titlelist status  pub_age  avg_pubdate  VIAF_birthdate  \\\n",
+      "0    NaN          NaN      0      NaN          NaN            1869   \n",
+      "1    NaN          NaN      0      NaN          NaN            1813   \n",
+      "2    NaN          NaN      0      NaN          NaN            1859   \n",
+      "3    NaN          NaN      0      NaN          NaN            1866   \n",
+      "4    NaN          NaN      0      NaN          NaN            1864   \n",
+      "\n",
+      "  overlapping_words  word_overlap_count  lemma_overlap overlapping_lemmas  \\\n",
+      "0                []                   0              0                 {}   \n",
+      "1                []                   0              0                 {}   \n",
+      "2                []                   0              0                 {}   \n",
+      "3                []                   0              0                 {}   \n",
+      "4                []                   0              0                 {}   \n",
+      "\n",
+      "   Class_0_Proba  Class_1_Proba  True_Label  \n",
+      "0           0.86           0.14           0  \n",
+      "1           0.87           0.13           0  \n",
+      "2           0.87           0.13           0  \n",
+      "3           0.87           0.13           0  \n",
+      "4           0.85           0.15           0  \n"
+     ]
+    }
+   ],
+   "source": [
+    "#all data included\n",
     "\n",
-    "# Perform cross-validation\n",
-    "model = RandomForestClassifier()\n",
     "y_pred_proba = cross_val_predict(model, X, y, cv=5, method='predict_proba')\n",
     "\n",
     "# Store predictions with original indices\n",
@@ -3443,27 +4982,201 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "id": "ca884c92-4fe1-4d3c-9c5f-e95c9fa3bfac",
-   "metadata": {},
-   "outputs": [],
-   "source": []
+   "execution_count": 400,
+   "id": "48f3eb9dcfb73d87",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.122637900Z",
+     "start_time": "2024-09-23T16:38:59.281297Z"
+    }
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "              precision    recall  f1-score   support\n",
+      "\n",
+      "           0       0.72      0.93      0.81       532\n",
+      "           1       0.69      0.30      0.41       279\n",
+      "\n",
+      "    accuracy                           0.71       811\n",
+      "   macro avg       0.70      0.61      0.61       811\n",
+      "weighted avg       0.71      0.71      0.67       811\n",
+      "\n"
+     ]
+    }
+   ],
+   "source": [
+    "from sklearn.metrics import classification_report\n",
+    "\n",
+    "# Convert predicted probabilities to class labels (0 or 1 based on threshold 0.5)\n",
+    "# y_pred = (y_pred_proba[:, 1] >= 0.5).astype(int)\n",
+    "\n",
+    "y_pred = (y_pred_proba[:, 1] >= 0.8).astype(int)\n",
+    "\n",
+    "\n",
+    "# Generate classification report based on the true labels (y_train) and predicted labels (y_pred)\n",
+    "report = classification_report(y, y_pred)\n",
+    "\n",
+    "# Print the classification report\n",
+    "print(report)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 401,
+   "id": "caa227f968559feb",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.122637900Z",
+     "start_time": "2024-09-23T16:39:16.981673Z"
+    }
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "              precision    recall  f1-score   support\n",
+      "\n",
+      "           0       0.79      0.77      0.78       532\n",
+      "           1       0.58      0.61      0.60       279\n",
+      "\n",
+      "    accuracy                           0.72       811\n",
+      "   macro avg       0.69      0.69      0.69       811\n",
+      "weighted avg       0.72      0.72      0.72       811\n",
+      "\n"
+     ]
+    }
+   ],
+   "source": [
+    "y_pred = (y_pred_proba[:, 1] >= 0.5).astype(int)\n",
+    "\n",
+    "\n",
+    "# Generate classification report based on the true labels (y_train) and predicted labels (y_pred)\n",
+    "report = classification_report(y, y_pred)\n",
+    "\n",
+    "# Print the classification report\n",
+    "print(report)"
+   ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 404,
+   "id": "f71b1072614fd57a",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.122637900Z",
+     "start_time": "2024-09-23T17:48:54.319742Z"
+    }
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "              precision    recall  f1-score   support\n",
+      "\n",
+      "           0       0.74      0.87      0.80       532\n",
+      "           1       0.63      0.42      0.51       279\n",
+      "\n",
+      "    accuracy                           0.72       811\n",
+      "   macro avg       0.69      0.65      0.65       811\n",
+      "weighted avg       0.71      0.72      0.70       811\n",
+      "\n"
+     ]
+    }
+   ],
+   "source": [
+    "y_pred = (y_pred_proba[:, 1] >= 0.7).astype(int)\n",
+    "\n",
+    "\n",
+    "# Generate classification report based on the true labels (y_train) and predicted labels (y_pred)\n",
+    "report = classification_report(y, y_pred)\n",
+    "\n",
+    "# Print the classification report\n",
+    "print(report)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 403,
+   "id": "4168213b968986a0",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.122637900Z",
+     "start_time": "2024-09-23T16:40:02.760541Z"
+    }
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "              precision    recall  f1-score   support\n",
+      "\n",
+      "           0       0.67      0.98      0.80       532\n",
+      "           1       0.76      0.09      0.17       279\n",
+      "\n",
+      "    accuracy                           0.68       811\n",
+      "   macro avg       0.72      0.54      0.48       811\n",
+      "weighted avg       0.71      0.68      0.58       811\n",
+      "\n"
+     ]
+    }
+   ],
+   "source": [
+    "# y_pred = (y_pred_proba[:, 1] >= 0.9).astype(int)\n",
+    "# \n",
+    "# \n",
+    "# # Generate classification report based on the true labels (y_train) and predicted labels (y_pred)\n",
+    "# report = classification_report(y, y_pred)\n",
+    "# \n",
+    "# # Print the classification report\n",
+    "# print(report)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 399,
    "id": "b74156fd-9f1e-43ba-8007-837e9275c0a8",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.122637900Z",
+     "start_time": "2024-09-23T16:38:24.875827Z"
+    }
+   },
    "outputs": [],
-   "source": []
+   "source": [
+    "#results\n",
+    "# \n",
+    "# from sklearn.metrics import confusion_matrix\n",
+    "# from sklearn.metrics import classification_report\n",
+    "# confusion_matrix = confusion_matrix(y,y_pred)\n",
+    "# print(confusion_matrix) #gives true pos, false neg etc\n",
+    "# \n",
+    "# classification_report = classification_report(y, y_pred) #gives precision, f1_score etc\n",
+    "# print(classification_report)"
+   ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 405,
    "id": "d9a803ca-4f1e-4ff0-830f-d52e554cf80b",
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2024-09-24T16:14:23.122637900Z",
+     "start_time": "2024-09-23T17:49:08.096782Z"
+    }
+   },
    "outputs": [],
-   "source": []
+   "source": [
+    "#save the selected model to a pickle file\n",
+    "# Save the trained model to a pickle file\n",
+    "with open('viaf_classifier_sept23.pkl', 'wb') as file:\n",
+    "    pickle.dump(model, file)"
+   ]
   }
  ],
  "metadata": {
